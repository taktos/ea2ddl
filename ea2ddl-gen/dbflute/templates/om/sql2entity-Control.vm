

targetdatabase = $targetDatabase

##
## Loop by data-model.
##
#foreach ($dataModel in $dataModels)

  ##
  ## Loop by database.
  ##
  #foreach ($database in $dataModel.Databases)

    ## ------------------------------------------------------------------
    ##                                                    Global-Paramter
    ##                                                    ---------------
    ## ===================================================================================
    ##                                                                            Language
    ##                                                                            ========
    ## [Language]
    #set ($glTargetLanguage = ${database.TargetLanguage})

    ## ===================================================================================
    ##                                                                  Resource Directory
    ##                                                                  ==================
    #set ($glResourceDirectory = ${database.resourceDirectory})

    ## [Extension]
    #set ($glTemplateFileExtension = ${database.TemplateFileExtension})
    #set ($glClassFileExtension = ${database.ClassFileExtension})

    ## [Prefix-and-Suffix]
    #set ($glProjectPrefix = ${database.ProjectPrefix})
    #set ($glBasePrefix = ${database.BasePrefix})
    #set ($glBaseSuffixForEntity = ${database.BaseSuffixForEntity})

    #set ($glDaoReadableInterfaceName = "${glProjectPrefix}DaoReadable")
    #set ($glDaoWritableInterfaceName = "${glProjectPrefix}DaoWritable")

    ## [Common-Entity]
    #set ($glEntityInterfaceName = "${glProjectPrefix}Entity")
    #set ($glEntityDefinedCommonColumnInterfaceName = "${glProjectPrefix}EntityDefinedCommonColumn")

    ## [ConditionBean]
    #set ($glConditionBeanInterfaceName = "${glProjectPrefix}ConditionBean")

    ## [OutsideSql]
    #set ($glProcedurePmbName = "${glProjectPrefix}ProcedurePmb")

    ## [Allcommon-ConditionBean-Option]
    #set ($glConditionOptionLikeSearchName = "${glProjectPrefix}LikeSearchOption")

    ## [DBMeta]
    #set ($glDBMetaInterfaceName = "${glProjectPrefix}DBMeta")
    #set ($glDBMetaAbstractName = "${glProjectPrefix}AbstractDBMeta")
    #set ($glDBMetaInstanceHandlerName = "${glProjectPrefix}DBMetaInstanceHandler")

    ## [Allcommon-DBMetaInfo]
    #set ($glForeignInfoName = "${glProjectPrefix}ForeignInfo")
    #set ($glRefererInfoName = "${glProjectPrefix}RefererInfo")
    #set ($glRelationInfoName = "${glProjectPrefix}RelationInfo")
    #set ($glUniqueInfoName = "${glProjectPrefix}UniqueInfo")
    #set ($glColumnInfoName = "${glProjectPrefix}ColumnInfo")

    ## [Helper]
    #set ($glMapListStringName = "${glProjectPrefix}MapListString")
    #set ($glMapListStringImplName = "${glProjectPrefix}MapListStringImpl")
    #set ($glMapStringBuilderName = "${glProjectPrefix}MapStringBuilder")
    #set ($glMapStringBuilderImplName = "${glProjectPrefix}MapStringBuilderImpl")

    ## [Allcommon-JDBC]
    #set ($glCursorHandlerName = "${glProjectPrefix}CursorHandler")
    #set ($glCursorFetcherName = "${glProjectPrefix}CursorFetcher")
    #set ($glLatestSqlProviderName = "${glProjectPrefix}LatestSqlProvider")

    ## [ClassificationDefinition]
    #set ($glClassificationDefinition = "${glProjectPrefix}ClassificationDefinition")

    ## [Package]
    #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
    #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.cbean")
    #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.cbean.coption")
    #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.cbean.outsidesql")
    #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.dbmeta")
    #set ($glPackageBaseCommonDBMetaInfo = "${database.baseCommonPackage}.dbmeta.info")
    #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.helper")
    #set ($glPackageBaseCommonJavaLike = "${database.baseCommonPackage}.javalike")
    #set ($glPackageBaseCommonJdbc = "${database.baseCommonPackage}.jdbc")
    #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
    #set ($glPackageBaseDaoCursor = "${database.baseDaoPackage}.cursor" )
    #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
    #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
    #set ($glPackageExtendedDaoCursor = "${database.extendedDaoPackage}.cursor")
    #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #if ($database.isTargetLanguageCSharp())
      #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
      #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.CBean")
      #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.CBean.COption")
      #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.CBean.OutsideSql")
      #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.Dbm")
      #set ($glPackageBaseCommonDBMetaInfo = "${database.baseCommonPackage}.Dbm.Info")
      #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.Helper")
      #set ($glPackageBaseCommonJavaLike = "${database.baseCommonPackage}.JavaLike")
      #set ($glPackageBaseCommonJdbc = "${database.baseCommonPackage}.Ado")
      #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
      #set ($glPackageBaseDaoCursor = "${database.baseDaoPackage}.Cursor" )
      #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
      #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
      #set ($glPackageExtendedDaoCursor = "${database.extendedDaoPackage}.Cursor")
      #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #end

    ## [Other]
    #set ($glConditionBeanInitialName = "CB")
    #set ($glConditionQueryInitialName = "CQ")
    #set ($glAttachedCBArgsVariableName = "cb")
    #set ($glParentVariablePrefix = "_parent")
    #set ($glChildrenVariablePrefix = "_children")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                 Parse cutomize entity
    ##                                                                                 ---------------------
    ## Setup output directory.
    $database.enableSql2EntityOutputDirectory()

    ## for Sql2Entity
    #set ($isSql2Entity = true)

    #set ($glPackageBaseCustomizeEntity = "${database.Sql2EntityBaseEntityPackage}" )
    #set ($glPackageCustomizeDBMeta = "${database.Sql2EntityDBMetaPackage}")
    #set ($glPackageExtendedCustomizeEntity = "${database.Sql2EntityExtendedEntityPackage}" )

    #set ($path = $database.getPackageAsPath(${glPackageBaseCustomizeEntity}))
    $database.makeDirectory($path)

    #if (!$database.isSql2EntityPlainEntity())
      #set ($path = $database.getPackageAsPath(${glPackageCustomizeDBMeta}))
      $database.makeDirectory($path)
    #end

    #set ($path = $database.getPackageAsPath(${glPackageExtendedCustomizeEntity}))
    $database.makeDirectory($path)

    ##
    ## Delete old customize classes.
    ##
    $database.deleteOldCustomizeClass();
	
    $database.debug("public void parseCustomizeEntity() {")
    $database.debug("    final List<String> tableNameList = getTableList();")
    $database.debug("    for (String tableName : tableNameList) {")
    #foreach ($table in $database.tableList)
      #set ($myBaseObjectClassName = "${glProjectPrefix}${glBasePrefix}${table.javaName}")
      #set ($myBaseEntityPackageName = "${glPackageBaseCustomizeEntity}")
      #set ($myExtendedObjectClassName = "${glProjectPrefix}${table.javaName}")
      #set ($myExtendedEntityPackageName = "${glPackageExtendedCustomizeEntity}")
      #set ($myDBMetaClassName = "${glProjectPrefix}${table.javaName}Dbm")
      #set ($myDBMetaPackageName = "${glPackageCustomizeDBMeta}")

      #set ($myEntityVariableName = "${table.uncapitalisedJavaName}")
      #set ($myEntityListVariableName = "${table.uncapitalisedJavaName}List")
      #set ($myCBVariableName = "${table.uncapitalisedJavaName}")

      #set ($myBaseDaoCursorPackageName = "${glPackageBaseDaoCursor}")
      #set ($myExtendedDaoCursorPackageName = "${glPackageExtendedDaoCursor}")
      #set ($myBaseTypeSafeCursorClassName = "${glProjectPrefix}${glBasePrefix}${table.javaName}Cursor")
      #set ($myBaseTypeSafeCursorHandlerClassName = "${glProjectPrefix}${glBasePrefix}${table.javaName}CursorHandler")
      #set ($myExtendedTypeSafeCursorClassName = "${glProjectPrefix}${table.javaName}Cursor")
      #set ($myExtendedTypeSafeCursorHandlerClassName = "${glProjectPrefix}${table.javaName}CursorHandler")

      #set ($isExistDao = false)
      #set ($isExistConditionBean = false)

      #if ($table.isSql2EntityTypeSafeCursor())
        #set ($path = $database.getPackageAsPath(${myBaseDaoCursorPackageName}))
        $database.makeDirectory($path)

        $database.debug("        parse('BaseTypeSafeCursor')")
        #set ( $path = "${database.getPackageAsPath(${myBaseDaoCursorPackageName})}${myBaseTypeSafeCursorClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsdao/cursor/BsTypeSafeCursor.${glTemplateFileExtension}",$path ,"" ,"")

        $database.debug("        parse('BaseTypeSafeCursorHandler')")
        #set ( $path = "${database.getPackageAsPath(${myBaseDaoCursorPackageName})}${myBaseTypeSafeCursorHandlerClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsdao/cursor/BsTypeSafeCursorHandler.${glTemplateFileExtension}",$path ,"" ,"")

        #set ($path = $database.getPackageAsPath(${myExtendedDaoCursorPackageName}))
        $database.makeDirectory($path)

        $database.debug("        parse('ExtendedTypeSafeCursor')")
        #set ( $path = "${database.getPackageAsPath(${myExtendedDaoCursorPackageName})}${myExtendedTypeSafeCursorClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/exdao/cursor/ExTypeSafeCursor.${glTemplateFileExtension}",$path ,"" ,"")
        #end

        $database.debug("        parse('ExtendedTypeSafeCursorHandler')")
        #set ( $path = "${database.getPackageAsPath(${myExtendedDaoCursorPackageName})}${myExtendedTypeSafeCursorHandlerClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/exdao/cursor/ExTypeSafeCursorHandler.${glTemplateFileExtension}",$path ,"" ,"")
        #end
      #else
        #if ($database.isSql2EntityPlainEntity())
          $database.debug("        parseBaseCustomizeEntity(tableName);     // ${myBaseObjectClassName}")
          #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/bsentity/PlainBaseEntity.${glTemplateFileExtension}",$path ,"" ,"")
        #else
          $database.debug("        parseBaseCustomizeEntity(tableName);     // ${myBaseObjectClassName}")
          #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/bsentity/BaseEntity.${glTemplateFileExtension}",$path ,"" ,"")

          $database.debug("        parseCustomizeDBMeta(tableName);         // ${myDBMetaClassName}")
          #set ( $path = "${database.getPackageAsPath(${myDBMetaPackageName})}${myDBMetaClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/bsentity/dbmeta/DBMetaImpl.${glTemplateFileExtension}",$path,"", "")
        #end

        #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $database.debug("        parseExtendedCustomizeEntity(tableName); // ${myExtendedObjectClassName}")
          $generator.parse("om/${glResourceDirectory}/exentity/ExtendedEntity.${glTemplateFileExtension}",$path ,"" ,"")
        #end
      #end
    #end
    $database.debug("    }")
    $database.debug("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                  Parse parameter bean
    ##                                                                                  --------------------
    #if ($database.isExistPmbMetaData())
    $database.debug("public void parseParameterBean() {")
    $database.debug("    final List<DfParameterBeanMetaData> parameterBeanList = getParameterBeanList();")
    $database.debug("    for (DfParameterBeanMetaData parameterBean : parameterBeanList) {")

    #set ($glPackageBaseParameterBean = "${database.sql2EntityBaseParameterBeanPackage}" )
    #set ($glPackageExtendedParameterBean = "${database.sql2EntityExtendedParameterBeanPackage}" )

      #set ($path = $database.getPackageAsPath(${glPackageBaseParameterBean}))
      $database.makeDirectory($path)
      #set ($path = $database.getPackageAsPath(${glPackageExtendedParameterBean}))
      $database.makeDirectory($path)

      #foreach ($pmbMetaData in $database.pmbMetaDataList)
        #set ($pmbClassName = "$pmbMetaData.className")
        #set ($pmbSuperClassName = "$pmbMetaData.superClassName")
        #set ($myBaseParameterBeanClassName = "${glProjectPrefix}${glBasePrefix}${pmbClassName}")
        #set ($myExtendedParameterBeanClassName = "${glProjectPrefix}${pmbClassName}")

        $database.debug("        parseBaseParameterBean(parameterBean);     // ${myBaseParameterBeanClassName}")
        #set ( $path = "${database.getPackageAsPath(${glPackageBaseParameterBean})}${myBaseParameterBeanClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsdao/BsParameterBean.${glTemplateFileExtension}",$path ,"" ,"")

        #set ( $path = "${database.getPackageAsPath(${glPackageExtendedParameterBean})}${myExtendedParameterBeanClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $database.debug("        parseExtendedParameterBean(parameterBean); // ${myExtendedParameterBeanClassName}")
          $generator.parse("om/${glResourceDirectory}/exdao/ExParameterBean.${glTemplateFileExtension}",$path ,"" ,"")
        #end
      #end
    $database.debug("    }")
    $database.debug("}")
    #end

    ## ===================================================================================
    ##                                                                          Simple Dto
    ##                                                                          ==========
    #if ($database.hasSimpleDtoDefinition() && $database.isTargetLanguageJava())
      $database.debug("parseSimpleDto() {// mapper=$database.isSimpleDtoUseDtoMapper()")
      #set ($myDomainEntityPackageName = "${glPackageExtendedEntity}.customize")
      #set ($myBaseEntityPackageName = "${database.simpleDtoBaseDtoPackage}.customize")
      #set ($myExtendedEntityPackageName = "${database.simpleDtoExtendedDtoPackage}.customize")
      #set ($myDtoMapperPackageName = "${database.simpleDtoDtoMapperPackage}.customize")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #if ($database.isSimpleDtoUseDtoMapper())
        #set ($path = $database.getPackageAsPath(${myDtoMapperPackageName}))
        $database.makeDirectory($path)
      #end

      #foreach ($table in $database.tables)
        #if (!$table.isSql2EntityTypeSafeCursor())
        #set ($myBaseObjectClassName = "${database.simpleDtoBaseDtoPrefix}${table.javaName}${database.simpleDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.simpleDtoExtendedDtoPrefix}${table.javaName}${database.simpleDtoExtendedDtoSuffix}")
        #set ($myDtoMapperClassName = "${myExtendedObjectClassName}Mapper")

        $database.debug("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if ($database.isSimpleDtoUseDtoMapper())
          #set ( $path = "${database.getPackageAsPath(${myDtoMapperPackageName})}${myDtoMapperClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/other/simpledto/mapper/SimpleDtoMapper.${glTemplateFileExtension}", $path, "table", $table)
        #end
        #end
      #end
      $database.debug("}")
    #end

    ## ===================================================================================
    ##                                                                            Flex Dto
    ##                                                                            ========
    #if ($database.hasFlexDtoDefinition() && $database.isTargetLanguageJava())
      $database.enableFlexDtoOutputDirectory()
      $database.debug("parseFlexDto() {")
      #set ($myBaseEntityPackageName = "${database.flexDtoBaseDtoPackage}.customize")
      #set ($myExtendedEntityPackageName = "${database.flexDtoExtendedDtoPackage}.customize")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #foreach ($table in $database.tables)
        #if (!$table.isSql2EntityTypeSafeCursor())
        #set ($myBaseObjectClassName = "${database.flexDtoBaseDtoPrefix}${table.javaName}${database.flexDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.flexDtoExtendedDtoPrefix}${table.javaName}${database.flexDtoExtendedDtoSuffix}")
        #set ($myRemoteSimpleDtoClassName = "${database.simpleDtoExtendedDtoPackage}.customize.${myExtendedObjectClassName}")

        $database.debug("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.as" )
        $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.as" )
          #if ($database.isFlexDtoOverrideExtended() || !$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end
        #end
      #end
      $database.debug("}")
	  $database.enableSql2EntityOutputDirectory()
    #end

  #end
#end
