

targetdatabase = $targetDatabase

##
## Loop by data-model.
##
#foreach ($dataModel in $dataModels)

  ##
  ## Loop by database.
  ##
  #foreach ($database in $dataModel.Databases)
    $database.enableGenerateOutputDirectory()

    ## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ## Initialize CustomizeDao and AdditionalForeignKey and ClassificationDeployment and IncludeQuery.
    ## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    $database.initializeAdditionalPrimaryKey()
    $database.initializeAdditionalForeignKey()
    $database.initializeClassificationDeployment()
    $database.initializeIncludeQuery()
    $database.checkProperties()

    ## *****************************************************************************************************************
    ##                                                                                                   Global Paramter
    ##                                                                                                   ***************
    ## ===================================================================================
    ##                                                                            Language
    ##                                                                            ========
    #set ($glTargetLanguage = ${database.targetLanguage})

    ## ===================================================================================
    ##                                                                  Resource Directory
    ##                                                                  ==================
    #set ($glResourceDirectory = ${database.resourceDirectory})

    ## ===================================================================================
    ##                                                                           Extension
    ##                                                                           =========
    #set ($glTemplateFileExtension = ${database.templateFileExtension})
    #set ($glClassFileExtension = ${database.classFileExtension})

    ## -----------------------------------------------------
    ##                                                Prefix
    ##                                                ------
    #set ($glProjectPrefix = ${database.projectPrefix})
    #set ($glBasePrefix = ${database.basePrefix})
    #set ($glBaseSuffixForEntity = ${database.baseSuffixForEntity})

    ## -----------------------------------------------------
    ##                                                 Dicon
    ##                                                 -----
    #set ($glDaoDiconNamespace = "${database.daoDiconNamespace}")
    #set ($glDBFluteDiconNamespace = "${database.daoDiconNamespace}")
    #set ($glDaoDiconFileName = "${database.daoDiconFileName}")
    #set ($glDBFluteDiconFileName = "${database.DBFluteDiconFileName}")
    #set ($glCreatorDiconFileName = "${database.DBFluteCreatorDiconFileName}")
    #set ($glCustomizerDiconFileName = "${database.DBFluteCustomizerDiconFileName}")
    #set ($glJdbcDiconResourceName = "${database.jdbcDiconResourceName}")
    #set ($glDBFluteBeansFileName = "${database.DBFluteBeansFileName}")

    ## -----------------------------------------------------
    ##                                            Class Name
    ##                                            ----------
    ## [Allcommon-Annotation]
    #set ($glOutsideSqlAnnotation = "OutsideSql")

    ## [Allcommon-Base-AccessContext]
    #set ($glAccessContextName = "${glProjectPrefix}AccessContext")

    ## [Allcommon-Base-Dao]
    #set ($glDaoReadableInterfaceName = "${glProjectPrefix}DaoReadable")
    #set ($glDaoWritableInterfaceName = "${glProjectPrefix}DaoWritable")

    ## [Allcommon-Base-Entity]
    #set ($glEntityInterfaceName = "${glProjectPrefix}Entity")
    #set ($glEntityDefinedCommonColumnInterfaceName = "${glProjectPrefix}EntityDefinedCommonColumn")

    ## [Allcommon-Base-BFinder]
    #set ($glBFinderName = "${glProjectPrefix}BFinder")

    ## [Allcommon-Base-CacheAbstractSelector]
    #set ($glCacheAbstractSelector = "${glProjectPrefix}CacheAbstractSelector")

    ## [Allcommon-Base-DaoSelector]
    #set ($glDaoSelectorInterfaceName = "${glProjectPrefix}DaoSelector")
    #set ($glCacheDaoSelectorName = "${glProjectPrefix}CacheDaoSelector")

    ## [Allcommon-Base-BehaviorSelector]
    #set ($glBehaviorSelectorInterfaceName = "${glProjectPrefix}BehaviorSelector")
    #set ($glCacheBehaviorSelectorName = "${glProjectPrefix}CacheBehaviorSelector")

    ## [Allcommon-Base-GenMetaData]
    #set ($glGenMetaDataClassName = "${glProjectPrefix}GenMetaData")

    ## [Allcommon-Base-InternalMapContext]
    #set ($glInternalMapContextName = "${glProjectPrefix}InternalMapContext")

    ## [Allcommon-Base-ClassificationDefinition]
    #set ($glClassificationDefinition = "${glProjectPrefix}ClassificationDefinition")
    #set ($glCDef = "${glProjectPrefix}CDef")

    ## [Allcommon-Base-Log]
    #set ($glQLog = "${glProjectPrefix}QLog")
    #set ($glXLog = "${glProjectPrefix}XLog")

    ## [Allcommon-Base-DBFluteConfig]
    #set ($glDBFluteConfig = "${glProjectPrefix}DBFluteConfig")

    ## [Allcommon-Behavior]
    #set ($glBehaviorReadableAbstractName = "${glProjectPrefix}AbstractBehaviorReadable")
    #set ($glBehaviorWritableAbstractName = "${glProjectPrefix}AbstractBehaviorWritable")
    #set ($glBehaviorReadableInterfaceName = "${glProjectPrefix}BehaviorReadable")
    #set ($glBehaviorWritableInterfaceName = "${glProjectPrefix}BehaviorWritable")

    ## [Allcommon-Behavior-Batch]
    #set ($glTokenFileReflectionOptionName = "${glProjectPrefix}TokenFileReflectionOption")
    #set ($glTokenFileReflectionResultName = "${glProjectPrefix}TokenFileReflectionResult")
    #set ($glTokenFileReflectionFailureName = "${glProjectPrefix}TokenFileReflectionFailure")
    #set ($glTokenFileOutputOptionName = "${glProjectPrefix}TokenFileOutputOption")
    #set ($glTokenFileOutputResultName = "${glProjectPrefix}TokenFileOutputResult")

    ## [Allcommon-Behavior-Load]
    #set ($glLoadReferrerOptionName = "${glProjectPrefix}LoadReferrerOption")

    ## [Allcommon-Behavior-Setup]
    #set ($glConditionBeanSetupperName = "${glProjectPrefix}ConditionBeanSetupper")
    #set ($glEntityListSetupperName = "${glProjectPrefix}EntityListSetupper")
    #set ($glValueLabelSetupperName = "${glProjectPrefix}ValueLabelSetupper")
    #set ($glValueLabelBoxName = "${glProjectPrefix}ValueLabelBox")

    ## [Allcommon-ConditionBean]
    #set ($glFetchNarrowingBeanInterfaceName = "${glProjectPrefix}FetchNarrowingBean")
    #set ($glSimplePagingBeanName = "${glProjectPrefix}SimplePagingBean")
    #set ($glSimpleOrderByBeanName = "${glProjectPrefix}SimpleOrderByBean")
    #set ($glConditionBeanInterfaceName = "${glProjectPrefix}ConditionBean")
    #set ($glConditionQueryInterfaceName = "${glProjectPrefix}ConditionQuery")
    #set ($glOrderByBeanInterfaceName = "${glProjectPrefix}OrderByBean")
    #set ($glPagingBeanInterfaceName = "${glProjectPrefix}PagingBean")
    #set ($glSelectResourceInterfaceName = "${glProjectPrefix}SelectResource")
    #set ($glFetchNarrowingBeanContextName = "${glProjectPrefix}FetchNarrowingBeanContext")
    #set ($glMapParameterBeanInterfaceName = "${glProjectPrefix}MapParameterBean")
    #set ($glPagingHandlerName = "${glProjectPrefix}PagingHandler")
    #set ($glPagingInvokerName = "${glProjectPrefix}PagingInvoker")
    #set ($glPagingResultBeanName = "${glProjectPrefix}PagingResultBean")
    #set ($glListResultBeanName = "${glProjectPrefix}ListResultBean")
    #set ($glResultBeanBuilderName = "${glProjectPrefix}ResultBeanBuilder")
    #set ($glConditionBeanContextName = "${glProjectPrefix}ConditionBeanContext")
    #set ($glConditionBeanAbstractName = "${glProjectPrefix}AbstractConditionBean")
    #set ($glConditionQueryAbstractName = "${glProjectPrefix}AbstractConditionQuery")
    #set ($glConditionKeyName = "${glProjectPrefix}ConditionKey")
    #set ($glConditionValueName = "${glProjectPrefix}ConditionValue")
    #set ($glSubQuery = "${glProjectPrefix}SubQuery")
    #set ($glUnionQuery = "${glProjectPrefix}UnionQuery")

    ## [Allcommon-ConditionBean-Option]
    #set ($glConditionOptionInterfaceName = "${glProjectPrefix}ConditionOption")
    #set ($glConditionOptionSimpleStringName = "${glProjectPrefix}SimpleStringOption")
    #set ($glConditionOptionFromToName = "${glProjectPrefix}FromToOption")
    #set ($glConditionOptionDateFromToName = "${glProjectPrefix}DateFromToOption")
    #set ($glConditionOptionLikeSearchName = "${glProjectPrefix}LikeSearchOption")
    #set ($glConditionOptionInScopeName = "${glProjectPrefix}InScopeOption")
    #set ($glConditionOptionPartsSplitName = "${glProjectPrefix}SplitOptionParts")
    #set ($glConditionOptionPartsToUpperLowerCaseName = "${glProjectPrefix}ToUpperLowerCaseOptionParts")
    #set ($glConditionOptionPartsToSingleByteName = "${glProjectPrefix}ToSingleByteOptionParts")
    #set ($glConditionOptionPartsAgentJapaneseName = "${glProjectPrefix}JapaneseOptionPartsAgent")

    ## [Allcommon-ConditionBean-Grouping]
    #set ($glGroupingOptionName = "${glProjectPrefix}GroupingOption")
    #set ($glGroupingRowEndDeterminerName = "${glProjectPrefix}GroupingRowEndDeterminer")
    #set ($glGroupingRowResourceName = "${glProjectPrefix}GroupingRowResource")
    #set ($glGroupingRowSetupperName = "${glProjectPrefix}GroupingRowSetupper")

    ## [Allcommon-ConditionBean-Mapping]
    #set ($glEntityDtoMapperName = "${glProjectPrefix}EntityDtoMapper")

    ## [Allcommon-ConditionBean-OutsideSql]
    #set ($glOutsideSqlContextName = "${glProjectPrefix}OutsideSqlContext")
    #set ($glOutsideSqlDaoName = "${glProjectPrefix}OutsideSqlDao")
    #set ($glOutsideSqlOptionName = "${glProjectPrefix}OutsideSqlOption")
    #set ($glProcedurePmbName = "${glProjectPrefix}ProcedurePmb")

    ## [Allcommon-ConditionBean-OutsideSql-Executor]
    #set ($glOutsideSqlBasicExecutorName = "${glProjectPrefix}OutsideSqlBasicExecutor")
    #set ($glOutsideSqlCursorExecutorName = "${glProjectPrefix}OutsideSqlCursorExecutor")
    #set ($glOutsideSqlPagingExecutorName = "${glProjectPrefix}OutsideSqlPagingExecutor")
    #set ($glOutsideSqlEntityExecutorName = "${glProjectPrefix}OutsideSqlEntityExecutor")

    ## [Allcommon-ConditionBean-Pagenavi]
    #set ($glPageNumberLinkName = "${glProjectPrefix}PageNumberLink")
    #set ($glPageNumberLinkSetupperName = "${glProjectPrefix}PageNumberLinkSetupper")
    #set ($glPageGroupBeanName = "${glProjectPrefix}PageGroupBean")
    #set ($glPageGroupOptionName = "${glProjectPrefix}PageGroupOption")
    #set ($glPageRangeBeanName = "${glProjectPrefix}PageRangeBean")
    #set ($glPageRangeOptionName = "${glProjectPrefix}PageRangeOption")

    ## [Allcommon-ConditionBean-SqlClause]
    #set ($glSqlClauseName = "${glProjectPrefix}SqlClause")
    #set ($glSqlClauseInterfaceName = "${glProjectPrefix}SqlClause")
    #set ($glSqlClauseAbstractName = "${glProjectPrefix}AbstractSqlClause")
    #set ($glOrderByClauseName = "${glProjectPrefix}OrderByClause")
    #set ($glOrderByElementName = "${glProjectPrefix}OrderByElement")
    #set ($glWhereClauseSimpleFilterInterfaceName = "${glProjectPrefix}WhereClauseSimpleFilter")

    ## [Allcommon-DBMeta]
    #set ($glDBMetaInterfaceName = "${glProjectPrefix}DBMeta")
    #set ($glDBMetaAbstractName = "${glProjectPrefix}AbstractDBMeta")
    #set ($glDBMetaInstanceHandlerName = "${glProjectPrefix}DBMetaInstanceHandler")

    ## [Allcommon-DBMetaHierarchy]
    #set ($glHierarchyArrangerName = "${glProjectPrefix}HierarchyArranger")
    #set ($glHierarchyBasicRequestName = "${glProjectPrefix}HierarchyBasicRequest")
    #set ($glHierarchyRequestName = "${glProjectPrefix}HierarchyRequest")
    #set ($glHierarchyRequestElementName = "${glProjectPrefix}HierarchyRequestElement")
    #set ($glHierarchySourceColumnName = "${glProjectPrefix}HierarchySourceColumn")
    #set ($glHierarchySourceIteratorName = "${glProjectPrefix}HierarchySourceIterator")
    #set ($glHierarchySourceRowName = "${glProjectPrefix}HierarchySourceRow")

    ## [Allcommon-DBMetaHierarchyBasic]
    #set ($glHierarchySourceEntityColumnName = "${glProjectPrefix}HierarchySourceEntityColumn")
    #set ($glHierarchySourceEntityListIteratorName = "${glProjectPrefix}HierarchySourceEntityListIterator")
    #set ($glHierarchySourceEntityRowName = "${glProjectPrefix}HierarchySourceEntityRow")
    #set ($glHierarchySourceListIteratorName = "${glProjectPrefix}HierarchySourceListIterator")
    #set ($glHierarchySourceRowSetupperName = "${glProjectPrefix}HierarchySourceRowSetupper")

    ## [Allcommon-DBMetaInfo]
    #set ($glForeignInfoName = "${glProjectPrefix}ForeignInfo")
    #set ($glReferrerInfoName = "${glProjectPrefix}ReferrerInfo")
    #set ($glRelationInfoName = "${glProjectPrefix}RelationInfo")
    #set ($glUniqueInfoName = "${glProjectPrefix}UniqueInfo")
    #set ($glColumnInfoName = "${glProjectPrefix}ColumnInfo")

    ## [Allcommon-Exception]
    #set ($glBatchEntityAlreadyUpdatedException = "${glProjectPrefix}BatchEntityAlreadyUpdatedException")
    #set ($glBindVariableCommentNotFoundPropertyException = "${glProjectPrefix}BindVariableCommentNotFoundPropertyException")
    #set ($glBindVariableParameterNullValueException = "${glProjectPrefix}BindVariableParameterNullValueException")
    #set ($glDangerousResultSizeExceptionName = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glDangerousResultSizeException = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glEmbeddedValueCommentNotFoundPropertyException = "${glProjectPrefix}EmbeddedValueCommentNotFoundPropertyException")
    #set ($glEmbeddedValueParameterNullValueException = "${glProjectPrefix}EmbeddedValueParameterNullValueException")
    #set ($glEndCommentNotFoundException = "${glProjectPrefix}EndCommentNotFoundException")
    #set ($glEntityAlreadyUpdatedException = "${glProjectPrefix}EntityAlreadyUpdatedException")
    #set ($glEntityAlreadyDeletedException = "${glProjectPrefix}EntityAlreadyDeletedException")
    #set ($glEntityAlreadyExistsException = "${glProjectPrefix}EntityAlreadyExistsException")
    #set ($glEntityDuplicatedException = "${glProjectPrefix}EntityDuplicatedException")
    #set ($glIfCommentConditionNotFoundException = "${glProjectPrefix}IfCommentConditionNotFoundException")
    #set ($glIfCommentNotBooleanResultException = "${glProjectPrefix}IfCommentNotBooleanResultException")
    #set ($glIfCommentWrongExpressionException = "${glProjectPrefix}IfCommentWrongExpressionException")
    #set ($glOutsideSqlNotFoundException = "${glProjectPrefix}OutsideSqlNotFoundException")
    #set ($glRequiredOptionNotFoundException = "${glProjectPrefix}RequiredOptionNotFoundException")
    #set ($glRecordHasOverlappedException = "${glProjectPrefix}RecordHasOverlappedException")
    #set ($glRecordHasAlreadyBeenDeletedException = "${glProjectPrefix}RecordHasAlreadyBeenDeletedException")
    #set ($glSQLFailureException = "${glProjectPrefix}SQLFailureException")

    ## [Allcommon-Helper]
    #set ($glMapListStringName = "${glProjectPrefix}MapListString")
    #set ($glMapListStringImplName = "${glProjectPrefix}MapListStringImpl")
    #set ($glMapStringBuilderName = "${glProjectPrefix}MapStringBuilder")
    #set ($glMapStringBuilderImplName = "${glProjectPrefix}MapStringBuilderImpl")

    #set ($glGeneralCharacterName = "${glProjectPrefix}GeneralCharacter")
    #set ($glGeneralCharacterImplName = "${glProjectPrefix}GeneralCharacterImpl")

    #set ($glJapaneseCharacterName = "${glProjectPrefix}JapaneseCharacter")
    #set ($glJapaneseCharacterImplName = "${glProjectPrefix}JapaneseCharacterImpl")

    #set ($glInvokeNameExtractingResourceName = "${glProjectPrefix}InvokeNameExtractingResource")
    #set ($glInvokeNameExtractorName = "${glProjectPrefix}InvokeNameExtractor")
    #set ($glInvokeNameExtractorImplName = "${glProjectPrefix}InvokeNameExtractorImpl")
    #set ($glInvokeNameResultName = "${glProjectPrefix}InvokeNameResult")

    #set ($glLineTokenName = "${glProjectPrefix}LineToken")
    #set ($glLineTokenImplName = "${glProjectPrefix}LineTokenImpl")
    #set ($glLineTokenizingOptionName = "${glProjectPrefix}LineTokenizingOption")
    #set ($glLineMakingOptionName = "${glProjectPrefix}LineMakingOption")

    #set ($glFileTokenName = "${glProjectPrefix}FileToken")
    #set ($glFileTokenImplName = "${glProjectPrefix}FileTokenImpl")

    #set ($glFileTokenizingOptionName = "${glProjectPrefix}FileTokenizingOption")
    #set ($glFileTokenizingRowResourceName = "${glProjectPrefix}FileTokenizingRowResource")
    #set ($glFileTokenizingCallbackName = "${glProjectPrefix}FileTokenizingCallback")
    #set ($glFileTokenizingHeaderInfoName = "${glProjectPrefix}FileTokenizingHeaderInfo")

    #set ($glFileMakingOptionName = "${glProjectPrefix}FileMakingOption")
    #set ($glFileMakingRowResourceName = "${glProjectPrefix}FileMakingRowResource")
    #set ($glFileMakingCallbackName = "${glProjectPrefix}FileMakingCallback")
    #set ($glFileMakingHeaderInfoName = "${glProjectPrefix}FileMakingHeaderInfo")
    #set ($glFileMakingSimpleFacadeName = "${glProjectPrefix}FileMakingSimpleFacade")
    #set ($glFileMakingSimpleFacadeImplName = "${glProjectPrefix}FileMakingSimpleFacadeImpl")

    #set ($glAccordingToOrderName = "${glProjectPrefix}AccordingToOrder")
    #set ($glAccordingToOrderOptionName = "${glProjectPrefix}AccordingToOrderOption")
    #set ($glAccordingToOrderIdExtractorName = "${glProjectPrefix}AccordingToOrderIdExtractor")
    #set ($glAccordingToOrderImplName = "${glProjectPrefix}AccordingToOrderImpl")

    ## [Allcommon-JavaLike]
    #set ($glJavaBasic = "${glProjectPrefix}JavaBasic")
    #set ($glJavaCollection = "${glProjectPrefix}JavaCollection")
    #set ($glJavaException = "${glProjectPrefix}JavaException")
    #set ($glJavaReflection = "${glProjectPrefix}JavaReflection")

    ## [Allcommon-JDBC]
    #set ($glCursorHandlerName = "${glProjectPrefix}CursorHandler")
    #set ($glCursorFetcherName = "${glProjectPrefix}CursorFetcher")
    #set ($glLatestSqlProviderName = "${glProjectPrefix}LatestSqlProvider")
    #set ($glStatementConfig = "${glProjectPrefix}StatementConfig")

    ## [Allcommon-JDBC-History]
    #set ($glPreparedExecutionBeanName = "${glProjectPrefix}PreparedExecutionBean")
    #set ($glPreparedParameterElementName = "${glProjectPrefix}PreparedParameterElement")
    #set ($glStatementHistoryName = "${glProjectPrefix}StatementHistory")
    #set ($glStatementHistoryWitnessName = "${glProjectPrefix}StatementHistoryWitness")
    #set ($glTraceablePreparedStatementName = "${glProjectPrefix}TraceablePreparedStatement")

    ## [Allcommon-S2Container]
    #set ($glBehaviorCreator = "${glProjectPrefix}BehaviorCreator")

    ## [Allcommon-S2Dao]
    #set ($glS2DaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glDaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glS2DaoLatestSqlProvider = "${glProjectPrefix}S2DaoLatestSqlProvider")
    #set ($glDaoLatestSqlProvider = "${glProjectPrefix}S2DaoLatestSqlProvider")
    #set ($glS2DaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glDaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glS2DaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glDaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glS2BeanMetaDataFactoryImpl = "${glProjectPrefix}S2BeanMetaDataFactoryImpl")
    #set ($glBeanMetaDataFactoryImpl = "${glProjectPrefix}S2BeanMetaDataFactoryImpl")
    #set ($glS2DaoPropertyTypeFactoryBuilderExtension = "${glProjectPrefix}S2DaoPropertyTypeFactoryBuilderExtension")
    #set ($glDaoPropertyTypeFactoryBuilderExtension = "${glProjectPrefix}S2DaoPropertyTypeFactoryBuilderExtension")
    #set ($glS2DaoSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glDaoStatementFactory = "${glProjectPrefix}S2DaoStatementFactory")
    #set ($glFetchNarrowingResultSetFactory = "${glProjectPrefix}FetchNarrowingResultSetFactory")
    #set ($glFetchNarrowingResultSetWrapper = "${glProjectPrefix}FetchNarrowingResultSetWrapper")
    #set ($glS2DaoSetting = "${glProjectPrefix}S2DaoSetting")

    ## [Allcommon-S2Dao-Internal]
    #set ($glInternalAbstractBeanMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractBeanMetaDataResultSetHandler")
    #set ($glInternalAbstractDtoMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractDtoMetaDataResultSetHandler")
    #set ($glInternalBeanArrayMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanArrayMetaDataResultSetHandler")
    #set ($glInternalBeanListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanListMetaDataResultSetHandler")
    #set ($glInternalBeanGenericListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanGenericListMetaDataResultSetHandler")

    #set ($glInternalAbstractAutoStaticCommand = "${glProjectPrefix}InternalAbstractAutoStaticCommand")
    #set ($glInternalAbstractBatchAutoStaticCommand = "${glProjectPrefix}InternalAbstractBatchAutoStaticCommand")
    #set ($glInternalAbstractDynamicCommand = "${glProjectPrefix}InternalAbstractDynamicCommand")
    #set ($glInternalAbstractSqlCommand = "${glProjectPrefix}InternalAbstractSqlCommand")
    #set ($glInternalAbstractStaticCommand = "${glProjectPrefix}InternalAbstractStaticCommand")
    #set ($glInternalDeleteAutoStaticCommand = "${glProjectPrefix}InternalDeleteAutoStaticCommand")
    #set ($glInternalDeleteBatchAutoStaticCommand = "${glProjectPrefix}InternalDeleteBatchAutoStaticCommand")
    #set ($glInternalDeleteQueryAutoDynamicCommand = "${glProjectPrefix}InternalDeleteQueryAutoDynamicCommand")
    #set ($glInternalInsertAutoDynamicCommand = "${glProjectPrefix}InternalInsertAutoDynamicCommand")
    #set ($glInternalInsertBatchAutoStaticCommand = "${glProjectPrefix}InternalInsertBatchAutoStaticCommand")
    #set ($glInternalProcedureCommand = "${glProjectPrefix}InternalProcedureCommand")
    #set ($glInternalUpdateAutoDynamicCommand = "${glProjectPrefix}InternalUpdateAutoDynamicCommand")
    #set ($glInternalUpdateBatchAutoStaticCommand = "${glProjectPrefix}InternalUpdateBatchAutoStaticCommand")
    #set ($glInternalUpdateDynamicCommand = "${glProjectPrefix}InternalUpdateDynamicCommand")
    #set ($glInternalUpdateModifiedOnlyCommand = "${glProjectPrefix}InternalUpdateModifiedOnlyCommand")
    #set ($glInternalUpdateQueryAutoDynamicCommand = "${glProjectPrefix}InternalUpdateQueryAutoDynamicCommand")

    #set ($glInternalAbstractAutoHandler = "${glProjectPrefix}InternalAbstractAutoHandler")
    #set ($glInternalAbstractBatchAutoHandler = "${glProjectPrefix}InternalAbstractBatchAutoHandler")
    #set ($glInternalBasicHandler = "${glProjectPrefix}InternalBasicHandler")
    #set ($glInternalBasicSelectHandler = "${glProjectPrefix}InternalBasicSelectHandler")
    #set ($glInternalBasicUpdateHandler = "${glProjectPrefix}InternalBasicUpdateHandler")
    #set ($glInternalCommandContextHandler = "${glProjectPrefix}InternalCommandContextHandler")
    #set ($glInternalDeleteAutoHandler = "${glProjectPrefix}InternalDeleteAutoHandler")
    #set ($glInternalDeleteBatchAutoHandler = "${glProjectPrefix}InternalDeleteBatchAutoHandler")
    #set ($glInternalInsertAutoHandler = "${glProjectPrefix}InternalInsertAutoHandler")
    #set ($glInternalInsertBatchAutoHandler = "${glProjectPrefix}InternalInsertBatchAutoHandler")
    #set ($glInternalProcedureHandler = "${glProjectPrefix}InternalProcedureHandler")
    #set ($glInternalUpdateAutoHandler = "${glProjectPrefix}InternalUpdateAutoHandler")
    #set ($glInternalUpdateBatchAutoHandler = "${glProjectPrefix}InternalUpdateBatchAutoHandler")
    #set ($glInternalSqlLog = "${glProjectPrefix}InternalSqlLog")
    #set ($glInternalSqlLogRegistry = "${glProjectPrefix}InternalSqlLogRegistry")
    #set ($glInternalCommandContextCreator = "${glProjectPrefix}InternalCommandContextCreator")
    #set ($glInternalSqlParser = "${glProjectPrefix}InternalSqlParser")
    #set ($glInternalSqlTokenizer = "${glProjectPrefix}InternalSqlTokenizer")
    #set ($glInternalBindVariableUtil = "${glProjectPrefix}InternalBindVariableUtil")

    ## [Allcommon-S2Dao-Internal-Various]
    #set ($glInternalProcedureMetaData = "${glProjectPrefix}InternalProcedureMetaData")
    #set ($glInternalProcedureMetaDataFactory = "${glProjectPrefix}InternalProcedureMetaDataFactory")
    #set ($glInternalProcedureParameterType = "${glProjectPrefix}InternalProcedureParameterType")
    #set ($glInternalRowCreator = "${glProjectPrefix}InternalRowCreator")
    #set ($glInternalRelationRowCreator = "${glProjectPrefix}InternalRelationRowCreator")

    ## [Allcommon-Util]
    #set ($glSimpleAssertUtil = "${glProjectPrefix}SimpleAssertUtil")
    #set ($glSimpleStringUtil = "${glProjectPrefix}SimpleStringUtil")
    #set ($glSimpleSystemUtil = "${glProjectPrefix}SimpleSystemUtil")
    #set ($glValueLabelUtilName = "${glProjectPrefix}ValueLabelUtil")
    #set ($glTraceViewUtilName = "${glProjectPrefix}TraceViewUtil")

    ## ===================================================================================
    ##                                                                            Variable
    ##                                                                            ========
    #set ($glConditionBeanInitialName = "CB")
    #set ($glConditionQueryInitialName = "CQ")
    #set ($glAttachedCBArgsVariableName = "cb")
    #set ($glParentVariablePrefix = "_parent")
    #set ($glChildrenVariablePrefix = "_children")

    ## ===================================================================================
    ##                                                                             Package
    ##                                                                             =======
    ## [Common]
    #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
    #set ($glPackageBaseCommonAnnotation = "${database.baseCommonPackage}.annotation")
    #set ($glPackageBaseCommonBhv = "${database.baseCommonPackage}.bhv")
    #set ($glPackageBaseCommonBhvBatch = "${database.baseCommonPackage}.bhv.batch")
    #set ($glPackageBaseCommonBhvLoad = "${database.baseCommonPackage}.bhv.load")
    #set ($glPackageBaseCommonBhvSetup = "${database.baseCommonPackage}.bhv.setup")
    #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.cbean")
    #set ($glPackageBaseCommonCKey = "${database.baseCommonPackage}.cbean.ckey")
    #set ($glPackageBaseCommonCBeanMapping = "${database.baseCommonPackage}.cbean.mapping")
    #set ($glPackageBaseCommonCBeanGrouping = "${database.baseCommonPackage}.cbean.grouping")
    #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.cbean.outsidesql")
    #set ($glPackageBaseCommonCBeanOutsidesqlExecutor = "${database.baseCommonPackage}.cbean.outsidesql.executor")
    #set ($glPackageBaseCommonCBeanPagenavi = "${database.baseCommonPackage}.cbean.pagenavi")
    #set ($glPackageBaseCommonCBeanPagenaviGroup = "${database.baseCommonPackage}.cbean.pagenavi.group")
    #set ($glPackageBaseCommonCBeanPagenaviRange = "${database.baseCommonPackage}.cbean.pagenavi.range")
    #set ($glPackageBaseCommonSqlClause = "${database.baseCommonPackage}.cbean.sqlclause")
    #set ($glPackageBaseCommonCValue = "${database.baseCommonPackage}.cbean.cvalue")
    #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.cbean.coption")
    #set ($glPackageBaseCommonCOptionParts = "${database.baseCommonPackage}.cbean.coption.parts")
    #set ($glPackageBaseCommonCOptionPartsLocal = "${database.baseCommonPackage}.cbean.coption.parts.local")
    #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.dbmeta")
    #set ($glPackageBaseCommonDBMetaHierarchy = "${database.baseCommonPackage}.dbmeta.hierarchy")
    #set ($glPackageBaseCommonDBMetaHierarchyBasic = "${database.baseCommonPackage}.dbmeta.hierarchy.basic")
    #set ($glPackageBaseCommonDBMetaInfo = "${database.baseCommonPackage}.dbmeta.info")
    #set ($glPackageBaseCommonException = "${database.baseCommonPackage}.exception")
    #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.helper")
    #set ($glPackageBaseCommonHelperCharacter = "${database.baseCommonPackage}.helper.character")
    #set ($glPackageBaseCommonHelperCharacterImpl = "${database.baseCommonPackage}.helper.character.impl")
    #set ($glPackageBaseCommonHelperCollectionOrder = "${database.baseCommonPackage}.helper.collection.order")
    #set ($glPackageBaseCommonHelperCollectionOrderImpl = "${database.baseCommonPackage}.helper.collection.order.impl")
    #set ($glPackageBaseCommonHelperStackTrace = "${database.baseCommonPackage}.helper.stacktrace")
    #set ($glPackageBaseCommonHelperStackTraceImpl = "${database.baseCommonPackage}.helper.stacktrace.impl")
    #set ($glPackageBaseCommonHelperToken = "${database.baseCommonPackage}.helper.token")
    #set ($glPackageBaseCommonHelperTokenLine = "${database.baseCommonPackage}.helper.token.line")
    #set ($glPackageBaseCommonHelperTokenLineImpl = "${database.baseCommonPackage}.helper.token.line.impl")
    #set ($glPackageBaseCommonHelperTokenFile = "${database.baseCommonPackage}.helper.token.file")
    #set ($glPackageBaseCommonHelperTokenFileImpl = "${database.baseCommonPackage}.helper.token.file.impl")

    #set ($glPackageBaseCommonJavaLike = "${database.baseCommonPackage}.javalike")
    #set ($glPackageBaseCommonJdbc = "${database.baseCommonPackage}.jdbc")
    #set ($glPackageBaseCommonJdbcHistory = "${database.baseCommonPackage}.jdbc.history")
    #set ($glPackageBaseCommonS2Container = "${database.baseCommonPackage}.s2container")
    #set ($glPackageBaseCommonS2Dao = "${database.baseCommonPackage}.s2dao")
    #set ($glPackageBaseCommonS2DaoInternal = "${database.baseCommonPackage}.s2dao.internal")
    #set ($glPackageBaseCommonS2DaoInternalVarious = "${database.baseCommonPackage}.s2dao.internal.various")
    #set ($glPackageBaseCommonS2DaoInternalRsHandler = "${database.baseCommonPackage}.s2dao.internal.rshandler")
    #set ($glPackageBaseCommonS2DaoInternalSqlCommand = "${database.baseCommonPackage}.s2dao.internal.sqlcommand")
    #set ($glPackageBaseCommonS2DaoInternalSqlHandler = "${database.baseCommonPackage}.s2dao.internal.sqlhandler")
    #set ($glPackageBaseCommonS2DaoInternalSqlLog = "${database.baseCommonPackage}.s2dao.internal.sqllog")
    #set ($glPackageBaseCommonS2DaoInternalSqlParser = "${database.baseCommonPackage}.s2dao.internal.sqlparser")
    #set ($glPackageBaseCommonS2DaoInternalUtil = "${database.baseCommonPackage}.s2dao.internal.util")
    #set ($glPackageBaseCommonUtil = "${database.baseCommonPackage}.util")

    #if ($database.isTargetLanguageCSharp())
      ## [Common]
      #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
      #set ($glPackageBaseCommonAnnotation = "${database.baseCommonPackage}.Annotation")
      #set ($glPackageBaseCommonBhv = "${database.baseCommonPackage}.Bhv")
      #set ($glPackageBaseCommonBhvBatch = "${database.baseCommonPackage}.Bhv.Batch")
      #set ($glPackageBaseCommonBhvLoad = "${database.baseCommonPackage}.Bhv.Load")
      #set ($glPackageBaseCommonBhvSetup = "${database.baseCommonPackage}.Bhv.Setup")
      #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.CBean")
      #set ($glPackageBaseCommonCKey = "${database.baseCommonPackage}.CBean.CKey")
      #set ($glPackageBaseCommonCBeanMapping = "${database.baseCommonPackage}.CBean.Mapping")
      #set ($glPackageBaseCommonCBeanGrouping = "${database.baseCommonPackage}.CBean.Grouping")
      #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.CBean.OutsideSql")
      #set ($glPackageBaseCommonCBeanOutsidesqlExecutor = "${database.baseCommonPackage}.CBean.OutsideSql.Executor")
      #set ($glPackageBaseCommonCBeanPagenavi = "${database.baseCommonPackage}.CBean.PageNavi")
      #set ($glPackageBaseCommonCBeanPagenaviGroup = "${database.baseCommonPackage}.CBean.PageNavi.Group")
      #set ($glPackageBaseCommonCBeanPagenaviRange = "${database.baseCommonPackage}.CBean.PageNavi.Range")
      #set ($glPackageBaseCommonSqlClause = "${database.baseCommonPackage}.CBean.SClause")
      #set ($glPackageBaseCommonCValue = "${database.baseCommonPackage}.CBean.CValue")
      #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.CBean.COption")
      #set ($glPackageBaseCommonCOptionParts = "${database.baseCommonPackage}.CBean.COption.Parts")
      #set ($glPackageBaseCommonCOptionPartsLocal = "${database.baseCommonPackage}.CBean.COption.Parts.Local")
      #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.Dbm")
      #set ($glPackageBaseCommonDBMetaHierarchy = "${database.baseCommonPackage}.Dbm.Hierarchy")
      #set ($glPackageBaseCommonDBMetaHierarchyBasic = "${database.baseCommonPackage}.Dbm.Hierarchy.Basic")
      #set ($glPackageBaseCommonDBMetaInfo = "${database.baseCommonPackage}.Dbm.Info")
      #set ($glPackageBaseCommonException = "${database.baseCommonPackage}.Exp")
      #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.Helper")
      #set ($glPackageBaseCommonHelperCharacter = "${database.baseCommonPackage}.Helper.Character")
      #set ($glPackageBaseCommonHelperCharacterImpl = "${database.baseCommonPackage}.Helper.Character.Impl")
      #set ($glPackageBaseCommonHelperCollectionOrder = "${database.baseCommonPackage}.Helper.Collection.Order")
      #set ($glPackageBaseCommonHelperCollectionOrderImpl = "${database.baseCommonPackage}.Helper.Collection.Order.Impl")
      #set ($glPackageBaseCommonHelperStackTrace = "${database.baseCommonPackage}.Helper.StTrace")
      #set ($glPackageBaseCommonHelperStackTraceImpl = "${database.baseCommonPackage}.Helper.StTrace.Impl")
      #set ($glPackageBaseCommonHelperToken = "${database.baseCommonPackage}.Helper.Token")
      #set ($glPackageBaseCommonHelperTokenLine = "${database.baseCommonPackage}.Helper.Token.Line")
      #set ($glPackageBaseCommonHelperTokenLineImpl = "${database.baseCommonPackage}.Helper.Token.Line.Impl")
      #set ($glPackageBaseCommonHelperTokenFile = "${database.baseCommonPackage}.Helper.Token.File")
      #set ($glPackageBaseCommonHelperTokenFileImpl = "${database.baseCommonPackage}.Helper.Token.File.Impl")
      #set ($glPackageBaseCommonJavaLike = "${database.baseCommonPackage}.JavaLike")
      #set ($glPackageBaseCommonJdbc = "${database.baseCommonPackage}.Ado")
      #set ($glPackageBaseCommonJdbcHistory = "${database.baseCommonPackage}.Ado.History")
      #set ($glPackageBaseCommonS2Container = "${database.baseCommonPackage}.S2Container")
      #set ($glPackageBaseCommonS2Dao = "${database.baseCommonPackage}.S2Dao")
      #set ($glPackageBaseCommonS2DaoInternalVarious = "${database.baseCommonPackage}.S2Dao.Internal.Various")
      #set ($glPackageBaseCommonS2DaoInternalRsHandler = "${database.baseCommonPackage}.S2Dao.Internal.RsHandler")
      #set ($glPackageBaseCommonS2DaoInternalSqlCommand = "${database.baseCommonPackage}.S2Dao.Internal.SqlCommand")
      #set ($glPackageBaseCommonS2DaoInternalSqlHandler = "${database.baseCommonPackage}.S2Dao.Internal.SqlHandler")
      #set ($glPackageBaseCommonS2DaoInternalSqlParser = "${database.baseCommonPackage}.S2Dao.Internal.SqlParser")
      #set ($glPackageBaseCommonS2DaoInternalUtil = "${database.baseCommonPackage}.S2Dao.Internal.Util")
      #set ($glPackageBaseCommonUtil = "${database.baseCommonPackage}.Util")
    #end

    ## [Main]
    #set ($glPackageBaseBhv = "${database.baseBehaviorPackage}")
    #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
    #set ($glPackageBaseCustomizeDao = "${database.baseDaoPackage}.customize" )
    #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
    #set ($glPackageBaseCustomizeEntity = "${database.baseEntityPackage}.customize" )
    #set ($glPackageExtendedBhv = "${database.extendedBehaviorPackage}")
    #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
    #set ($glPackageExtendedCustomizeDao = "${database.extendedDaoPackage}.customize" )
    #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #set ($glPackageExtendedCustomizeEntity = "${database.extendedEntityPackage}.customize" )
    #set ($glPackageBaseCB = "${database.conditionBeanPackage}.bs")
    #set ($glPackageCB = "${database.conditionBeanPackage}")
    #set ($glPackageBaseCQ = "${database.conditionBeanPackage}.cq.bs")
    #set ($glPackageCQ = "${database.conditionBeanPackage}.cq")
    #set ($glPackageCIQ = "${database.conditionBeanPackage}.cq.ciq")
    #set ($glPackageNss = "${database.conditionBeanPackage}.nss")
    #set ($glPackageBaseDBMeta = "${glPackageBaseEntity}.dbmeta")
    #set ($glPackageBaseCustomizeDBMeta = "${glPackageBaseCustomizeEntity}.dbmeta")
    #set ($glPackageBaseSqlParameterBean = "${database.SqlParameterBeanPackage}.bsparam")
    #set ($glPackageExtendedSqlParameterBean = "${database.SqlParameterBeanPackage}.exparam")
    #set ($glPackageArgumentBean = "${database.ArgumentBeanPackage}")

    #if ($database.isTargetLanguageCSharp())
      #set ($glPackageBaseBhv = "${database.baseBehaviorPackage}")
      #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
      #set ($glPackageBaseCustomizeDao = "${database.baseDaoPackage}.Customize" )
      #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
      #set ($glPackageBaseCustomizeEntity = "${database.baseEntityPackage}.Customize" )
      #set ($glPackageExtendedBhv = "${database.extendedBehaviorPackage}")
      #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
      #set ($glPackageExtendedCustomizeDao = "${database.extendedDaoPackage}.Customize" )
      #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
      #set ($glPackageExtendedCustomizeEntity = "${database.extendedEntityPackage}.Customize" )
      #set ($glPackageBaseCB = "${database.conditionBeanPackage}.BS")
      #set ($glPackageCB = "${database.conditionBeanPackage}")
      #set ($glPackageBaseCQ = "${database.conditionBeanPackage}.CQ.BS")
      #set ($glPackageCQ = "${database.conditionBeanPackage}.CQ")
      #set ($glPackageCIQ = "${database.conditionBeanPackage}.CQ.Ciq")
      #set ($glPackageNss = "${database.conditionBeanPackage}.Nss")
      #set ($glPackageBaseDBMeta = "${glPackageBaseEntity}.Dbm")
      #set ($glPackageBaseCustomizeDBMeta = "${glPackageBaseCustomizeEntity}.Dbm")
      #set ($glPackageBaseSqlParameterBean = "${database.SqlParameterBeanPackage}.BsParam")
      #set ($glPackageExtendedSqlParameterBean = "${database.SqlParameterBeanPackage}.ExParam")
      #set ($glPackageArgumentBean = "${database.ArgumentBeanPackage}")
    #end

    ## *****************************************************************************************************************
    ##                                                                                                           Parsing
    ##                                                                                                           *******
    ## ===================================================================================
    ##                                                                          annotation
    ##                                                                          ==========
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonAnnotation}))
    $database.makeDirectory($path)

    $database.info("public void parseAllcommonAnnotation) {")
    $database.info("    parse('OutsideSql');")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonAnnotation})}${glOutsideSqlAnnotation}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/annotation/OutsideSql.${glTemplateFileExtension}",$path,"", "")

    $database.info("}")

    ## ===================================================================================
    ##                                                                            behavior
    ##                                                                            ========
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhv}))
    $database.makeDirectory($path)

    $database.info("public void parseAllcommonBehavior) {")
    $database.info("    parse('BehaviorReadable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorReadableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/BehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('BehaviorWritable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorWritableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/BehaviorWritable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('AbstractBehaviorReadable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorReadableAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/AbstractBehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("    parse('AbstractBehaviorWritable');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorWritableAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/bhv/AbstractBehaviorWritable.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvBatch}))
      $database.makeDirectory($path)

      $database.info("    parseTokenFileReflectionOption()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionOption.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileReflectionResult()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionResultName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionResult.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileReflectionFailure()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionFailureName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileReflectionFailure.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileOutputOption()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileOutputOption.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseTokenFileOutputResult()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputResultName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/batch/TokenFileOutputResult.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvLoad}))
      $database.makeDirectory($path)

      $database.info("    parse('LoadReferrerOption')")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvLoad})}${glLoadReferrerOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/load/LoadReferrerOption.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvSetup}))
      $database.makeDirectory($path)

      $database.info("    parseConditionBeanSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glConditionBeanSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ConditionBeanSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseEntityListSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glEntityListSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/EntityListSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseValueLabelSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ValueLabelSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseValueLabelBox()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelBoxName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/setup/ValueLabelBox.${glTemplateFileExtension}",$path ,"", "")
    #end
    #if ($database.isTargetLanguageCSharp())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvLoad}))
      $database.makeDirectory($path)

      $database.info("    parse('LoadReferrerOption')")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvLoad})}${glLoadReferrerOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/load/LoadReferrerOption.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonBhvSetup}))
      $database.makeDirectory($path)

      $database.info("    parseConditionBeanSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glConditionBeanSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/Setup/ConditionBeanSetupper.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseEntityListSetupper()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glEntityListSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/bhv/Setup/EntityListSetupper.${glTemplateFileExtension}",$path ,"", "")
    #end
    $database.info("}")

    ## ===================================================================================
    ##                                                                      access-context
    ##                                                                      ==============
    $database.info("public void parseAccessContext() {")
    $database.info("    parseAccessContext()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glAccessContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/AccessContext.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------
    ##                                         allcommon dao
    ##                                         -------------
    $database.info("public void parseDaoInterface() {")
    $database.info("    parseDaoReadable")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDaoReadableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DaoReadable.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseDaoWritable")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDaoWritableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DaoWritable.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------
    ##                                      allcommon entity
    ##                                      ----------------
    $database.info("public void parseEntityInterface() {")
    $database.info("    parseEntity();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glEntityInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/Entity.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseEntityDefinedCommonColumn();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glEntityDefinedCommonColumnInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/EntityDefinedCommonColumn.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------
    ##                              allcommon condition-bean
    ##                              ------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.info("public void parseConditionBeanFramework() {")
    $database.info("    parseFetchNarrowingBeanContext()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBeanContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/FetchNarrowingBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseFetchNarrowingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/FetchNarrowingBean.${glTemplateFileExtension}",$path ,"", "")

    #if (!$database.isTargetLanguageCSharp())
      $database.info("    parseSimpleOrderByBean()")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSimpleOrderByBeanName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SimpleOrderByBean.${glTemplateFileExtension}",$path ,"", "")
    #end

    $database.info("    parseSimplePagingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSimplePagingBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SimplePagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingHandler')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingHandlerName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingHandler.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingInvoker')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingInvokerName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingInvoker.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PagingResultBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingResultBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ListResultBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glListResultBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ListResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ResultBeanBuilder');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glResultBeanBuilderName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ResultBeanBuilder.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionBeanContext()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionQuery()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionQueryInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('MapParameterBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glMapParameterBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/MapParameterBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parsePagingBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/PagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseOrderByBean()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glOrderByBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/OrderByBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseSelectResource()")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSelectResourceInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SelectResource.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('SubQuery')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glSubQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/SubQuery.${glTemplateFileExtension}",$path ,"", "")

	$database.info("    parse('UnionQuery')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glUnionQuery}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/UnionQuery.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.info("    parseAbstractConditionBean")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/AbstractConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseAbstractConditionQuery")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionQueryAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/AbstractConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                allcommon condition-bean condition-key
    ##                --------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCKey}))
    $database.makeDirectory($path)

    $database.info("    parseConditionKey")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_equal")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}Equal.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_equal.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_notEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}NotEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_notEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_greaterThan")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}GreaterThan.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_greaterThan.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_lessThan")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LessThan.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_lessThan.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_greaterEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}GreaterEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_greaterEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_lessEqual")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LessEqual.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_lessEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_prefixSearch")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}PrefixSearch.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_prefixSearch.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_likeSearch")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LikeSearch.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_likeSearch.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_inScope")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}InScope.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_inScope.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_notInScope")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}NotInScope.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_notInScope.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_isNull")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}IsNull.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_isNull.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseConditionKey_isNotNull")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}IsNotNull.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/ckey/ConditionKey_isNotNull.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##             allcommon condition-bean condition-option
    ##             -----------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOption}))
    $database.makeDirectory($path)

    $database.info("    parseConditionOption")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/ConditionOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('SimpleStringOption')")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionSimpleStringName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/SimpleStringOption.${glTemplateFileExtension}",$path ,"", "")
	
    $database.info("    parse('FromToOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionFromToName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/FromToOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('DateFromToOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionDateFromToName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/DateFromToOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parseLikeSearchOption")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionLikeSearchName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/LikeSearchOption.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.isTargetLanguageJava())
      $database.info("    parseInScopeOption")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionInScopeName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/InScopeOption.${glTemplateFileExtension}",$path ,"", "")
	#end

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOptionParts}))
      $database.makeDirectory($path)

      $database.info("    parseSplitOptionParts")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsSplitName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/SplitOptionParts.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseToUpperLowerCaseOptionParts")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsToUpperLowerCaseName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/ToUpperLowerCaseOptionParts.${glTemplateFileExtension}",$path ,"", "")

      $database.info("    parseToSingleByteOptionParts")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsToSingleByteName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/ToSingleByteOptionParts.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal}))
      $database.makeDirectory($path)

      $database.info("    parseJapaneseOptionPartsAgent")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal})}${glConditionOptionPartsAgentJapaneseName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/coption/parts/local/JapaneseOptionPartsAgent.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -------------------------------------------------------
    ##                allcommon condition-bean condition-value
    ##                ----------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCValue}))
    $database.makeDirectory($path)

    $database.info("    parseConditionValue")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCValue})}${glConditionValueName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/cvalue/ConditionValue.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                       allcommon condition-bean grouping
    ##                       ---------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping}))
    $database.makeDirectory($path)

    $database.info("    parse('GroupingOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingOptionName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowEndDeterminer');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowEndDeterminerName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowEndDeterminer.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowResource');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowResourceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowResource.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('GroupingRowSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowSetupperName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/grouping/GroupingRowSetupper.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanMapping}))
    $database.makeDirectory($path)

    $database.info("    parse('EntityDtoMapper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanMapping})}${glEntityDtoMapperName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/mapping/EntityDtoMapper.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                  allcommon condition-bean outside-sql
    ##                  ------------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql}))
    $database.makeDirectory($path)

    $database.info("    parse('OutsideSqlContext');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/OutsideSqlContext.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlDao');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlDaoName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/OutsideSqlDao.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlOptionName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/OutsideSqlOption.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ProcedurePmb');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glProcedurePmbName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/ProcedurePmb.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor}))
    $database.makeDirectory($path)

    $database.info("    parse('OutsideSqlBasicExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlBasicExecutorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlBasicExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlCursorExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlCursorExecutorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlCursorExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlPagingExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlPagingExecutorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlPagingExecutor.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('OutsideSqlEntityExecutor');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesqlExecutor})}${glOutsideSqlEntityExecutorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/outsidesql/executor/OutsideSqlEntityExecutor.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                    allcommon condition-bean page-navi
    ##                    ----------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi}))
    $database.makeDirectory($path)

    $database.info("    parse('PageNumberLink');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLinkName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/PageNumberLink.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageNumberLinkSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLinkSetupperName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/PageNumberLinkSetupper.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup}))
    $database.makeDirectory($path)

    $database.info("    parse('PageGroupBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/group/PageGroupBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageGroupOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupOptionName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/group/PageGroupOption.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange}))
    $database.makeDirectory($path)

    $database.info("    parse('PageRangeBean');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/range/PageRangeBean.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('PageRangeOption');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeOptionName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/pagenavi/range/PageRangeOption.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                     allcommon condition-bean sql-clause
    ##                     -----------------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonSqlClause}))
    $database.makeDirectory($path)

    $database.info("    parseSqlClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parseAbstractSqlClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/AbstractSqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    #if ($database.isTargetLanguageJava())

      $database.info("    parse('WhereClauseSimpleFilter');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glWhereClauseSimpleFilterInterfaceName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/WhereClauseSimpleFilter.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_derby")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Derby.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_derby.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_h2")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}H2.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_h2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_oracle")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Oracle.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_oracle.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_firebird")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Firebird.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_firebird.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_mysql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}MySql.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_mysql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_postgresql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}PostgreSql.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_postgresql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_mssql")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}SqlServer.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_mssql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_db2")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Db2.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_db2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_interbase")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Interbase.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_interbase.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parseSqlClause_default")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Default.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_default.${glTemplateFileExtension}",$path ,"" ,"")
    #end
    #if ($database.isTargetLanguageCSharp())
      $database.info("    parseSqlClause_${database.DatabaseType}")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}${database.DaoGenDbName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/SqlClause_${database.DatabaseType}.${glTemplateFileExtension}",$path ,"" ,"")
    #end

    $database.info("    parseOrderByClause")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByClauseName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/OrderByClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parseOrderByElement")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByElementName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/cbean/sqlclause/OrderByElement.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                        allcommon dbmeta
    ##                                        ----------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.info("public void parseDBMetaClass() {")
    $database.info("    parseDBMeta();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/DBMeta.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parseAbstractDBMeta();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/AbstractDBMeta.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy}))
      $database.makeDirectory($path)

      $database.info("    parse('HierarchyArranger');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyArrangerName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyArranger.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyBasicRequest');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyBasicRequestName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyBasicRequest.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyRequest');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyRequestName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyRequest.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchyRequestElement');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchyRequestElementName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchyRequestElement.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceColumn');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceColumnName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceColumn.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceIteratorName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceRow');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchy})}${glHierarchySourceRowName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/HierarchySourceRow.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic}))
      $database.makeDirectory($path)

      $database.info("    parse('HierarchySourceEntityColumn');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityColumnName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityColumn.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceEntityListIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityListIteratorName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityListIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceEntityRow');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceEntityRowName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceEntityRow.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceListIterator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceListIteratorName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceListIterator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('HierarchySourceRowSetupper');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaHierarchyBasic})}${glHierarchySourceRowSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/hierarchy/basic/HierarchySourceRowSetupper.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo}))
      $database.makeDirectory($path)

      $database.info("    parse('ForeignInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glForeignInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ForeignInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ReferrerInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glReferrerInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ReferrerInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('RelationInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glRelationInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/RelationInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('UniqueInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glUniqueInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/UniqueInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ColumnInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glColumnInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ColumnInfo.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isTargetLanguageCSharp())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo}))
      $database.makeDirectory($path)

      $database.info("    parse('ForeignInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glForeignInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ForeignInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ReferrerInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glReferrerInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ReferrerInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('RelationInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glRelationInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/RelationInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('UniqueInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glUniqueInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/UniqueInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('ColumnInfo');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMetaInfo})}${glColumnInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/info/ColumnInfo.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.info("    parseDBMetaInstanceHandler();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaInstanceHandlerName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/dbmeta/DBMetaInstanceHandler.${glTemplateFileExtension}",$path,"", "")

    $database.info("}")

    ## -------------------------------------------------------
    ##                                     allcommon exception
    ##                                     -------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonException}))
    $database.makeDirectory($path)

    $database.info("public void parseExceptionClass() {")

    $database.info("    parse('BatchEntityAlreadyUpdatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBatchEntityAlreadyUpdatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BatchEntityAlreadyUpdatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('BindVariableCommentNotFoundPropertyException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBindVariableCommentNotFoundPropertyException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BindVariableCommentNotFoundPropertyException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('BindVariableParameterNullValueException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glBindVariableParameterNullValueException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/BindVariableParameterNullValueException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EmbeddedValueCommentNotFoundPropertyException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEmbeddedValueCommentNotFoundPropertyException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EmbeddedValueCommentNotFoundPropertyException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EmbeddedValueParameterNullValueException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEmbeddedValueParameterNullValueException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EmbeddedValueParameterNullValueException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EndCommentNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEndCommentNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EndCommentNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentConditionNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentConditionNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentConditionNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentNotBooleanResultException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentNotBooleanResultException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentNotBooleanResultException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('IfCommentWrongExpressionException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glIfCommentWrongExpressionException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/IfCommentWrongExpressionException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('DangerousResultSizeException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glDangerousResultSizeException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/DangerousResultSizeException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyUpdatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyUpdatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyUpdatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyDeletedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyDeletedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyDeletedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityAlreadyExistsException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityAlreadyExistsException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityAlreadyExistsException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityDuplicatedException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glEntityDuplicatedException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/EntityDuplicatedException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('OutsideSqlNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glOutsideSqlNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/OutsideSqlNotFoundException.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('RequiredOptionNotFoundException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRequiredOptionNotFoundException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/RequiredOptionNotFoundException.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      $database.info("    parseRecordHasAlreadyBeenDeletedException();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasAlreadyBeenDeletedException}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/exception/RecordHasAlreadyBeenDeletedException.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseRecordHasOverlappedException();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasOverlappedException}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/exception/RecordHasOverlappedException.${glTemplateFileExtension}",$path,"", "")
    #end

    ## DBFlute-0.7.7
    $database.info("    parse('SQLFailureException');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonException})}${glSQLFailureException}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/exception/SQLFailureException.${glTemplateFileExtension}",$path,"", "")
    $database.info("}")

    ## -------------------------------------------------------
    ##                                        allcommon helper
    ##                                        ----------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelper}))
    $database.makeDirectory($path)

    $database.info("public void parseHelperClass() {")

    $database.info("    parseMapListString();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListStringName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapListString.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parseMapListStringImpl();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListStringImplName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapListStringImpl.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parseMapStringBuilder();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilderName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapStringBuilder.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parseMapStringBuilderImpl();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilderImplName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/helper/MapStringBuilderImpl.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCharacter}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl}))
      $database.makeDirectory($path)

      $database.info("    parseGeneralCharacter();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glGeneralCharacterName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/GeneralCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseGeneralCharacterImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glGeneralCharacterImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/impl/GeneralCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseJapaneseCharacter();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glJapaneseCharacterName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/JapaneseCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseJapaneseCharacterImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glJapaneseCharacterImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/character/impl/JapaneseCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrderImpl}))
      $database.makeDirectory($path)

      $database.info("    parseAccordingToOrder();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrderName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrder.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrderOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrderOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderIdExtractor();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrder})}${glAccordingToOrderIdExtractorName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/AccordingToOrderIdExtractor.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseAccordingToOrderImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperCollectionOrderImpl})}${glAccordingToOrderImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/collection/order/impl/AccordingToOrderImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperStackTraceImpl}))
      $database.makeDirectory($path)

      $database.info("    parse('InvokeNameExtractingResource');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameExtractingResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameExtractingResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameExtractor');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameExtractorName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameExtractor.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameResult');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTrace})}${glInvokeNameResultName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/InvokeNameResult.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InvokeNameExtractorImpl');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperStackTraceImpl})}${glInvokeNameExtractorImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/stacktrace/impl/InvokeNameExtractorImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperToken}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl}))
      $database.makeDirectory($path)

      $database.info("    parseLineToken();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineTokenName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineToken.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineTokenImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl})}${glLineTokenImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/impl/LineTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineTokenizingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineTokenizingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseLineMakingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineMakingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/line/LineMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileToken();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileToken.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileTokenImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/impl/FileTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingRowResource();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingRowResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingCallback();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingCallbackName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileTokenizingHeaderInfo();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingHeaderInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileTokenizingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingOption();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingRowResource();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingRowResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingCallback();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingCallbackName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingHeaderInfo();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingHeaderInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingSimpleFacade();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingSimpleFacadeName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/FileMakingSimpleFacade.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parseFileMakingSimpleFacadeImpl();")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileMakingSimpleFacadeImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/helper/token/file/impl/FileMakingSimpleFacadeImpl.${glTemplateFileExtension}",$path,"", "")
    #end

    $database.info("}")

    ## -------------------------------------------------------
    ##                                allcommon classification
    ##                                ------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    #if ($database.hasClassificationDefinitionMap())
      $database.info("parseAllcommonClassification() {")

      $database.info("    parse('ClassificationDefinition');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glClassificationDefinition}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/ClassificationDefinition.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("    parse('CDef');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCDef}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/CDef.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("}")
    #end

    ## -------------------------------------------------------
    ##                                   allcommon s2container
    ##                                   ---------------------
    #if ($database.isTargetLanguageJava())
      $database.info("parseAllcommonS2Container() {")
      #if ($database.isTargetContainerSeasar())
        #if ($database.isAvailableHotDeploy())
          #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2Container}))
          $database.makeDirectory($path)

          $database.info("    parse('BehaviorCreator');")
          #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Container})}${glBehaviorCreator}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/allcommon/s2container/BehaviorCreator.${glTemplateFileExtension}",$path ,"" ,"")

          #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
            #set ($path = "${dbfluteDiconPackageName}" )
            $database.makeDirectory($path)

            #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteHotDeployDicon.${glTemplateFileExtension}", $path, "", "")

            #set ($path = "${dbfluteDiconPackageName}/${glCreatorDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteCreatorDicon.${glTemplateFileExtension}", $path, "", "")

            #set ($path = "${dbfluteDiconPackageName}/${glCustomizerDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteCustomizerDicon.${glTemplateFileExtension}", $path, "", "")
          #end
        #else
          #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
            #set ($path = "${dbfluteDiconPackageName}" )
            $database.makeDirectory($path)

            #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
            $database.info("    ${path}")
            $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteNormalDicon.${glTemplateFileExtension}", $path, "", "")
          #end
        #end
      #end
      #if ($database.isTargetContainerSpring())
        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteBeansFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/s2container/DBFluteBeans.${glTemplateFileExtension}", $path, "", "")
        #end
      #end
      $database.info("}")
    #else
      #if (!$database.isTargetLanguageCSharp())
        $database.info("parseDBFluteDicon() {")
        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/DaoDicon.${glTemplateFileExtension}", $path, "", "")
        #end
      #end
    #end

    ## -------------------------------------------------------
    ##                                         allcommon flute
    ##                                         ---------------
    #if ($database.isTargetContainerSeasar() && $database.isTargetLanguageJava())
      $database.info("public void parseBFinder() {")
      $database.info("    parse('BFinder');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glBFinderName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/BFinder.${glTemplateFileExtension}",$path ,"", "")
      $database.info("}")
    #end

    ## -------------------------------------------------------
    ##                                      allcommon selector
    ##                                      ------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("public void parseSelector() {")
    #if ($database.isTargetLanguageJava())
      $database.info("    parse('CacheAbstractSelector');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheAbstractSelector}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/CacheAbstractSelector.${glTemplateFileExtension}",$path ,"", "")
    #end
    $database.info("    parse('BehaviorSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glBehaviorSelectorInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/BehaviorSelector.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("    parse('CacheBehaviorSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheBehaviorSelectorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CacheBehaviorSelector.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('DaoSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDaoSelectorInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DaoSelector.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("    parseCacheDaoSelector();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheDaoSelectorName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CacheDaoSelector.${glTemplateFileExtension}",$path ,"", "")
    $database.info("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                   Parse gen meta data
    ##                                                                                   -------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("parseGenMetaData();")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glGenMetaDataClassName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/GenMetaData.${glTemplateFileExtension}",$path ,"" ,"")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                            Parse internal map context
    ##                                                                            --------------------------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.info("parse('InternalMapContext');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glInternalMapContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/InternalMapContext.${glTemplateFileExtension}",$path ,"" ,"")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                            Parse qlog
    ##                                                                                            ----------
    $database.info("parse('QLog');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glQLog}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/QLog.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("parse('XLog');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glXLog}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/XLog.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("parse('DBFluteConfig');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBFluteConfig}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBFluteConfig.${glTemplateFileExtension}",$path ,"" ,"")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                       Parse java like
    ##                                                                                       ---------------
    #if ($database.isTargetLanguageCSharp())
      $database.info("public void parseJavaLike() {")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonJavaLike}))
      $database.makeDirectory($path)

      $database.info("    parse('JavaBasic');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJavaLike})}${glJavaBasic}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/javalike/JavaBasic.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('JavaCollection');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJavaLike})}${glJavaCollection}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/javalike/JavaCollection.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('JavaException');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJavaLike})}${glJavaException}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/javalike/JavaException.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('JavaReflection');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJavaLike})}${glJavaReflection}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/javalike/JavaReflection.${glTemplateFileExtension}",$path,"", "")
    #end

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                      Parse jdbc class
    ##                                                                                      ----------------
    $database.info("public void parseJdbcClass() {")
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonJdbc}))
    $database.makeDirectory($path)

    $database.info("    parse('CursorHandler');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glCursorHandlerName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/CursorHandler.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      $database.info("    parse('LatestSqlProvider');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glLatestSqlProviderName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/LatestSqlProvider.${glTemplateFileExtension}",$path,"", "")
	#end

    $database.info("    parse('StatementConfig');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonJdbc})}${glStatementConfig}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/jdbc/StatementConfig.${glTemplateFileExtension}",$path,"", "")
    $database.info("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                            Parse extended s2dao class
    ##                                                                            --------------------------
    $database.info("public void parseS2DaoClass() {")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2Dao}))
    $database.makeDirectory($path)

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoInterceptor.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava() && $database.isVersionAfter1046())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoLatestSqlProvider}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoLatestSqlProvider.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isVersionAfter1047())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoMetaDataExtension}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoMetaDataExtension.${glTemplateFileExtension}",$path,"", "")
    #else
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoMetaDataExtension}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoMetaDataExtension-s4546.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isVersionAfter1047())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoMetaDataFactoryImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoMetaDataFactoryImpl.${glTemplateFileExtension}",$path,"", "")
    #else
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoMetaDataFactoryImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoMetaDataFactoryImpl-s4546.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2BeanMetaDataFactoryImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2BeanMetaDataFactoryImpl.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isTargetLanguageJava() && $database.isVersionAfter1047())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoPropertyTypeFactoryBuilderExtension}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoPropertyTypeFactoryBuilderExtension.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoSelectDynamicCommand}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoSelectDynamicCommand.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glFetchNarrowingResultSetFactory}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/FetchNarrowingResultSetFactory.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glFetchNarrowingResultSetWrapper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/FetchNarrowingResultSetWrapper.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageCSharp())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glS2DaoSetting}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/S2DaoSetting.${glTemplateFileExtension}",$path,"", "")
    #end

    #if ($database.isTargetLanguageJava())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractDtoMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalAbstractDtoMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalAbstractDtoMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBeanMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalAbstractBeanMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalAbstractBeanMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanArrayMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanArrayMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanArrayMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanListMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanListMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanListMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractSqlCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractSqlCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractSqlCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalInsertAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalInsertAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalInsertBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalInsertBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalProcedureCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalProcedureCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateBatchAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateBatchAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateBatchAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateModifiedOnlyCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateModifiedOnlyCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateModifiedOnlyCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalAbstractAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalAbstractAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalAbstractBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalAbstractBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalAbstractBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicSelectHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicSelectHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicSelectHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicUpdateHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicUpdateHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicUpdateHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalCommandContextHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalCommandContextHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalDeleteAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalDeleteAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalDeleteBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalDeleteBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalInsertAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalInsertAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalInsertBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalInsertBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalProcedureHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalProcedureHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalUpdateAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalUpdateAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateBatchAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalUpdateBatchAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalUpdateBatchAutoHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalSqlLog');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog})}${glInternalSqlLog}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqllog/InternalSqlLog.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalSqlLogRegistry');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlLog})}${glInternalSqlLogRegistry}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqllog/InternalSqlLogRegistry.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalSqlParser');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlParser}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlParser.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalSqlTokenizer');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlTokenizer}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlTokenizer.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalCommandContextCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalCommandContextCreator.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalBindVariableUtil');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil})}${glInternalBindVariableUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/util/InternalBindVariableUtil.${glTemplateFileExtension}",$path,"", "")
      
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalProcedureMetaData');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureMetaData}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureMetaData.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureMetaDataFactory');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureMetaDataFactory}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureMetaDataFactory.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureParameterType');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalProcedureParameterType}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalProcedureParameterType.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalRowCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalRowCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalRowCreator.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalRelationRowCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalVarious})}${glInternalRelationRowCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/various/InternalRelationRowCreator.${glTemplateFileExtension}",$path,"", "")
    #end
    #if ($database.isTargetLanguageCSharp())
      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractBeanMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalAbstractBeanMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalAbstractBeanMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanArrayMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanArrayMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanArrayMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanListMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanListMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanListMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBeanGenericListMetaDataResultSetHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalRsHandler})}${glInternalBeanGenericListMetaDataResultSetHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/rshandler/InternalBeanGenericListMetaDataResultSetHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalAbstractAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalAbstractAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoStaticCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteAutoStaticCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteAutoStaticCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalDeleteQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalDeleteQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalInsertAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalInsertAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalProcedureCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalProcedureCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateModifiedOnlyCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateModifiedOnlyCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateModifiedOnlyCommand.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateQueryAutoDynamicCommand');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlCommand})}${glInternalUpdateQueryAutoDynamicCommand}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlcommand/InternalUpdateQueryAutoDynamicCommand.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalAbstractAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalAbstractAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalAbstractAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicSelectHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicSelectHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicSelectHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalBasicUpdateHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalBasicUpdateHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalBasicUpdateHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalCommandContextHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalCommandContextHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalDeleteAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalDeleteAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalDeleteAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalInsertAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalInsertAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalInsertAutoHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalProcedureHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalProcedureHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalProcedureHandler.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalUpdateAutoHandler');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlHandler})}${glInternalUpdateAutoHandler}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlhandler/InternalUpdateAutoHandler.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalSqlParser');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlParser}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlParser.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalSqlTokenizer');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalSqlTokenizer}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalSqlTokenizer.${glTemplateFileExtension}",$path,"", "")

      $database.info("    parse('InternalCommandContextCreator');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalSqlParser})}${glInternalCommandContextCreator}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/sqlparser/InternalCommandContextCreator.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil}))
      $database.makeDirectory($path)

      $database.info("    parse('InternalBindVariableUtil');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2DaoInternalUtil})}${glInternalBindVariableUtil}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/s2dao/internal/util/InternalBindVariableUtil.${glTemplateFileExtension}",$path,"", "")
    #end
    $database.info("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                            Parse util
    ##                                                                                            ----------
    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonUtil}))
    $database.makeDirectory($path)

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleAssertUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleAssertUtil.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleStringUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleStringUtil.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glSimpleSystemUtil}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/SimpleSystemUtil.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glValueLabelUtilName}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/util/ValueLabelUtil.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonUtil})}${glTraceViewUtilName}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/util/TraceViewUtil.${glTemplateFileExtension}",$path,"", "")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                    Parse table object
    ##                                                                                    ------------------
    ## for Sql2Entity
    #set ($isSql2Entity = false)

    #set ($path = $database.getPackageAsPath(${glPackageBaseBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseDao}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseEntity}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseDBMeta}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCIQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageNss}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedDao}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedEntity}))
    $database.makeDirectory($path)

    ##
    ## Delete old table classes.
    ##
    $database.deleteOldTableClass()

    ##
    ## Loop by tables.
    ##
    $database.info("/* * * * * * * * * * * * * * {Table Class}")
    #foreach ($table in $database.tables)
      #if (!$table.isForReferenceOnly())

        $database.info("parseTable('${table.Name}');")
        ##
        ## The name of objects
        ##
        #set ($myExtendedDaoClassName = "${table.extendedDaoClassName}")
        #set ($myExtendedDaoPackageName = "${glPackageExtendedDao}")

        #set ($myBaseDaoClassName = "${table.baseDaoClassName}")
        #set ($myBaseDaoPackageName = "${glPackageBaseDao}")

        #set ($myBaseBhvClassName = "${table.baseBehaviorClassName}")
        #set ($myBaseBhvPackageName = "${glPackageBaseBhv}")
        #set ($myExtendedBhvClassName = "${table.extendedBehaviorClassName}")
        #set ($myExtendedBhvPackageName = "${glPackageExtendedBhv}")

        #set ($myBaseObjectClassName = "${table.baseEntityClassName}")
        #set ($myBaseEntityPackageName = "${glPackageBaseEntity}")

        #set ($myExtendedObjectClassName = "${table.extendedEntityClassName}")
        #set ($myExtendedEntityPackageName = "${glPackageExtendedEntity}")

        #set ($myBaseConditionBeanClassName = "${table.baseConditionBeanClassName}")
        #set ($myConditionBeanClassName = "${table.extendedConditionBeanClassName}")
        #set ($myAbstractBaseConditionQueryClassName = "${table.abstractBaseConditionQueryClassName}")
        #set ($myBaseConditionQueryClassName = "${table.baseConditionQueryClassName}")
        #set ($myConditionQueryClassName = "${table.extendedConditionQueryClassName}")
        #set ($myConditionInlineQueryClassName = "${table.extendedConditionInlineQueryClassName}")
        #set ($myNestSelectSetupperClassName = "${table.nestSelectSetupperClassName}")
        #set ($myNestSelectSetupperTerminalClassName = "${table.nestSelectSetupperTerminalClassName}")

        #set ($myDBMetaClassName = "${table.DBMetaClassName}")
        #set ($myDBMetaPackageName = "${glPackageBaseDBMeta}")

        ##
        ## The variable name
        ##
        #set ($myAttachedCBArgsString = "${glPackageCB}.${myConditionBeanClassName} ${glAttachedCBArgsVariableName}")

        #set ($myEntityVariableName = "${table.uncapitalisedJavaName}")
        #set ($myEntityListVariableName = "${table.uncapitalisedJavaName}List")
        #set ($myCBVariableName = "${table.uncapitalisedJavaName}")
        #set ($myBehaviorVariableName = "${table.uncapitalisedJavaName}Bhv")

        ##
        ## Determination
        ##
        #set ($isExistBehavior = false)
        #set ($isExistBehavior = true)
        #set ($isExistDao = true)
        #set ($isExistConditionBean = true)

        #if ($database.isTargetLanguageCSharp())
          #set ($myBaseBhvInterfaceName = "${table.baseBehaviorClassName}")
          #set ($myExtendedBhvInterfaceName = "${table.extendedBehaviorClassName}")
          #set ($myBaseBhvClassName = "${table.baseBehaviorClassName}Impl")
          #set ($myExtendedBhvClassName = "${table.extendedBehaviorClassName}Impl")

          #set ( $path = "${database.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvInterfaceName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)
        #else
          #set ( $path = "${database.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseDao})}${myBaseDaoClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsdao/BaseDao.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseEntity})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/BaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseDBMeta})}${myDBMetaClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/dbmeta/DBMetaImpl.${glTemplateFileExtension}",$path,"", "")

        #if (!$database.isStopGenerateExtendedBhv())
          #if ($database.isTargetLanguageCSharp())
            #set ($myBaseBhvInterfaceName = "${table.baseBehaviorClassName}")
            #set ($myExtendedBhvInterfaceName = "${glProjectPrefix}${table.JavaName}Bhv")
            #set ($myBaseBhvClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}BhvImpl")
            #set ($myExtendedBhvClassName = "${glProjectPrefix}${table.JavaName}BhvImpl")

            #set ( $path = "${database.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvInterfaceName}.${glClassFileExtension}" )
            #if (!$files.file(${generator.OutputPath},$path).exists())
              $generator.parse("om/${glResourceDirectory}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
            #end
          #else
            #set ( $path = "${database.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvClassName}.${glClassFileExtension}" )
            #if (!$files.file(${generator.OutputPath},$path).exists())
              $generator.parse("om/${glResourceDirectory}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
            #end
          #end
        #end

        #if (!$database.isStopGenerateExtendedDao())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedDao})}${myExtendedDaoClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exdao/ExtendedDao.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedEntity})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exentity/ExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCB})}${myBaseConditionBeanClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionBean.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myAbstractBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/AbstractBsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCIQ})}${myConditionInlineQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionInlineQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageNss})}${myNestSelectSetupperClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/NestSelectSetupper.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCB})}${myConditionBeanClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionBean.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageCQ})}${myConditionQueryClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
    #end
    $database.info("* * * * * * * * * */")
    $database.info(" ")

    ## ===================================================================================
    ##                                                                          Simple Dto
    ##                                                                          ==========
    #if ($database.hasSimpleDtoDefinition() && $database.isTargetLanguageJava())
      $database.info("parseSimpleDto() {// mapper=$database.isSimpleDtoUseDtoMapper()")
      #set ($myDomainEntityPackageName = "${glPackageExtendedEntity}")
      #set ($myBaseEntityPackageName = "${database.simpleDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.simpleDtoExtendedDtoPackage}")
      #set ($myDtoMapperPackageName = "${database.simpleDtoDtoMapperPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #if ($database.isSimpleDtoUseDtoMapper())
        #set ($path = $database.getPackageAsPath(${myDtoMapperPackageName}))
        $database.makeDirectory($path)
      #end

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.simpleDtoBaseDtoPrefix}${table.javaName}${database.simpleDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.simpleDtoExtendedDtoPrefix}${table.javaName}${database.simpleDtoExtendedDtoSuffix}")
        #set ($myDtoMapperClassName = "${myExtendedObjectClassName}Mapper")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if ($database.isSimpleDtoUseDtoMapper())
          #set ( $path = "${database.getPackageAsPath(${myDtoMapperPackageName})}${myDtoMapperClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/other/simpledto/mapper/SimpleDtoMapper.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
      $database.info("}")
    #end

    ## ===================================================================================
    ##                                                                            Flex Dto
    ##                                                                            ========
    #if ($database.hasFlexDtoDefinition() && $database.isTargetLanguageJava())
      $database.enableFlexDtoOutputDirectory()
      $database.info("parseFlexDto() {")
      #set ($myBaseEntityPackageName = "${database.flexDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.flexDtoExtendedDtoPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.flexDtoBaseDtoPrefix}${table.javaName}${database.flexDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.flexDtoExtendedDtoPrefix}${table.javaName}${database.flexDtoExtendedDtoSuffix}")
        #set ($myRemoteSimpleDtoClassName = "${database.simpleDtoExtendedDtoPackage}.${myExtendedObjectClassName}")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.as" )
        $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.as" )
          #if ($database.isFlexDtoOverrideExtended() || !$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end
      #end
      $database.info("}")
	  $database.enableGenerateOutputDirectory()
    #end

  #end
#end

