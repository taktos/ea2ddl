#set ($myClassName = "${myBaseObjectClassName}")

using System;
using System.Text;

namespace ${myBaseEntityPackageName} {

    /**
     * The entity of ${table.Name}.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${myClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
#foreach ($col in $table.columns)
        protected ${col.JavaNative} _${col.UncapitalisedJavaName};
#end

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
#if ($table.hasPrimaryKey())
        /// <summary>
        /// ${database.OverrideComment}
        /// If the primary-key of the other is same as this one, returns true.
        /// </summary>
        /// <param name="other">Other entity.</param>
        /// <returns>Comparing result.</returns>
        public override bool Equals(Object other) {
            if (other == null) {
                return false;
            }
            if (!(other is $myClassName)) {
                return false;
            }
            $myClassName otherEntity = ($myClassName)other;
  #foreach ($col in $table.PrimaryKey)

            if (this.${col.JavaName} == null || !this.${col.JavaName}.Equals(otherEntity.${col.JavaName})) {
                return false;
            }
  #end

            return true;
        }

        /// <summary>
        /// ${database.OverrideComment}
        /// Calculates hash-code from primary-key.
        /// </summary>
        /// <returns>Hash-code from primary-keys.</returns>
        public override int GetHashCode() {
            int result = 0;
  #foreach ($col in $table.PrimaryKey)
    #if (!${col.isJavaNativeNumberObject()})

            if (_${col.UncapitalisedJavaName} != null) {
                result = result + _${col.UncapitalisedJavaName}.GetHashCode();
            }
    #else

            result = result + _${col.UncapitalisedJavaName}.GetHashCode();
    #end
  #end

            return result;
        }
#else

        /// <summary>
        /// ${database.OverrideComment}
        /// If the all-column value of the other is same as this one, returns true.
        /// </summary>
        /// <param name="other">Other entity.</param>
        /// <returns>Comparing result.</returns>
        public override bool Equals(Object other) {
            if (other == null) {
                return false;
            }
            if (!(other is $myClassName)) {
                return false;
            }
            $myClassName otherEntity = ($myClassName)other;
  #foreach ($col in $table.Columns)

            if (this.${col.JavaName} == null || !this.${col.JavaName}.Equals(otherEntity.${col.JavaName})) {
                return false;
            }
  #end

            return true;
        }

        /// <summary>
        /// ${database.OverrideComment}
        /// Calculates hash-code from all-columns.
        /// </summary>
        /// <returns>Hash-code from all-columns.</returns>
        public override int GetHashCode() {
            int result = 0;
  #foreach ($col in $table.Columns)
    #if (!${col.isJavaNativeNumberObject()})

            if (_${col.UncapitalisedJavaName} != null) {
                result = result + _${col.UncapitalisedJavaName}.GetHashCode();
            }
    #else

            result = result + _${col.UncapitalisedJavaName}.GetHashCode();
    #end
  #end
     
            return result;
        }
#end

        /// <summary>
        /// ${database.OverrideComment}
        /// </summary>
        /// <returns>Column-map. (NotNull)</returns>
        public override String ToString() {
            String delimiter = ",";
            StringBuilder sb = new StringBuilder();
#foreach ($col in $table.Columns)

            sb.Append(delimiter).Append(this.${col.JavaName});
#end

            sb.Remove(0, delimiter.Length);
            sb.Insert(0, "{").Append("}");
            return sb.ToString();
        }


        // =====================================================================================
        //                                                                              Accessor
        //                                                                              ========
#foreach ($col in $table.columns)
        public ${col.JavaNative} ${col.JavaName} {
            get { return _${col.UncapitalisedJavaName}; }
            set { _${col.UncapitalisedJavaName} = value; }
        }
#end
    }
}
