#set ($myClassName = "${glPageGroupBeanName}")

using System;

using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonCBeanPagenavi};

namespace ${glPackageBaseCommonCBeanPagenaviGroup} {

[System.Serializable]
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected int _currentPageNumner;
    public int CurrentPageNumber { get { return _currentPageNumner; } set { _currentPageNumner = value; } }
    protected int _allPageCount;
    public int AllPageCount { get { return _allPageCount; } set { _allPageCount = value; } }
    protected ${glPageGroupOptionName} _pageGroupOption;
    public ${glPageGroupOptionName} PageGroupOption { get { return _pageGroupOption; } set { _pageGroupOption = value; } }

    // ===================================================================================
    //                                                                                Main
    //                                                                                ====
    public System.Collections.Generic.IList<LINK> BuildPageNumberLinkList<LINK>(${glPageNumberLinkSetupperName}<LINK> pageNumberLinkSetupper) where LINK : ${glPageNumberLinkName} {
        System.Collections.Generic.IList<int> pageNumberList = CreatePageNumberList();
        System.Collections.Generic.IList<LINK> pageNumberLinkList = new System.Collections.Generic.List<LINK>();
        foreach (int pageNumber in pageNumberList) {
            pageNumberLinkList.Add(pageNumberLinkSetupper.Invoke(pageNumber, pageNumber == CurrentPageNumber));
        }
        return pageNumberLinkList;
    }

    public int CalculateStartPageNumber() {
        AssertPageGroupValid();
        int pageGroupSize = PageGroupOption.PageGroupSize;
        int currentPageNumber = CurrentPageNumber;

        int currentPageGroupNumber = (currentPageNumber / pageGroupSize);
        if ((currentPageNumber % pageGroupSize) == 0)
        {
            currentPageGroupNumber--;
        }
        int currentPageGroupStartPageNumber = (pageGroupSize * currentPageGroupNumber) + 1;
        if (!(currentPageNumber >= currentPageGroupStartPageNumber)) {
            String msg = "currentPageNumber should be greater equal currentPageGroupStartPageNumber. But:";
            msg = msg + " currentPageNumber=" + currentPageNumber;
            msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
            throw new IllegalStateException(msg);
        }
        return currentPageGroupStartPageNumber;
    }

    public System.Collections.Generic.IList<int> CreatePageNumberList() {
        AssertPageGroupValid();
        int pageGroupSize = PageGroupOption.PageGroupSize;
        int allPageCount = AllPageCount;
        int currentPageGroupStartPageNumber = CalculateStartPageNumber();
        if (!(currentPageGroupStartPageNumber > 0)) {
            String msg = "currentPageGroupStartPageNumber should be greater than 0. {> 0} But:";
            msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
            throw new IllegalStateException(msg);
        }
        int nextPageGroupStartPageNumber = currentPageGroupStartPageNumber + pageGroupSize;

        System.Collections.Generic.IList<int> resultList = new System.Collections.Generic.List<int>();
        for (int i=currentPageGroupStartPageNumber; i < nextPageGroupStartPageNumber && i <= allPageCount; i++) {
            resultList.Add(i);
        }
        return resultList;
    }

    public int[] CreatePageNumberArray() {
        AssertPageGroupValid();
        return ConvertListToIntArray(CreatePageNumberList());
    }

    public bool IsExistPrePageGroup() {
        AssertPageGroupValid();
        return (CurrentPageNumber > PageGroupOption.PageGroupSize);
    }

    public bool IsExistNextPageGroup() {
        AssertPageGroupValid();
        int currentPageGroupStartPageNumber = CalculateStartPageNumber();
        if (!(currentPageGroupStartPageNumber > 0)) {
            String msg = "currentPageGroupStartPageNumber should be greater than 0. {> 0} But:";
            msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
            throw new IllegalStateException(msg);
        }
        int nextPageGroupStartPageNumber = currentPageGroupStartPageNumber + PageGroupOption.PageGroupSize;
        return (nextPageGroupStartPageNumber <= AllPageCount);
    }

    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    protected int[] ConvertListToIntArray(System.Collections.Generic.IList<int> ls) {
        int[] resultArray = new int[ls.Count];
        int arrayIndex = 0;
        foreach (int pageNumber in ls) {
            resultArray[arrayIndex] = pageNumber;
            arrayIndex++;
        }
        return resultArray;
    }

    protected void AssertPageGroupValid() {
        if (PageGroupOption == null) {
            String msg = "The pageGroupOption should not be null. Please invoke setPageGroupOption().";
            throw new IllegalStateException(msg);
        }
        if (PageGroupOption.PageGroupSize == 0) {
            String msg = "The pageGroupSize should be greater than 1. But the value is zero.";
            msg = msg + " pageGroupSize=" + PageGroupOption.PageGroupSize;
            throw new IllegalStateException(msg);
        }
        if (PageGroupOption.PageGroupSize == 1) {
            String msg = "The pageGroupSize should be greater than 1. But the value is one.";
            msg = msg + " pageGroupSize=" + PageGroupOption.PageGroupSize;
            throw new IllegalStateException(msg);
        }
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    public override String ToString() {
        StringBuilder sb = new StringBuilder();

        sb.append(" currentPageNumber=").append(CurrentPageNumber);
        sb.append(" allPageCount=").append(AllPageCount);
        sb.append(" pageGroupOption=").append(PageGroupOption);

        return sb.toString();
    }
}

}