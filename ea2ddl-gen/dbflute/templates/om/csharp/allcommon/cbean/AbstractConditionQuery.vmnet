#set ($myClassName = "${glConditionQueryAbstractName}")

using System;
using System.Reflection;

using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCOption};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonException};
using ${glPackageBaseCommonSqlClause};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonCBean} {

// JavaLike
[System.Serializable]
public abstract class ${myClassName} : ${glConditionQueryInterfaceName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    protected static readonly ${glConditionKeyName} CK_EQ = ${glConditionKeyName}.CK_EQUAL;
    protected static readonly ${glConditionKeyName} CK_NE = ${glConditionKeyName}.CK_NOT_EQUAL;
    protected static readonly ${glConditionKeyName} CK_GE = ${glConditionKeyName}.CK_GREATER_EQUAL;
    protected static readonly ${glConditionKeyName} CK_GT = ${glConditionKeyName}.CK_GREATER_THAN;
    protected static readonly ${glConditionKeyName} CK_LE = ${glConditionKeyName}.CK_LESS_EQUAL;
    protected static readonly ${glConditionKeyName} CK_LT = ${glConditionKeyName}.CK_LESS_THAN;
    protected static readonly ${glConditionKeyName} CK_PS = ${glConditionKeyName}.CK_PREFIX_SEARCH;
    protected static readonly ${glConditionKeyName} CK_LS = ${glConditionKeyName}.CK_LIKE_SEARCH;
    protected static readonly ${glConditionKeyName} CK_INS = ${glConditionKeyName}.CK_IN_SCOPE;
    protected static readonly ${glConditionKeyName} CK_NINS = ${glConditionKeyName}.CK_NOT_IN_SCOPE;
    protected static readonly ${glConditionKeyName} CK_ISN = ${glConditionKeyName}.CK_IS_NULL;
    protected static readonly ${glConditionKeyName} CK_ISNN = ${glConditionKeyName}.CK_IS_NOT_NULL;

    protected static readonly ${glConditionValueName} DUMMY_CONDITION_VALUE = new ${glConditionValueName}();
    protected static readonly Object DUMMY_OBJECT = new Object();
	protected static readonly String CQ_PROPERTY = "ConditionQuery";
	
    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected readonly ${glSqlClauseName} _sqlClause;
    protected readonly String _aliasName;
    protected readonly int _nestLevel;
	protected int _subQueryLevel;

    // -----------------------------------------------------
    //                                          Foreign Info
    //                                          ------------
    protected String _foreignPropertyName;
    protected String _relationPath;
    protected readonly ${glConditionQueryInterfaceName} _childQuery;

    // -----------------------------------------------------
    //                                                Inline
    //                                                ------
	protected bool _onClauseInline;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel) {
        _childQuery = childQuery;
        _sqlClause = sqlClause;
        _aliasName = aliasName;
        _nestLevel = nestLevel;
    }

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public abstract String getTableDbName();
    public abstract String getTableSqlName();

    // ===================================================================================
    //                                                                  Important Accessor
    //                                                                  ==================
    public ${glConditionQueryInterfaceName} getChildQuery() {
        return _childQuery;
    }

    public ${glSqlClauseName} getSqlClause() {
        return _sqlClause;
    }

    public String getAliasName() {
        return _aliasName;
    }

    public int getNestLevel() {
        return _nestLevel;
    }

    public int getNextNestLevel() {
        return _nestLevel+1;
    }

    public bool isBaseQuery(${glConditionQueryInterfaceName} query) {
        return (query.getChildQuery() == null);
    }

	public int getSubQueryLevel() {
	    return _subQueryLevel;
	}

    // -----------------------------------------------------
    //                                             Real Name
    //                                             ---------
    public String getRealAliasName() {
	    return getAliasName();
    }

    public String getRealColumnName(String columnName) {
        assertColumnName(columnName);
        return buildRealColumnName(getRealAliasName(), columnName);
    }

	protected String buildRealColumnName(String aliasName, String columnName) {
        return aliasName + "." + columnName;
    }

    // -----------------------------------------------------
    //                                          Foreign Info
    //                                          ------------
    public String getForeignPropertyName() {
        return _foreignPropertyName;
    }

    public void xsetForeignPropertyName(String foreignPropertyName) {
        this._foreignPropertyName = foreignPropertyName;
    }

    public String getRelationPath() {
        return _relationPath;
    }

    public void xsetRelationPath(String relationPath) {
        this._relationPath = relationPath;
    }

    // -----------------------------------------------------
    //                                                Inline
    //                                                ------
	public void xsetOnClauseInline(bool onClauseInline) {
	    _onClauseInline = onClauseInline;
	}

    // ===================================================================================
    //                                                                            Location
    //                                                                            ========
    protected String getLocation(String columnPropertyName, ${glConditionKeyName} key) {
        return getLocationBase(columnPropertyName) + "." + key.getConditionKey();
    }

    protected String getLocationBase() {
        StringBuilder sb = new StringBuilder();
        ${glConditionQueryInterfaceName} query = this;
        while (true) {
            if (query.isBaseQuery(query)) {
                sb.insert(0, CQ_PROPERTY + ".");
                break;
            } else {
                String foreignPropertyName = query.getForeignPropertyName();
                if (foreignPropertyName == null) {
                    String msg = "The foreignPropertyName of the query should not be null:";
                    msg = msg + " query=" + query;
                    throw new IllegalStateException(msg);
                }
                sb.insert(0, CQ_PROPERTY + initCap(foreignPropertyName) + ".");
            }
            query = query.getChildQuery();
        }
        return sb.toString();
    }

    protected String getLocationBase(String columnPropertyName) {
        return getLocationBase() + columnPropertyName;
    }
	
    // ===================================================================================
    //                                                                         Union Query
    //                                                                         ===========
    protected Map<String, ${glConditionQueryInterfaceName}> _unionQueryMap;

    public Map<String, ${glConditionQueryInterfaceName}> getUnionQueryMap() {// for Internal
		if (_unionQueryMap == null) {
		    _unionQueryMap = new LinkedHashMap<String, ${glConditionQueryInterfaceName}>();
		}
        return _unionQueryMap;
    }

	public Map<String, ${glConditionQueryInterfaceName}> UnionQueryMap {// for SQL-Comment
        get { return getUnionQueryMap(); }
    }

    public void xsetUnionQuery(${glConditionQueryInterfaceName} unionQuery) {
        xsetupUnion(unionQuery, false, getUnionQueryMap());
    }

    protected Map<String, ${glConditionQueryInterfaceName}> _unionAllQueryMap;

    public Map<String, ${glConditionQueryInterfaceName}> getUnionAllQueryMap() {// for Internal
		if (_unionAllQueryMap == null) {
		    _unionAllQueryMap = new LinkedHashMap<String, ${glConditionQueryInterfaceName}>();
		}
        return _unionAllQueryMap;
    }

	public Map<String, ${glConditionQueryInterfaceName}> UnionAllQueryMap {// for SQL-Comment
        get { return getUnionAllQueryMap(); }
    }

    public void xsetUnionAllQuery(${glConditionQueryInterfaceName} unionAllQuery) {
        xsetupUnion(unionAllQuery, true, getUnionAllQueryMap());
    }

    protected void xsetupUnion(${glConditionQueryInterfaceName} unionQuery, bool unionAll, Map<String, ${glConditionQueryInterfaceName}> unionQueryMap) {
        if (unionQuery == null) {
            String msg = "The argument[unionQuery] should not be null.";
            throw new IllegalArgumentException(msg);
        }
        reflectRelationOnUnionQuery(this, unionQuery);// Reflect Relation!
        getSqlClause().copyIncludedSelectColumn(unionQuery.getSqlClause());// Reflect IncludedSelectColumn!
        if (getSqlClause().isFormatClauseEffective()) {
            unionQuery.getSqlClause().makeFormatClauseEffective();// Reflect FormatClause!
        }
        String key = (unionAll ? "unionAllQuery" : "unionQuery") + unionQueryMap.size();
        unionQueryMap.put(key, unionQuery);
        registerUnionQuery(unionQuery, unionAll, (unionAll ? "UnionAllQueryMap" : "UnionQueryMap") + "." + key);// If CSharp, The property of 'Union' should be 'InitCap'.
    }
	
    abstract public void reflectRelationOnUnionQuery(${glConditionQueryInterfaceName} baseQueryAsSuper, ${glConditionQueryInterfaceName} unionQueryAsSuper);

    public bool hasUnionQueryOrUnionAllQuery() {
        return (_unionQueryMap != null && !_unionQueryMap.isEmpty()) || (_unionAllQueryMap != null && !_unionAllQueryMap.isEmpty());
    }

    public List<${glConditionQueryInterfaceName}> getUnionQueryList() {
		if (_unionQueryMap == null) { return new ArrayList<${glConditionQueryInterfaceName}>(); }
        return new ArrayList<${glConditionQueryInterfaceName}>(_unionQueryMap.values());
    }

    public List<${glConditionQueryInterfaceName}> getUnionAllQueryList() {
		if (_unionAllQueryMap == null) { return new ArrayList<${glConditionQueryInterfaceName}>(); }
        return new ArrayList<${glConditionQueryInterfaceName}>(_unionAllQueryMap.values());
    }

    // ===================================================================================
    //                                                                            Register
    //                                                                            ========
    // -----------------------------------------------------
    //                                       Include-As-Mine
    //                                       ---------------
    protected virtual void registerIncludedSelectColumn(String aliasName, String realColumnName) {
        assertAliasName(aliasName);
        assertColumnName(realColumnName);
        getSqlClause().registerIncludedSelectColumn(aliasName, realColumnName);
    }
	
    // -----------------------------------------------------
    //                                          Normal Query
    //                                          ------------
    protected virtual void registerQuery(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                         , String colName, String capPropName, String uncapPropName) {
        if (key.isValidRegistration(cvalue, value, key.getConditionKey() + " of " + getRealAliasName() + "." + colName)) {
            setupConditionValueAndRegisterWhereClause(key, value, cvalue, colName, capPropName, uncapPropName);
        }
    }
	
	protected virtual void registerQuery(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                         , String colName, String capPropName, String uncapPropName, ${glConditionOptionInterfaceName} option) {
        if (key.isValidRegistration(cvalue, value, key.getConditionKey() + " of " + getRealAliasName() + "." + colName)) {
            setupConditionValueAndRegisterWhereClause(key, value, cvalue, colName, capPropName, uncapPropName, option);
        }
    }

    // -----------------------------------------------------
    //                                          FromTo Query
    //                                          ------------
    protected void registerFromToQuery(DateTime? fromDate, DateTime? toDate, ${glConditionValueName} cvalue
                                 , String colName, String capPropName, String uncapPropName, ${glConditionOptionFromToName} option) {
        {
            DateTime? filteredFromDate = option.filterFromDate(fromDate);
            ${glConditionKeyName} fromKey = option.getFromDateConditionKey();
            if (fromKey.isValidRegistration(cvalue, filteredFromDate, fromKey.getConditionKey() + " of " + getRealAliasName() + "." + uncapPropName)) {
                setupConditionValueAndRegisterWhereClause(fromKey, filteredFromDate, cvalue, colName, capPropName, uncapPropName);
            }
        }
        {
            DateTime? filteredToDate = option.filterToDate(toDate);
            ${glConditionKeyName} toKey = option.getToDateConditionKey();
            if (toKey.isValidRegistration(cvalue, filteredToDate, toKey.getConditionKey() + " of " + getRealAliasName() + "." + uncapPropName)) {
                setupConditionValueAndRegisterWhereClause(toKey, filteredToDate, cvalue, colName, capPropName, uncapPropName);
            }
        }
    }
	
    // -----------------------------------------------------
    //                                      LikeSearch Query
    //                                      ----------------
    protected void registerLikeSearchQuery(${glConditionKeyName} key
                                         , String value
                                         , ${glConditionValueName} cvalue
                                         , String colName
                                         , String capPropName
                                         , String uncapPropName
                                         , ${glConditionOptionLikeSearchName} option) {
        String validationMsg = key.getConditionKey() + " of " + getRealAliasName() + "." + colName;
        if (!key.isValidRegistration(cvalue, value, validationMsg)) {
            return;
        }
        if (option == null) {
            throwLikeSearchOptionNotFoundException(capPropName, value);
            return;// Unreachable!
        }
        if (value == null || !option.isSplit()) {
            // As Normal Condition.
            setupConditionValueAndRegisterWhereClause(key, value, cvalue, colName, capPropName, uncapPropName, option);
            return;
        }
        // - - - - - - - - -
        // Use splitByXxx().
        // - - - - - - - - -
        throw new UnsupportedOperationException("The method 'splitByXxx()' have been unsupported yet!");
    }

    protected void throwLikeSearchOptionNotFoundException(String capPropName, String value) {
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The likeSearchOption was Not Found! (Should not be null!)" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + "Please confirm your method call:"  + getLineSeparator();
        String beanName = GetType().Name;
        String methodName = "set" + capPropName + "_LikeSearch('" + value + "', likeSearchOption);";
        msg = msg + "    " + beanName + "." + methodName + getLineSeparator();
        msg = msg + "* * * * * * * * * */" + getLineSeparator();
        throw new ${glRequiredOptionNotFoundException}(msg);
    }
        
    // -----------------------------------------------------
    //                                         InScope Query
    //                                         -------------

    // -----------------------------------------------------
    //                                          Inline Query
    //                                          ------------
    protected virtual void registerInlineQuery(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                       , String colName, String capPropName, String uncapPropName) {
        if (key.isValidRegistration(cvalue, value, key.getConditionKey() + " of " + getRealAliasName() + "." + colName)) {
            key.setupConditionValue(cvalue, value, getLocation(capPropName, key));// If CSharp, it is necessary to use capPropName!
            if (isBaseQuery(this)) {
                getSqlClause().registerBaseTableInlineWhereClause(colName, key, cvalue);
            } else {
                getSqlClause().registerOuterJoinInlineWhereClause(getRealAliasName(), colName, key, cvalue, _onClauseInline);
            }
        }
    }

    protected virtual void registerInlineQuery(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                       , String colName, String capPropName, String uncapPropName, ${glConditionOptionInterfaceName} option) {
        if (key.isValidRegistration(cvalue, value, key.getConditionKey() + " of " + getRealAliasName() + "." + colName)) {
            key.setupConditionValue(cvalue, value, getLocation(capPropName, key), option);// If CSharp, it is necessary to use capPropName!
            if (isBaseQuery(this)) {
                getSqlClause().registerBaseTableInlineWhereClause(colName, key, cvalue, option);
            } else {
				getSqlClause().registerOuterJoinInlineWhereClause(getRealAliasName(), colName, key, cvalue, option, _onClauseInline);
            }
        }
    }

    // -----------------------------------------------------
    //                                       InScopeSubQuery
    //                                       ---------------
    protected virtual void registerInScopeSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName) {
        registerInScopeSubQuery(subQuery, columnName, relatedColumnName, propertyName, null);
    }

    protected virtual void registerNotInScopeSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName) {
        registerInScopeSubQuery(subQuery, columnName, relatedColumnName, propertyName, "not");
    }

    protected virtual void registerInScopeSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName
                                 , String inScopeOption) {
        assertObjectNotNull("InScopeSubQyery(" + columnName + ")", subQuery);
        inScopeOption = inScopeOption != null ? inScopeOption + " " : "";
        String realColumnName = getInScopeSubQueryRealColumnName(columnName);
        String subQueryClause = getInScopeSubQuerySql(subQuery, relatedColumnName, propertyName);
        String clause = null;
        if (getSqlClause().isFormatClauseEffective()) {
            String ln = getLineSeparator();
            int subQueryLevel = subQuery.getSubQueryLevel();
            String subQueryIdentity = propertyName + "[" + subQueryLevel + "]";
            String beginMark = getSqlClause().resolveSubQueryBeginMark(subQueryIdentity) + ln;
            String endMark = getSqlClause().resolveSubQueryEndMark(subQueryIdentity);
            String endIndent = "       ";
            clause = realColumnName + " " + inScopeOption + "in (" + beginMark + subQueryClause + ln + endIndent + ")" + endMark;
        } else {
            clause = realColumnName + " " + inScopeOption + "in (" + subQueryClause + ")";
        }
        registerWhereClause(clause);
    }

    protected virtual String getInScopeSubQueryRealColumnName(String columnName) {
        return getRealColumnName(columnName);
    }

    protected virtual String getInScopeSubQuerySql(${glConditionQueryInterfaceName} subQuery
                                 , String relatedColumnName, String propertyName) {
        String selectClause = "select " + getSqlClause().getLocalTableAliasName() + "." + relatedColumnName;
        String fromWhereClause = subQuery.getSqlClause().getClauseFromWhereWithUnionTemplate();
        fromWhereClause = replaceString(fromWhereClause, "." + CQ_PROPERTY + ".", "." + getLocationBase(propertyName) + ".");// Very Important!
		
		// Replace template marks. These are very important!
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionSelectClauseMark(), selectClause);
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereClauseMark(), "");
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereFirstConditionMark(), "");
		
        return selectClause + " " + fromWhereClause;
    }

    // -----------------------------------------------------
    //                                        ExistsSubQuery
    //                                        --------------
    protected virtual void registerExistsSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName) {
        registerExistsSubQuery(subQuery, columnName, relatedColumnName, propertyName, null);
    }

    protected virtual void registerNotExistsSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName) {
        registerExistsSubQuery(subQuery, columnName, relatedColumnName, propertyName, "not");
    }

    protected virtual void registerExistsSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName
                                 , String existsOption) {
        assertObjectNotNull("ExistsSubQyery(" + columnName + ")", subQuery);
        existsOption = existsOption != null ? existsOption + " " : "";
        String realColumnName = getExistsSubQueryRealColumnName(columnName);
        String subQueryClause = getExistsSubQuerySql(subQuery, realColumnName, relatedColumnName, propertyName);
        String clause = null;
        if (getSqlClause().isFormatClauseEffective()) {
            String ln = getLineSeparator();
            int subQueryLevel = subQuery.getSubQueryLevel();
            String subQueryIdentity = propertyName + "[" + subQueryLevel + "]";
            String beginMark = getSqlClause().resolveSubQueryBeginMark(subQueryIdentity) + ln;
            String endMark = getSqlClause().resolveSubQueryEndMark(subQueryIdentity);
            String endIndent = "       ";
            clause = existsOption + "exists (" + beginMark + subQueryClause + ln + endIndent + ")" + endMark;
        } else {
            clause = existsOption + "exists (" + subQueryClause + ")";
        }
        registerWhereClause(clause);
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // *Unsupport ExistsSubQuery as inline because it's so dangerous.
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    protected virtual String getExistsSubQueryRealColumnName(String columnName) {
        return getRealColumnName(columnName);
    }

    protected virtual String getExistsSubQuerySql(${glConditionQueryInterfaceName} subQuery
                                 , String realColumnName, String relatedColumnName, String propertyName) {
		int subQueryLevel = subQuery.getSubQueryLevel();
		if (_subQueryLevel <= subQueryLevel) {
			_subQueryLevel = subQueryLevel + 1;
		}
		String tableAliasName = "dfsublocal_" + subQueryLevel;
        String selectClause = "select " + tableAliasName + "." + relatedColumnName;
        String fromWhereClause = subQuery.getSqlClause().getClauseFromWhereWithWhereUnionTemplate();
		fromWhereClause = replaceString(fromWhereClause, "dflocal", tableAliasName);// Very Important!
        fromWhereClause = replaceString(fromWhereClause, "." + CQ_PROPERTY + ".", "." + getLocationBase(propertyName) + ".");// Very Important!
		
        String joinCondition = tableAliasName + "." + relatedColumnName + " = " + realColumnName;
        String firstConditionAfter = " and ";
        if (getSqlClause().isFormatClauseEffective()) {
            firstConditionAfter = getLineSeparator() + "   and ";
        }
		
		// Replace template marks. These are very important!
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getWhereClauseMark(), "where " + joinCondition);
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getWhereFirstConditionMark(), joinCondition + firstConditionAfter);
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionSelectClauseMark(), selectClause);
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereClauseMark(), "where " + joinCondition);
		fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereFirstConditionMark(), joinCondition + firstConditionAfter);
		
		return selectClause + " " + fromWhereClause;
    }

    // [DBFlute-0.7.9]
    // -----------------------------------------------------
    //                                        DeriveSubQuery
    //                                        --------------
    protected void registerDeriveSubQuery(String function, ${glConditionQueryInterfaceName} subQuery
                                        , String columnName, String relatedColumnName
                                        , String propertyName, String aliasName) {
        assertObjectNotNull("DeriveSubQuery(" + columnName + ")", subQuery);
        String realColumnName = getDeriveSubQueryRealColumnName(columnName);
        String subQueryClause = getDeriveSubQuerySql(function, subQuery, realColumnName, relatedColumnName, propertyName, aliasName);
        String clause;
        if (getSqlClause().isFormatClauseEffective()) {
            String ln = getLineSeparator();
            int subQueryLevel = subQuery.getSubQueryLevel();
            String subQueryIdentity = propertyName + "[" + subQueryLevel + "]";
            String beginMark = getSqlClause().resolveSubQueryBeginMark(subQueryIdentity) + ln;
            String endMark = getSqlClause().resolveSubQueryEndMark(subQueryIdentity);
            String endIndent = "       ";
            clause = "(" + beginMark + subQueryClause + ln + endIndent + ") as " + aliasName + endMark;
        } else {
            clause = "(" + subQueryClause + ") as " + aliasName;
        }
        getSqlClause().specifyDeriveSubQuery(aliasName, clause);
    }

    protected String getDeriveSubQueryRealColumnName(String columnName) {
        return getRealColumnName(columnName);
    }

    protected String getDeriveSubQuerySql(String function, ${glConditionQueryInterfaceName} subQuery
                                        , String realColumnName, String relatedColumnName
                                        , String propertyName, String aliasName) {
        int subQueryLevel = subQuery.getSubQueryLevel();
        if (_subQueryLevel <= subQueryLevel) {
            _subQueryLevel = subQueryLevel + 1;
        }
        String tableAliasName = "dfsublocal_" + subQueryLevel;
        String deriveColumnName = subQuery.getSqlClause().getSpecifiedColumnNameAsOne();
        if (deriveColumnName == null || deriveColumnName.Trim().Length == 0) {
            throwDeriveReferrerInvalidColumnSpecificationException(function, aliasName);
        }
        assertDeriveReferrerColumnType(function, subQuery, deriveColumnName);
        subQuery.getSqlClause().clearSpecifiedSelectColumn();
        String selectClause = "select " + function + "(" + tableAliasName + "." + deriveColumnName + ")";
        String fromWhereClause = subQuery.getSqlClause().getClauseFromWhereWithWhereUnionTemplate();
        fromWhereClause = replaceString(fromWhereClause, "dflocal", tableAliasName);// Very Important!
        fromWhereClause = replaceString(fromWhereClause, ".ConditionQuery.", "." + getLocationBase(propertyName) + ".");// Very Important! CSharp InitCap!
        
        String joinCondition = tableAliasName + "." + relatedColumnName + " = " + realColumnName;
        String firstConditionAfter = " and ";
        if (getSqlClause().isFormatClauseEffective()) {
            firstConditionAfter = getLineSeparator() + "   and ";
        }
        
        // Replace template marks. These are very important!
        fromWhereClause = replaceString(fromWhereClause, getSqlClause().getWhereClauseMark(), "where " + joinCondition);
        fromWhereClause = replaceString(fromWhereClause, getSqlClause().getWhereFirstConditionMark(), joinCondition + firstConditionAfter);
        fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionSelectClauseMark(), selectClause);
        fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereClauseMark(), "where " + joinCondition);
        fromWhereClause = replaceString(fromWhereClause, getSqlClause().getUnionWhereFirstConditionMark(), joinCondition + firstConditionAfter);
        
        return selectClause + " " + fromWhereClause;
    }

    protected void throwDeriveReferrerInvalidColumnSpecificationException(String function, String aliasName) {
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The specified the column for derive-referrer was Invalid!" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + " You should call specify().column[TargetColumn]() only once." + getLineSeparator();
        msg = msg + "  For example:" + getLineSeparator();
        msg = msg + "    " + getLineSeparator();
        msg = msg + "    [Wrong]" + getLineSeparator();
        msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
        msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
        msg = msg + "    cb.specify().derivePurchaseList()." + function + "(new SubQuery<PurchaseCB>() {" + getLineSeparator();
        msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
        msg = msg + "            // *No! It's empty!" + getLineSeparator();
        msg = msg + "        }" + getLineSeparator();
        msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
        msg = msg + "    " + getLineSeparator();
        msg = msg + "    [Wrong]" + getLineSeparator();
        msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
        msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
        msg = msg + "    cb.specify().derivePurchaseList()." + function + "(new SubQuery<PurchaseCB>() {" + getLineSeparator();
        msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
        msg = msg + "            subCB.specify().columnPurchaseDatetime();" + getLineSeparator();
        msg = msg + "            subCB.specify().columnPurchaseCount(); // *No! It's duplicated!" + getLineSeparator();
        msg = msg + "        }" + getLineSeparator();
        msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
        msg = msg + "    " + getLineSeparator();
        msg = msg + "    [Good!]" + getLineSeparator();
        msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
        msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
        msg = msg + "    cb.specify().derivePurchaseList()." + function + "(new SubQuery<PurchaseCB>() {" + getLineSeparator();
        msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
        msg = msg + "            subCB.specify().columnPurchaseDatetime(); // *Point!" + getLineSeparator();
        msg = msg + "        }" + getLineSeparator();
        msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Alias Name]" + getLineSeparator() + aliasName + getLineSeparator();
        msg = msg + "* * * * * * * * * */";
        throw new DeriveReferrerInvalidColumnSpecificationException(msg);
    }

    public class DeriveReferrerInvalidColumnSpecificationException : SystemException {
        public DeriveReferrerInvalidColumnSpecificationException(String msg) : base(msg) {
        }
    }
    
    protected void assertDeriveReferrerColumnType(String function, ${glConditionQueryInterfaceName} subQuery, String deriveColumnName) {
        ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(subQuery.getTableDbName());
        Type deriveColumnType = dbmeta.FindColumnInfo(deriveColumnName).PropertyType;
        if ("sum".Equals(function.ToLower()) || "avg".Equals(function.ToLower())) {
            if (!typeof(int).IsAssignableFrom(deriveColumnType) && !typeof(int?).IsAssignableFrom(deriveColumnType)) {
                throwDeriveReferrerUnmatchedColumnTypeException(function, deriveColumnName, deriveColumnType);
            }
        }
    }

    protected void throwDeriveReferrerUnmatchedColumnTypeException(String function, String deriveColumnName, Type deriveColumnType) {
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The type of the specified the column unmatched with the function!" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + "You should confirm the list as follow:" + getLineSeparator();
        msg = msg + "    max()   : String, Number, Date" + getLineSeparator();
        msg = msg + "    min()   : String, Number, Date" + getLineSeparator();
        msg = msg + "    sum()   : Number" + getLineSeparator();
        msg = msg + "    avg()   : Number" + getLineSeparator();
        msg = msg + "    count() : String, Number, Date" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Function]" + getLineSeparator() + function + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Derive Column]" + getLineSeparator() + deriveColumnName + "(" + deriveColumnType.Name + ")" + getLineSeparator();
        msg = msg + "* * * * * * * * * */";
        throw new DeriveReferrerUnmatchedColumnTypeException(msg);
    }

    public class DeriveReferrerUnmatchedColumnTypeException : SystemException {
        public DeriveReferrerUnmatchedColumnTypeException(String msg) : base(msg) {
        }
    }

    // -----------------------------------------------------
    //                                          Where Clause
    //                                          ------------
    protected virtual void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                             , String colName, String capPropName, String uncapPropName) {
        key.setupConditionValue(cvalue, value, getLocation(capPropName, key)); // If CSharp, it is necessary to use capPropName!
        getSqlClause().registerWhereClause(getRealColumnName(colName), key, cvalue);
    }

    protected virtual void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                             , String colName, String capPropName, String uncapPropName, ${glConditionOptionInterfaceName} option) {
        key.setupConditionValue(cvalue, value, getLocation(capPropName, key), option); // If CSharp, it is necessary to use capPropName!
        getSqlClause().registerWhereClause(getRealColumnName(colName), key, cvalue, option);
    }
	
    protected virtual void registerWhereClause(String whereClause) {
        getSqlClause().registerWhereClause(whereClause);
    }

    protected virtual void registerInlineWhereClause(String whereClause) {
        if (isBaseQuery(this)) {
            getSqlClause().registerBaseTableInlineWhereClause(whereClause);
        } else {
            getSqlClause().registerOuterJoinInlineWhereClause(getRealAliasName(), whereClause, _onClauseInline);
        }
    }

    // -----------------------------------------------------
    //                                           Union Query
    //                                           -----------
    public void registerUnionQuery(${glConditionQueryInterfaceName} unionQuery, bool unionAll, String unionQueryPropertyName) {
        String unionQueryClause = getUnionQuerySql(unionQuery, unionQueryPropertyName);
		
		// At the future, building SQL will be moved to sqlClause.
        getSqlClause().registerUnionQuery(unionQueryClause, unionAll);
    }

    protected String getUnionQuerySql(${glConditionQueryInterfaceName} unionQuery, String unionQueryPropertyName) {
	    String fromClause = unionQuery.getSqlClause().getFromClause();
		String whereClause = unionQuery.getSqlClause().getWhereClause();
		String unionQueryClause;
		if (whereClause.Trim().Length <= 0) {
		    unionQueryClause = fromClause + " " + getSqlClause().getUnionWhereClauseMark();
		} else {
		    int whereIndex = whereClause.IndexOf("where ");
		    if (whereIndex < 0) {
				String msg = "The whereClause should have 'where' string: " + whereClause;
			    throw new IllegalStateException(msg);
			}
			int clauseIndex = whereIndex + "where ".Length;
			String mark = getSqlClause().getUnionWhereFirstConditionMark();
			unionQueryClause = fromClause + " " + whereClause.Substring(0, clauseIndex) + mark + whereClause.Substring(clauseIndex);
		}
        String oldStr = "." + CQ_PROPERTY + ".";
        String newStr = "." + CQ_PROPERTY + "." + unionQueryPropertyName + ".";
        return replaceString(unionQueryClause, oldStr, newStr);// Very Important!
    }

    // -----------------------------------------------------
    //                                               OrderBy
    //                                               -------
	public void WithNullsFirst() {// is User Public!
	    getSqlClause().addNullsFirstToPreviousOrderBy();
	}
	
	public void WithNullsLast() {// is User Public!
	    getSqlClause().addNullsLastToPreviousOrderBy();
	}

    protected void registerSpecifiedDerivedOrderBy_Asc(String aliasName) {
        if (!getSqlClause().hasSpecifiedDeriveSubQuery(aliasName)) {
            throwSpecifiedDerivedOrderByAliasNameNotFoundException(aliasName);
        }
        getSqlClause().registerOrderBy(aliasName, null, true);
    }

    protected void registerSpecifiedDerivedOrderBy_Desc(String aliasName) {
        if (!getSqlClause().hasSpecifiedDeriveSubQuery(aliasName)) {
            throwSpecifiedDerivedOrderByAliasNameNotFoundException(aliasName);
        }
        getSqlClause().registerOrderBy(aliasName, null, false);
    }

    protected void throwSpecifiedDerivedOrderByAliasNameNotFoundException(String aliasName) {
        String msg = "Look! Read the message below." + getLineSeparator();
        msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
        msg = msg + "The aliasName was Not Found in specified alias names." + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Advice]" + getLineSeparator();
        msg = msg + "You should specified an alias name that is the same as one in specify-derived-referrer." + getLineSeparator();
        msg = msg + "  For example:" + getLineSeparator();
        msg = msg + "    " + getLineSeparator();
        msg = msg + "    [Wrong]" + getLineSeparator();
        msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
        msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
        msg = msg + "    cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {" + getLineSeparator();
        msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
        msg = msg + "            subCB.specify().specifyProduct().columnProductName(); // *No!" + getLineSeparator();
        msg = msg + "        }" + getLineSeparator();
        msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    cb.query().addSpecifiedDerivedOrderBy_Desc(\"WRONG_NAME_DATETIME\");" + getLineSeparator();
        msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
        msg = msg + "    " + getLineSeparator();
        msg = msg + "    [Good!]" + getLineSeparator();
        msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
        msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
        msg = msg + "    cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {" + getLineSeparator();
        msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
        msg = msg + "            subCB.specify().columnPurchaseDatetime();// *Point!" + getLineSeparator();
        msg = msg + "        }" + getLineSeparator();
        msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    cb.query().addSpecifiedDerivedOrderBy_Desc(\"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
        msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
        msg = msg + getLineSeparator();
        msg = msg + "[Not Found Alias Name]" + getLineSeparator() + aliasName + getLineSeparator();
        msg = msg + "* * * * * * * * * */";
        throw new SpecifiedDerivedOrderByAliasNameNotFoundException(msg);
    }

    public class SpecifiedDerivedOrderByAliasNameNotFoundException : SystemException {
        public SpecifiedDerivedOrderByAliasNameNotFoundException(String msg) : base(msg) {
        }
    }

    public void registerOrderBy(String columnName, bool ascOrDesc) {
        getSqlClause().registerOrderBy(getRealColumnName(columnName), null, ascOrDesc);
    }

    protected void regOBA(String columnName) {
        registerOrderBy(columnName, true);
    }

    protected void regOBD(String columnName) {
        registerOrderBy(columnName, false);
    }

    // ===================================================================================
    //                                                                       Name Resolver
    //                                                                       =============
    protected String resolveJoinAliasName(String relationPath, int nestLevel) {
        return getSqlClause().resolveJoinAliasName(relationPath, nestLevel);
    }

    protected String resolveNestLevelExpression(String name) {
        return getSqlClause().resolveNestLevelExpression(name, getNestLevel());
    }

	protected String resolveNextRelationPath(String tableName, String relationPropertyName) {
	    int relationNo = getSqlClause().resolveRelationNo(tableName, relationPropertyName);
        String nextRelationPath = "_" + relationNo;
        if (_relationPath != null) {
            nextRelationPath = _relationPath + nextRelationPath;
        }
		return nextRelationPath;
	}
	
    // ===================================================================================
    //                                                                     Fixed Condition
    //                                                                     ===============
    protected String prepareFixedCondition(String fixedCondition, String localAliasName, String foreignAliasName) {
        fixedCondition = replaceString(fixedCondition, "$$alias$$", foreignAliasName);
        fixedCondition = replaceString(fixedCondition, "$$foreignAlias$$", foreignAliasName);
        fixedCondition = replaceString(fixedCondition, "$$localAlias$$", localAliasName);
        return fixedCondition;
    }

    // ===================================================================================
    //                                                                 Reflection Invoking
    //                                                                 ===================
    public ${glConditionValueName} invokeValue(String columnFlexibleName) {
        assertStringNotNullAndNotTrimmedEmpty("columnFlexibleName", columnFlexibleName);
        ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(getTableDbName());
        String columnCapPropName = initCap(dbmeta.FindPropertyName(columnFlexibleName));
        String propertyName = columnCapPropName;
        PropertyInfo property = helpGettingCQProperty(this, propertyName);
        return (${glConditionValueName})helpInvokingCQProperty(this, property);
    }

    public void invokeQuery(String columnFlexibleName, String conditionKeyName, Object value) {
        assertStringNotNullAndNotTrimmedEmpty("columnFlexibleName", columnFlexibleName);
        assertStringNotNullAndNotTrimmedEmpty("conditionKeyName", conditionKeyName);
        if (value == null) {
            return;
        }
        PropertyNameCQContainer container = helpExtractingPropertyNameCQContainer(columnFlexibleName);
        String propertyName = container.getPropertyName();
        ${glConditionQueryInterfaceName} cq = container.getConditionQuery();
        ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(cq.getTableDbName());
        String columnCapPropName = initCap(dbmeta.FindPropertyName(propertyName));
        String methodName = "Set" + columnCapPropName + "_" + initCap(conditionKeyName);
        MethodInfo method = helpGettingCQMethod(cq, methodName, new Type[]{value.GetType()}, propertyName);
        helpInvokingCQMethod(cq, method, new Object[]{value});
    }

    public void invokeOrderBy(String columnFlexibleName, bool isAsc) {
        assertStringNotNullAndNotTrimmedEmpty("columnFlexibleName", columnFlexibleName);
        PropertyNameCQContainer container = helpExtractingPropertyNameCQContainer(columnFlexibleName);
        String propertyName = container.getPropertyName();
        ${glConditionQueryInterfaceName} cq = container.getConditionQuery();
        String ascDesc = isAsc ? "Asc" : "Desc";
        ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(cq.getTableDbName());
        String columnCapPropName = initCap(dbmeta.FindPropertyName(propertyName));
        String methodName = "AddOrderBy_" + columnCapPropName + "_" + ascDesc;
        MethodInfo method = helpGettingCQMethod(cq, methodName, new Type[]{}, propertyName);
        helpInvokingCQMethod(cq, method, new Object[]{});
    }

    public ${glConditionQueryInterfaceName} invokeForeignCQ(String foreignPropertyName) {
        assertStringNotNullAndNotTrimmedEmpty("foreignPropertyName", foreignPropertyName);
        String methodName = "Query" + initCap(foreignPropertyName);
        MethodInfo method = helpGettingCQMethod(this, methodName, new Type[]{}, foreignPropertyName);
        return (${glConditionQueryInterfaceName})helpInvokingCQMethod(this, method, new Object[]{});
    }

    private PropertyNameCQContainer helpExtractingPropertyNameCQContainer(String name) {
        String[] strings = name.Split('.');
        int length = strings.Length;
        String propertyName = null;
        ${glConditionQueryInterfaceName} cq = this;
        int index = 0;
        foreach (String element in strings) {
            if (length == (index+1)) {// at last loop!
                propertyName = element;
                break;
            }
            cq = cq.invokeForeignCQ(element);
            ++index;
        }
        return new PropertyNameCQContainer(propertyName, cq);
    }

    private class PropertyNameCQContainer {
        protected String _propertyName;
        protected ${glConditionQueryInterfaceName} _cq;
        public PropertyNameCQContainer(String propertyName, ${glConditionQueryInterfaceName} cq) {
            this._propertyName = propertyName;
            this._cq = cq;
        }
        public String getPropertyName() {
            return _propertyName;
        }
        public ${glConditionQueryInterfaceName} getConditionQuery() {
            return _cq;
        }
    }

    private PropertyInfo helpGettingCQProperty(${glConditionQueryInterfaceName} cq, String propertyName) {
        PropertyInfo property = cq.GetType().GetProperty(propertyName);
        if (property == null) {
            String msg = "The property is not existing:";
            msg = msg + " propertyName=" + propertyName;
            msg = msg + " tableName=" + cq.getTableDbName();
            throw new IllegalStateException(msg);
        }
        return property;
    }

    private Object helpInvokingCQProperty(${glConditionQueryInterfaceName} cq, PropertyInfo property) {
        return property.GetValue(cq, null);
    }

    private MethodInfo helpGettingCQMethod(${glConditionQueryInterfaceName} cq, String methodName, Type[] argTypes, String property) {
        MethodInfo method = cq.GetType().GetMethod(methodName, argTypes);
        if (method == null) {
            String msg = "The method is not existing:";
            msg = msg + " methodName=" + methodName;
            msg = msg + " argTypes=" + convertObjectArrayToStringView(argTypes);
            msg = msg + " tableName=" + cq.getTableDbName();
            msg = msg + " property=" + property;
            throw new IllegalStateException(msg);
        }
        return method;
    }

    private Object helpInvokingCQMethod(${glConditionQueryInterfaceName} cq, MethodInfo method, Object[] args) {
        return method.Invoke(cq, args);
    }

    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    protected String fRES(String value) {
        return filterRemoveEmptyString(value);
    }

    private String filterRemoveEmptyString(String value) {
        return ((value != null && !"".Equals(value)) ? value : null);
    }

    protected System.Collections.IList cTL<PROPERTY_TYPE>(System.Collections.Generic.ICollection<PROPERTY_TYPE> col) {
        return convertToList(col);
    }

    private System.Collections.IList convertToList<PROPERTY_TYPE>(System.Collections.Generic.ICollection<PROPERTY_TYPE> col) {
        if (col == null) {
            return null;
        }
		if (col is System.Collections.IList) {
		    return (System.Collections.IList)col;
		}
		System.Collections.IList resultList = new System.Collections.ArrayList();
		foreach (PROPERTY_TYPE value in col) {
		    resultList.Add(value);
		}
        return resultList;
    }

    private System.Collections.IList filterRemoveEmptyStringFromList(System.Collections.IList ls) {
        if (ls == null) {
            return null;
        }
        System.Collections.IList resultList = new System.Collections.ArrayList();
		foreach (Object value in ls) {
			String str = (String)value;
            if (str == null || "".Equals(str)) {
                continue;
            }
		    resultList.Add(str);
		}
        return resultList;
    }

    protected System.Collections.IList fRESL(System.Collections.IList ls) {
        return filterRemoveEmptyStringFromList(ls);
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected String getLineSeparator() {
        return ${glSimpleSystemUtil}.GetLineSeparator();
    }

    protected String replaceString(String text, String fromText, String toText) {
	    return ${glSimpleStringUtil}.Replace(text, fromText, toText);
    }

    protected String initCap(String str) {
	    return ${glSimpleStringUtil}.InitCap(str);
    }

    protected String convertObjectArrayToStringView(Object[] objArray) {
	    return ${glTraceViewUtilName}.ConvertObjectArrayToStringView(objArray);
    }

    // -----------------------------------------------------
    //                                         Assert Object
    //                                         -------------
    protected void assertObjectNotNull(String variableName, Object value) {
	    ${glSimpleAssertUtil}.AssertObjectNotNull(variableName, value);
    }

    protected void assertColumnName(String columnName) {
        if (columnName == null) {
            String msg = "The columnName should not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (columnName.Trim().Length == 0) {
            String msg = "The columnName should not be empty-string.";
            throw new IllegalArgumentException(msg);
        }
        if (columnName.IndexOf(",") >= 0) {
            String msg = "The columnName should not contain comma ',': " + columnName;
            throw new IllegalArgumentException(msg);
        }
    }

    protected void assertAliasName(String aliasName) {
        if (aliasName == null) {
            String msg = "The aliasName should not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (aliasName.Trim().Length == 0) {
            String msg = "The aliasName should not be empty-string.";
            throw new IllegalArgumentException(msg);
        }
        if (aliasName.IndexOf(",") >= 0) {
            String msg = "The aliasName should not contain comma ',': " + aliasName;
            throw new IllegalArgumentException(msg);
        }
    }

    // -----------------------------------------------------
    //                                         Assert String
    //                                         -------------
    protected void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
	    ${glSimpleAssertUtil}.AssertStringNotNullAndNotTrimmedEmpty(variableName, value);
    }
	
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    public override String ToString() {
        return GetType().Name + ":{aliasName=" + _aliasName + ", nestLevel=" + _nestLevel
		     + ", subQueryLevel=" + _subQueryLevel + ", foreignPropertyName=" + _foreignPropertyName
			 + ", relationPath=" + _relationPath + ", onClauseInline=" + _onClauseInline + "}";
    }
}

}