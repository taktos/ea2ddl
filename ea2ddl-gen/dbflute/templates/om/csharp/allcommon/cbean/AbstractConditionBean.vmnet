#set ($myClassName = "${glConditionBeanAbstractName}")

using System;
using System.Reflection;

using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonSqlClause};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonJdbc};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonCBean} {

    [System.Serializable]
    public abstract class $myClassName : ${glConditionBeanInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected readonly ${glSqlClauseName} _sqlClause;
        protected int _safetyMaxResultSize;
        protected ${glStatementConfig} _statementConfig;

        // [DBFlute-0.7.4] @jflute -- At the future, I'll implement some check logics by these purpose types.
        protected bool _forDeriveReferrer;
        protected bool _forUnion;
        protected bool _forExistsSubQuery;
        protected bool _forInScopeSubQuery;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}() {
            _sqlClause = new ${glSqlClauseName}${database.DaoGenDbName}(TableSqlName);
            _sqlClause.makeFormatClauseEffective();
        }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public abstract String TableDbName { get; }
        public abstract String TableSqlName { get; }

        // ===============================================================================
        //                                                                       SqlClause
        //                                                                       =========
        public ${glSqlClauseName} SqlClause { get { return _sqlClause; } }
        public String GetClause() { return this.SqlClause.getClause(); }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
        public abstract ${glConditionQueryInterfaceName} ConditionQueryAsInterface { get; }

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========
        public abstract bool HasUnionQueryOrUnionAllQuery();

        // ===============================================================================
        //                                                    Implementation of PagingBean
        //                                                    ============================
        // -------------------------------------------------
        //                              Paging Determination
        //                              --------------------
        // * * * * * * * *
        // For SQL Comment
        // * * * * * * * *
        public virtual bool IsPaging { get { throw new UnsupportedOperationException("This method is unsupported on ConditionBean!"); } }

        // * * * * * * * *
        // For Framework
        // * * * * * * * *
        public virtual bool IsCountLater { get { throw new UnsupportedOperationException("This method is unsupported on ConditionBean!"); } }

        // -------------------------------------------------
        //                                    Paging Setting
        //                                    --------------
        public void XSetPaging(bool paging) {// Very Internal!
            throw new UnsupportedOperationException("This method is unsupported on ConditionBean!");
        }
		public void Paging(int pageSize, int pageNumber) {
		    FetchFirst(pageSize);
		    FetchPage(pageNumber);
		}

        // -------------------------------------------------
        //                                     Fetch Setting
        //                                     -------------
        public ${glPagingBeanInterfaceName} FetchFirst(int fetchSize) {
            this.SqlClause.fetchFirst(fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchScope(int fetchStartIndex, int fetchSize) {
            this.SqlClause.fetchScope(fetchStartIndex, fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchPage(int fetchPageNumber) {
            this.SqlClause.fetchPage(fetchPageNumber);
            return this;
        }

        // -------------------------------------------------
        //                                    Fetch Property
        //                                    --------------
        public int FetchStartIndex { get { return this.SqlClause.getFetchStartIndex(); } }
        public int FetchSize { get { return this.SqlClause.getFetchSize(); } }
        public int FetchPageNumber { get { return this.SqlClause.getFetchPageNumber(); } }
        public int PageStartIndex { get { return this.SqlClause.getPageStartIndex(); } }
        public int PageEndIndex { get { return this.SqlClause.getPageEndIndex(); } }
        public bool IsFetchScopeEffective { get { return this.SqlClause.isFetchScopeEffective(); } }
        public int SafetyMaxResultSize { get { return _safetyMaxResultSize; } }

        // -------------------------------------------------
        //                                     Hint Property
        //                                     -------------
        public String SelectHint { get { return this.SqlClause.getSelectHint(); } }
        public String FromBaseTableHint { get { return this.SqlClause.getFromBaseTableHint(); } }
        public String FromHint { get { return this.SqlClause.getFromHint(); } }
        public String WhereClause { get { return this.SqlClause.getWhereClause(); } }
        public String OrderByClause { get { return this.SqlClause.getOrderByClause(); } }
        public String SqlSuffix { get { return this.SqlClause.getSqlSuffix(); } }

        // ===============================================================================
        //                                            Implementation of FetchNarrowingBean
        //                                            ====================================
        public int FetchNarrowingSkipStartIndex { get { return this.SqlClause.getFetchNarrowingSkipStartIndex(); } }
        public int FetchNarrowingLoopCount { get { return this.SqlClause.getFetchNarrowingLoopCount(); } }
        public bool IsFetchNarrowingSkipStartIndexEffective { get { return !this.SqlClause.isFetchStartIndexSupported(); } }
        public bool IsFetchNarrowingLoopCountEffective { get { return !this.SqlClause.isFetchSizeSupported(); } }
        public bool IsFetchNarrowingEffective { get { return this.SqlClause.isFetchNarrowingEffective(); } }
        public void IgnoreFetchNarrowing() { throw new UnsupportedOperationException("This method is unsupported on ConditionBean!"); }
        public void RestoreIgnoredFetchNarrowing() {}

        // ===============================================================================
        //                                                   Implementation of OrderByBean
        //                                                   =============================
        public ${glOrderByClauseName} SqlComponentOfOrderByClause {
            get { return this.SqlClause.getSqlComponentOfOrderByClause(); }
        }

        public ${glOrderByBeanInterfaceName} ClearOrderBy() {
            this.SqlClause.clearOrderBy();
            return this;
        }

        public ${glOrderByBeanInterfaceName} IgnoreOrderBy() {
            this.SqlClause.ignoreOrderBy();
            return this;
        }

        public $glOrderByBeanInterfaceName MakeOrderByEffective() {
            this.SqlClause.makeOrderByEffective();
            return this;
        }

        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Asc();
        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Desc();

        // ===============================================================================
        //                                                Implementation of SelectResource
        //                                                ================================
        public void CheckSafetyResult(int safetyMaxResultSize) {
            this._safetyMaxResultSize = safetyMaxResultSize;
        }

        // ===============================================================================
        //                                                                    Limit Select
        //                                                                    ============
        protected bool _isLimitSelectPKOnly;

        public bool IsLimitSelect_PKOnly() {
            return _isLimitSelectPKOnly;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_PKOnly() {
            _isLimitSelectPKOnly = true;
            return this;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_Off() {
            _isLimitSelectPKOnly = false;
            return this;
        }

        // ===============================================================================
        //                                                                    Lock Setting
        //                                                                    ============
        public ${glConditionBeanInterfaceName} LockForUpdate() {
            this.SqlClause.lockForUpdate();
            return this;
        }

        // ===============================================================================
        //                                                                    Select Count
        //                                                                    ============
        public ${glConditionBeanInterfaceName} XSetupSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = true;

            // If the query uses union query, it needs included-select-column.
            if (!HasUnionQueryOrUnionAllQuery()) {
                this.SqlClause.ignoreIncludedSelectColumn();
            }

            this.SqlClause.ignoreIncludedSelectColumn();
            this.SqlClause.ignoreOrderBy();
            this.SqlClause.ignoreFetchScope();
            return this;
        }

        public ${glConditionBeanInterfaceName} XAfterCareSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = false;

            // If the query uses union query, it needs included-select-column.
            if (!HasUnionQueryOrUnionAllQuery()) {
                this.SqlClause.makeIncludedSelectColumnEffective();
            }
		
            this.SqlClause.makeIncludedSelectColumnEffective();
            this.SqlClause.makeOrderByEffective();
            this.SqlClause.makeFetchScopeEffective();
            return this;
        }

        protected bool _isSelectCountIgnoreFetchScope;

        public bool IsSelectCountIgnoreFetchScope() {
            return _isSelectCountIgnoreFetchScope;
        }


        // ===============================================================================
        //                                                                Statement Config
        //                                                                ================
        public void Configure(${glStatementConfig} statementConfig) {
            _statementConfig = statementConfig;
        }
    
        public ${glStatementConfig} StatementConfig { get {
            return _statementConfig;
        }}

        // ===============================================================================
        //                                                                     Display SQL
        //                                                                     ===========
    	public virtual String ToDisplaySql() {
    	    return ${glConditionBeanContextName}.ConvertConditionBean2DisplaySql(this);
    	}
		
    
		// [DBFlute-0.7.4]
        // ===============================================================================
        //                                                                    Purpose Type
        //                                                                    ============
        public void XSetupForDeriveReferrer() {
            _forDeriveReferrer = true;
        }
    
        public void XSetupForUnion() {
            _forUnion = true;
        }
    
        public void XSetupForExistsSubQuery() {
            _forExistsSubQuery = true;
        }
    
        public void XSetupForInScopeSubQuery() {
            _forInScopeSubQuery = true;
        }
	
        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
		public override String ToString() {
		    return ToDisplaySql();
		}
    }
	
    // [DBFlute-0.7.4]
    public abstract class AbstractSpecification<CQ> where CQ : ${glConditionQueryInterfaceName} {
        protected ${glConditionBeanInterfaceName} _baseCB;
        protected SpQyCall<CQ> _qyCall;
        protected CQ _query;
        protected bool _forDeriveReferrer;
        protected bool alreadySpecifyRequiredColumn;
        protected AbstractSpecification(${glConditionBeanInterfaceName} baseCB, SpQyCall<CQ> qyCall, bool forDeriveReferrer) {
            _baseCB = baseCB;
            _qyCall = qyCall;
            _forDeriveReferrer = forDeriveReferrer;
        }
        protected void doColumn(String columnName) {
            assertColumn(columnName);
            if (_query == null) { _query = _qyCall.qy(); }
            if (!_forDeriveReferrer && !alreadySpecifyRequiredColumn) {
                alreadySpecifyRequiredColumn = true;
                doSpecifyRequiredColumn();
            }
            String relationPath = _query.getRelationPath() != null ? _query.getRelationPath() : "";
            String tableAliasName;
            if (_query.isBaseQuery(_query)) {
                tableAliasName = _baseCB.SqlClause.getLocalTableAliasName();
            } else {
                tableAliasName = _baseCB.SqlClause.resolveJoinAliasName(relationPath, _query.getNestLevel());
            }
            _baseCB.SqlClause.specifySelectColumn(tableAliasName, columnName);
        }
        protected void assertColumn(String columnName) {
            if (_query == null && !_qyCall.has()) { throwSpecifyColumnNotSetupSelectColumnException(columnName); }
        }
        protected void assertForeign(String foreignPropertyName) {
            if (_forDeriveReferrer) { throwDeriveReferrerInvalidForeignSpecificationException(foreignPropertyName); }
        }
        protected abstract void doSpecifyRequiredColumn();
        protected abstract String getTableDbName();
        
        protected void throwSpecifyColumnNotSetupSelectColumnException(String columnName) {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "You specified the column that had Not been Set up!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "You should call setupSelect_[ForeignTable]() before calling specify[ForeignTable]().column[TargetColumn]()." + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Wrong]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.Specify().SpecifyMemberStatus().ColumnMemberStatusName(); // *No!" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Good!]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.SetupSelect_MemberStatus(); // *Point!" + getLineSeparator();
            msg = msg + "    cb.Specify().SpecifyMemberStatus().ColumnMemberStatusName();" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[ConditionBean]" + getLineSeparator() + _baseCB.GetType().Name + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Specified Column]" + getLineSeparator() + getTableDbName() + "." + columnName + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new SpecifyColumnNotSetupSelectColumnException(msg);
        }
        protected void throwDeriveReferrerInvalidForeignSpecificationException(String foreignPropertyName) {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "You specified a foreign table column in spite of derive-sub-query!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "You should specified a local table column at condition-bean for derive-sub-query." + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Wrong]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {" + getLineSeparator();
            msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
            msg = msg + "            subCB.specify().specifyProduct().columnProductName(); // *No!" + getLineSeparator();
            msg = msg + "        }" + getLineSeparator();
            msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Good!]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {" + getLineSeparator();
            msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
            msg = msg + "            subCB.specify().columnPurchaseDatetime();// *Point!" + getLineSeparator();
            msg = msg + "        }" + getLineSeparator();
            msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Specified Foreign Property]" + getLineSeparator() + foreignPropertyName + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new DeriveReferrerInvalidForeignSpecificationException(msg);
        }
        protected String getLineSeparator() {
            return ${glSimpleSystemUtil}.GetLineSeparator();
        }
    }
    
    public interface SpQyCall<CQ> where CQ : ${glConditionQueryInterfaceName} {
        bool has(); 
        CQ qy(); 
    }
    
    public class SpecifyColumnNotSetupSelectColumnException : SystemException {
        public SpecifyColumnNotSetupSelectColumnException(String msg) : base(msg) {
        }
    }
    
    public class DeriveReferrerInvalidForeignSpecificationException : SystemException {
        public DeriveReferrerInvalidForeignSpecificationException(String msg) : base(msg) {
        }
    }

    public class RAFunction<REFERRER_CB, LOCAL_CQ> where REFERRER_CB : ${glConditionBeanInterfaceName} where LOCAL_CQ : ${glConditionQueryInterfaceName} {
        protected ${glConditionBeanInterfaceName} _baseCB;
        protected LOCAL_CQ _localCQ;
        protected RAQSetupper<REFERRER_CB, LOCAL_CQ> _querySetupper;
        public RAFunction(${glConditionBeanInterfaceName} baseCB, LOCAL_CQ localCQ, RAQSetupper<REFERRER_CB, LOCAL_CQ> querySetupper) {
            _baseCB = baseCB;
            _localCQ = localCQ;
            _querySetupper = querySetupper;
        }
        public void Max(${glSubQuery}<REFERRER_CB> subQuery, String aliasName) {
            assertAliasName(aliasName);
            _querySetupper.Invoke("max", subQuery, _localCQ, aliasName.Trim());
        }
        public void Min(${glSubQuery}<REFERRER_CB> subQuery, String aliasName) {
            assertAliasName(aliasName);
            _querySetupper.Invoke("min", subQuery, _localCQ, aliasName.Trim());
        }
        public void Sum(${glSubQuery}<REFERRER_CB> subQuery, String aliasName) {
            assertAliasName(aliasName);
            _querySetupper.Invoke("sum", subQuery, _localCQ, aliasName.Trim());
        }
        public void Avg(${glSubQuery}<REFERRER_CB> subQuery, String aliasName) {
            assertAliasName(aliasName);
            _querySetupper.Invoke("avg", subQuery, _localCQ, aliasName.Trim());
        }
        public void Count(${glSubQuery}<REFERRER_CB> subQuery, String aliasName) {
            assertAliasName(aliasName);
            _querySetupper.Invoke("count", subQuery, _localCQ, aliasName.Trim());
        }

        protected void assertAliasName(String aliasName) {
            if (aliasName == null || aliasName.Trim().Length == 0) {
                throwDeriveReferrerInvalidAliasNameException();
            }
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_baseCB.TableDbName);
            PropertyInfo[] properties = dbmeta.EntityType.GetProperties();
            String targetPropertyName = aliasName.Replace("_", "").ToLower();
            bool existsSetterMethod = false;
            foreach (PropertyInfo property in properties) {
                if (!property.CanWrite) {
                    continue;
                }
                if (targetPropertyName.Equals(property.Name.ToLower())) {
                    existsSetterMethod = true;
                    break;
                }
            }
            if (!existsSetterMethod) {
                throwDeriveReferrerEntityPropertyNotFoundException(aliasName, dbmeta.EntityType);
            }
        }
        protected void throwDeriveReferrerInvalidAliasNameException() {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "The alias name for derive-referrer was Invalid!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "You should set valid alias name. {NotNull, NotEmpty}" + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Wrong]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.Specify().DerivePurchaseList().Max(delegate(PurchaseCB subCB) {" + getLineSeparator();
            msg = msg + "        subCB.Specify().ColumnPurchaseDatetime();" + getLineSeparator();
            msg = msg + "    }, null); // *No! {null, \"\", \"   \"} are NG!" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Good!]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.Specify().DerivePurchaseList().Max(delegate(PurchaseCB subCB) {" + getLineSeparator();
            msg = msg + "        subCB.Specify().ColumnPurchaseDatetime();" + getLineSeparator();
            msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\"); // *Point!" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Local Table]" + getLineSeparator() + _localCQ.getTableDbName() + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new DeriveReferrerInvalidAliasNameException(msg);
        }
        protected void throwDeriveReferrerEntityPropertyNotFoundException(String aliasName, Type entityType) {
            String msg = "Look! Read the message below." + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "A property for derive-referrer was Not Found in the entity!" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "You should implement a property(setter and getter) in the entity." + getLineSeparator();
            msg = msg + "Or you should confirm whether the alias name has typo or not." + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [ConditionBean Invoking]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    MemberCB cb = new MemberCB();" + getLineSeparator();
            msg = msg + "    cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {" + getLineSeparator();
            msg = msg + "        public void query(PurchaseCB subCB) {" + getLineSeparator();
            msg = msg + "            subCB.specify().columnPurchaseDatetime();" + getLineSeparator();
            msg = msg + "        }" + getLineSeparator();
            msg = msg + "    }, \"LATEST_PURCHASE_DATETIME\");" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + "    " + getLineSeparator();
            msg = msg + "    [Extended Entity]" + getLineSeparator();
            msg = msg + "    /- - - - - - - - - - - - - - - - - - - - " + getLineSeparator();
            msg = msg + "    // At the entity of Purchase..." + getLineSeparator();
            msg = msg + "    protected Date _latestPurchaseDatetime;" + getLineSeparator();
            msg = msg + "    public Date getLatestPurchaseDatetime() {" + getLineSeparator();
            msg = msg + "        return _latestPurchaseDatetime;" + getLineSeparator();
            msg = msg + "    }" + getLineSeparator();
            msg = msg + "    public void setLatestPurchaseDatetime(Date latestPurchaseDatetime) {" + getLineSeparator();
            msg = msg + "        _latestPurchaseDatetime = latestPurchaseDatetime;" + getLineSeparator();
            msg = msg + "    }" + getLineSeparator();
            msg = msg + "    - - - - - - - - - -/" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Alias Name]" + getLineSeparator() + aliasName + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Target Entity]" + getLineSeparator() + entityType + getLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new DeriveReferrerEntityPropertyNotFoundException(msg);
        }
        protected String replaceString(String text, String fromText, String toText) {
            return ${glSimpleStringUtil}.Replace(text, fromText, toText);
        }
        protected String getLineSeparator() {
            return ${glSimpleSystemUtil}.GetLineSeparator();
        }
    }

    public delegate void RAQSetupper<REFERRER_CB, LOCAL_CQ>(String function, ${glSubQuery}<REFERRER_CB> subQuery, LOCAL_CQ cq, String aliasName)
            where REFERRER_CB : ${glConditionBeanInterfaceName} where LOCAL_CQ : ${glConditionQueryInterfaceName};
    
    public class DeriveReferrerInvalidAliasNameException : SystemException {
        public DeriveReferrerInvalidAliasNameException(String msg) : base(msg) {
        }
    }
    
    public class DeriveReferrerEntityPropertyNotFoundException : SystemException {
        public DeriveReferrerEntityPropertyNotFoundException(String msg) : base(msg) {
        }
    }
}
