
using System;
using System.Collections.Generic;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};
using ${glPackageBaseCommonJdbc};

namespace ${glPackageBaseCommonCBeanOutsidesqlExecutor} {

    public class ${glOutsideSqlBasicExecutorName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${glOutsideSqlDaoName} _outsideSqlDao;
        protected String _tableDbName;
        protected bool _dynamicBinding;
        protected ${glStatementConfig} _statementConfig;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glOutsideSqlBasicExecutorName}(${glOutsideSqlDaoName} outsideSqlDao, String tableDbName) {
            _outsideSqlDao = outsideSqlDao;
            _tableDbName = tableDbName;
        }

        // ===============================================================================
        //                                                                          Select
        //                                                                          ======
#if (!$database.isCompatibleOutsideSqlResultOldStyle())
        public ${glListResultBeanName}<ENTITY> SelectList<ENTITY>(String path, Object pmb) {
            IList<ENTITY> resultList = (IList<ENTITY>)_outsideSqlDao.SelectList(path, pmb, CreateOutsideSqlOption(), typeof(ENTITY));
            return new ${glResultBeanBuilderName}<ENTITY>(_tableDbName).BuildListResultBean(resultList);
            
        }
#else
        public IList<ENTITY> SelectList<ENTITY>(String path, Object pmb) {
            return (IList<ENTITY>)_outsideSqlDao.SelectList(path, pmb, CreateOutsideSqlOption(), typeof(ENTITY));
        }
#end
        // ===============================================================================
        //                                                                         Execute
        //                                                                         =======
        public int Execute(String path, Object pmb) {
            return _outsideSqlDao.Execute(path, pmb, CreateOutsideSqlOption());
        }

        // Implements at the future!
        //    public int BatchExecute(String path, Object pmb) {
        //        throw new UnsupportedOperationException("Sorry! The method of batchExecute() has not been implemented yet.");
        //        // return _outsideSqlDao.batchExecute(path, pmb, CreateOutsideSqlOption());
        //    }

        // [DBFlute-0.8.0]
        // ===============================================================================
        //                                                                  Procedure Call
        //                                                                  ==============
        public void Call(${glProcedurePmbName} pmb) {
            if (pmb == null) { throw new ArgumentNullException("The argument of call() 'pmb' should not be null!"); }
            _outsideSqlDao.Call(pmb.ProcedureName, pmb, CreateOutsideSqlOption());
        }

        // ===============================================================================
        //                                                                          Option
        //                                                                          ======
        public ${glOutsideSqlCursorExecutorName}<Object> CursorHandling() {
            return new ${glOutsideSqlCursorExecutorName}<Object>(_outsideSqlDao, CreateOutsideSqlOption());
        }

        public ${glOutsideSqlEntityExecutorName}<Object> EntityHandling() {
            return new ${glOutsideSqlEntityExecutorName}<Object>(_outsideSqlDao, CreateOutsideSqlOption());
        }

        public ${glOutsideSqlPagingExecutorName} AutoPaging() {
            ${glOutsideSqlOptionName} option = CreateOutsideSqlOption();
            option.AutoPaging();
            return new ${glOutsideSqlPagingExecutorName}(_outsideSqlDao, option, _tableDbName);
        }

        public ${glOutsideSqlPagingExecutorName} ManualPaging() {
            ${glOutsideSqlOptionName} option = CreateOutsideSqlOption();
            option.ManualPaging();
            return new ${glOutsideSqlPagingExecutorName}(_outsideSqlDao, option, _tableDbName);
        }

        public ${glOutsideSqlBasicExecutorName} DynamicBinding() {
            _dynamicBinding = true;
            return this;
        }

        public ${glOutsideSqlBasicExecutorName} Configure(${glStatementConfig} statementConfig) {
            _statementConfig = statementConfig;
            return this;
        }

        // -------------------------------------------------
        //                                            Helper
        //                                            ------
        protected ${glOutsideSqlOptionName} CreateOutsideSqlOption() {
            ${glOutsideSqlOptionName} option = new ${glOutsideSqlOptionName}();
            option.StatementConfig = _statementConfig;
            if (_dynamicBinding) {
                option.DynamicBinding();
            }
			option.TableDbName = _tableDbName;
            return option;
        }
    }
}
