
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

using Seasar.Framework.Util;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonJdbc};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonCBeanOutsidesql} {

    public class ${glOutsideSqlContextName} {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        /** Log instance. */
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
        
        // ===============================================================================
        //                                                                    Thread Local
        //                                                                    ============
        private static readonly LocalDataStoreSlot _slot = Thread.AllocateDataSlot();

        public static ${glOutsideSqlContextName} GetOutsideSqlContextOnThread() {
            return (${glOutsideSqlContextName})Thread.GetData(_slot);
        }

        public static void SetOutsideSqlContextOnThread(${glOutsideSqlContextName} outsideSqlContext) {
            if (outsideSqlContext == null) {
                String msg = "The argument[outsideSqlContext] must not be null.";
                throw new SystemException(msg);
            }
            Thread.SetData(_slot, outsideSqlContext);
        }

        public static bool IsExistOutsideSqlContextOnThread() {
            return (Thread.GetData(_slot) != null);
        }

        public static void ClearOutsideSqlContextOnThread() {
            Thread.SetData(_slot, null);
        }

        // ===============================================================================
        //                                                                      Unique Key
        //                                                                      ==========
        public static String GenerateSpecifiedOutsideSqlUniqueKey(String methodName, String path, Object pmb, ${glOutsideSqlOptionName} option, Object resultTypeSpecification) {
            String pmbKey = (pmb != null ? pmb.GetType().Name : "null");
            String resultKey = (resultTypeSpecification != null ? ":" + resultTypeSpecification : "null");
            String tableDbName = option.TableDbName;
            String generatedUniqueKey = option.GenerateUniqueKey();
            return methodName + "():" + tableDbName + ":" + path + ":" + pmbKey + ":" + generatedUniqueKey + resultKey;
        }

        // ===============================================================================
        //                                                              Exception Handling
        //                                                              ==================
        public static void ThrowOutsideSqlNotFoundException(String path) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The outsideSql was Not Found!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm the existence of your target file of outsideSql on your classpath." + GetLineSeparator();
            msg = msg + "And please confirm the file name and the file path STRICTLY!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Specified OutsideSql Path]" + GetLineSeparator() + path + GetLineSeparator();
            msg = msg + "* * * * * * * * * */";
            throw new ${glPackageBaseCommonException}.${glOutsideSqlNotFoundException}(msg);
        }

        protected static String GetLineSeparator() {
            return ${glSimpleSystemUtil}.GetLineSeparator();
        }

        protected static String ReplaceString(String text, String fromText, String toText) {
            return ${glSimpleStringUtil}.Replace(text, fromText, toText);
        }

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        // -------------------------------------------------
        //                              Common of OutsideSql
        //                              --------------------
        protected bool _dynamicBinding;

        protected bool _offsetByCursorForcedly;

        protected bool _limitByCursorForcedly;

        // -------------------------------------------------
        //                              Specified OutsideSql
        //                              --------------------
        /// <summary>The path of outside-sql. (The mark of Specified-OutsideSql)</summary>
        protected String _outsideSqlPath;

        protected Object _parameterBean;

        protected Object _resultTypeSpecification;

        protected String _methodName;
        
        protected ${glStatementConfig} _statementConfig;

        protected String _tableDbName;

        // ===============================================================================
        //                                                                        Read SQL
        //                                                                        ========
        public String ReadFilteredOutsideSql(String sqlFileEncoding, String dbmsSuffix) {
            String sql = ReadOutsideSql(sqlFileEncoding, dbmsSuffix);
            sql = ReplaceOutsideSqlBindCharacterOnLineComment(sql);
            return ReplaceOldStypePagingDeterminationForCompatible(sql);
        }
        
        protected String ReplaceOldStypePagingDeterminationForCompatible(String sql) {
            return sql.Replace("/*IF pmb.Paging*/", "/*IF pmb.IsPaging*/");
        }
    
        protected String ReplaceOutsideSqlBindCharacterOnLineComment(String sql) {
            String bindCharacter = "?";
            if (sql.IndexOf(bindCharacter) < 0) {
                return sql;
            }
            String lineSeparator = "\n";
            if (sql.IndexOf(lineSeparator) < 0) {
                return sql;
            }
            String lineCommentMark = "--";
            if (sql.IndexOf(lineCommentMark) < 0) {
                return sql;
            }
            StringBuilder sb = new StringBuilder();
            String[] lines = sql.Split(lineSeparator.ToCharArray());
            foreach (String line in lines) {
                int lineCommentIndex = line.IndexOf("--");
                if (lineCommentIndex < 0) {
                    sb.Append(line).Append(lineSeparator);
                    continue;
                }
                String lineComment = line.Substring(lineCommentIndex);
                if (lineComment.Contains("ELSE") || !lineComment.Contains(bindCharacter)) {
                    sb.Append(line).Append(lineSeparator);
                    continue;
                }
                
                if (_log.IsDebugEnabled) {
                    _log.Debug("...Replacing bind character on line comment: " + lineComment);
                }
                String filteredLineComment = ReplaceString(lineComment, bindCharacter, "Q");
                sb.Append(line.Substring(0, lineCommentIndex)).Append(filteredLineComment).Append(lineSeparator);
            }
            return sb.ToString();
        }
    
        public String ReadOutsideSql(String sqlFileEncoding, String dbmsSuffix) {
            String standardPath = _outsideSqlPath.Replace("/", ".");// Replacing is required for csharp!
            String dbmsPath = BuildDbmsPath(standardPath, dbmsSuffix);
            Assembly asm = GetType().Assembly;// In same assembly!
            if (IsExistResource(dbmsPath, asm)) {
                return ReadText(dbmsPath, sqlFileEncoding, asm);
            } else if (IsExistResource(standardPath, asm)) {
                return ReadText(standardPath, sqlFileEncoding, asm);
            } else {
                String text = ReadTextFromFileSystem(standardPath, sqlFileEncoding);
                if (text != null) {
                    return text;
                }
                ThrowOutsideSqlNotFoundException(standardPath);
                return null;// Non Reachable.
            }
        }

        protected String BuildDbmsPath(String standardPath, String dbmsSuffix) {
            String dbmsPath;
            int lastIndexOfDot = standardPath.LastIndexOf(".");
            if (lastIndexOfDot >= 0 && !standardPath.Substring(lastIndexOfDot).Contains("/")) {
                String basePath = standardPath.Substring(0, lastIndexOfDot);
                dbmsPath = basePath + dbmsSuffix + standardPath.Substring(lastIndexOfDot);
            } else {
                dbmsPath = standardPath + dbmsSuffix;
            }
            return dbmsPath;
        }

        // ===============================================================================
        //                                                                     Set up Path
        //                                                                     ===========
        public void SetupBehaviorQueryPathIfNeeds() {
            if (!IsBehaviorQueryPathEnabled) {
                return;
            }
            if (_outsideSqlPath.Contains(":")) {
                String subDirectoryValue = _outsideSqlPath.Substring(0, _outsideSqlPath.LastIndexOf(":"));
                String subDirectoryPath = subDirectoryValue.Replace(":", "/");
                String behaviorQueryPath = _outsideSqlPath.Substring(_outsideSqlPath.LastIndexOf(":") + ":".Length);
                String behaviorClassPath = BuildBehaviorSqlPackageName().Replace(".", "/");
                String behaviorPackagePath = behaviorClassPath.Substring(0, behaviorClassPath.LastIndexOf("/"));
                String behaviorClassName = behaviorClassPath.Substring(behaviorClassPath.LastIndexOf("/") + "/".Length);
                _outsideSqlPath = behaviorPackagePath + "/" + subDirectoryPath + "/" + behaviorClassName + "_" + behaviorQueryPath + ".sql";
                _outsideSqlPath = _outsideSqlPath.Replace("/", ".");// Replacing is required for csharp!
            } else {
                _outsideSqlPath = BuildBehaviorSqlPackageName() + "_" + _outsideSqlPath + ".sql";
            }
        }

        protected String BuildBehaviorSqlPackageName() {
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableDbName);
            String behaviorTypeName = dbmeta.BehaviorTypeName;
            String outsideSqlPackage = ${glDBFluteConfig}.GetInstance().OutsideSqlPackage;
            if (outsideSqlPackage != null && outsideSqlPackage.Trim().Length > 0) {
                String behaviorClassName = behaviorTypeName.Substring(behaviorTypeName.LastIndexOf(".") + ".".Length);
                String tmp = behaviorTypeName.Substring(0, behaviorTypeName.LastIndexOf("."));
                String exbhvName = tmp.Contains(".") ? tmp.Substring(tmp.LastIndexOf(".") + ".".Length) : tmp;
                return FilterBehaviorSqlPackageName(outsideSqlPackage + "." + exbhvName + "." + behaviorClassName);
            } else {
                return FilterBehaviorSqlPackageName(behaviorTypeName);
            }
        }

        protected String FilterBehaviorSqlPackageName(String name) { // CSharp only
            return FilterAboutDefaultPackage(FilterAboutOmitResourcePathPackage(FilterAboutOmitDirectoryPackage(name)));
        }

        // It is unnecessary of filtering about flat directory package.
        public String FilterAboutOmitDirectoryPackage(String pckge) { // CSharp only
            String omitDirectoryPackage = ${glDBFluteConfig}.GetInstance().OmitDirectoryPackage;
            if (omitDirectoryPackage != null && omitDirectoryPackage.Trim().Length > 0) {
                pckge = RemoveOmitPackage(pckge, omitDirectoryPackage);
            }
            return pckge;
        }

        public String FilterAboutOmitResourcePathPackage(String pckge) { // CSharp only
            String omitResourcePathPackage = ${glDBFluteConfig}.GetInstance().OmitResourcePathPackage;
            if (omitResourcePathPackage != null && omitResourcePathPackage.Trim().Length > 0) {
                pckge = RemoveOmitPackage(pckge, omitResourcePathPackage);
            }
            return pckge;
        }

        protected String RemoveOmitPackage(String pckge, String omitName) { // CSharp only
            if (pckge.StartsWith(omitName)) {
                return pckge.Replace(omitName + ".", "");
            } else if (pckge.EndsWith(omitName)) {
                return pckge.Replace("." + omitName, "");
            } else {
                return pckge.Replace("." + omitName + ".", ".");
            }
        }

        protected String FilterAboutDefaultPackage(String pckge) { // CSharp only
            String defaultPackage = ${glDBFluteConfig}.GetInstance().DefaultPackage;
            if (defaultPackage != null && defaultPackage.Trim().Length > 0) {
                return defaultPackage + "." + pckge;
            } else {
                return pckge;
            }
        }
	
        protected bool IsBehaviorQueryPathEnabled {
            get {
                if (IsProcedure) {// [DBFlute-0.8.0]
                    return false;
                }
                return _outsideSqlPath != null && !_outsideSqlPath.Contains("/") && !_outsideSqlPath.Contains(".") && _tableDbName != null;
            }
        }

        // ===============================================================================
        //                                                                     File System
        //                                                                     ===========
        protected virtual String ReadTextFromFileSystem(String path, String sqlFileEncoding) {
            path = BuildFileSystemPath(path);
            if (!File.Exists(path)) {
                if (_log.IsDebugEnabled) {
                    String msg = "Look! Read the DEBUG message below." + GetLineSeparator();
                    msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
                    msg = msg + "The outsideSql was Not Found in File System!" + GetLineSeparator();
                    msg = msg + "  path = " + path + GetLineSeparator();
                    msg = msg + "* * * * * * * * * */";
                    _log.Debug(msg);
                }
                return null;
            }
            using (Stream stream = new FileStream(path, FileMode.Open)) {
                using (TextReader reader = new StreamReader(stream, Encoding.GetEncoding(sqlFileEncoding))) {
                    return reader.ReadToEnd();
                }
            }
        }

        protected String BuildFileSystemPath(String path) {
            String omitPathPackage = ${glDBFluteConfig}.GetInstance().OmitFileSystemPathPackage;
            if (omitPathPackage != null && omitPathPackage.Trim().Length > 0 && path.StartsWith(omitPathPackage)) {
                path = path.Substring(omitPathPackage.Length + ".".Length); // Remove omit package.
            } else {
                path = path.Substring(path.IndexOf(".") + ".".Length); // Remove project package.
            }
            String fileSeparator = "/";
            String flatDirectory = ${glDBFluteConfig}.GetInstance().FlatDirectoryPackage;
            if (flatDirectory != null && flatDirectory.Trim().Length > 0 && path.Contains(flatDirectory)) {
                String front = path.Substring(0, path.IndexOf(flatDirectory));
                String rear = path.Substring(path.IndexOf(flatDirectory) + flatDirectory.Length);
                front = front.Replace(".", fileSeparator);
                rear = rear.Replace(".", fileSeparator);
                path = front + flatDirectory + rear;
            } else {
                path = path.Replace(".", fileSeparator);
            }
            if (path.EndsWith(fileSeparator + "sql")) {
                path = path.Replace(fileSeparator + "sql", ".sql");
            }
            return path;
        }

        // ===============================================================================
        //                                                                   Determination
        //                                                                   =============
        public bool IsSpecifiedOutsideSql {
            get { return _outsideSqlPath != null; }
        }

        // [DBFlute-0.8.0]
        public bool IsProcedure {
            get { return _methodName != null && _methodName.StartsWith("Call"); }
        }

        // ===============================================================================
        //                                                                  General Helper
        //                                                                  ==============
        protected virtual bool IsExistResource(String path, Assembly asm) {
            return ResourceUtil.IsExist(path, asm);
        }

        protected virtual String ReadText(String path, String sqlFileEncoding, Assembly asm) {
            using (Stream stream = ResourceUtil.GetResourceAsStream(path, asm)) {
                using (TextReader reader = new StreamReader(stream, Encoding.GetEncoding(sqlFileEncoding))) {
                    return reader.ReadToEnd();
                }
            }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        // -------------------------------------------------
        //                              Common of OutsideSql
        //                              --------------------
        public bool IsDynamicBinding {
            get { return _dynamicBinding; }
            set { this._dynamicBinding = value; }
        }

        public bool IsOffsetByCursorForcedly {
            get { return _offsetByCursorForcedly; }
            set { this._offsetByCursorForcedly = value; }
        }
        
        public bool IsLimitByCursorForcedly {
            get { return _limitByCursorForcedly; }
            set { this._limitByCursorForcedly = value; }
        }

        // -------------------------------------------------
        //                              Specified OutsideSql
        //                              --------------------
        public String OutsideSqlPath {
            get { return _outsideSqlPath; }
            set { this._outsideSqlPath = value; }
        }

        public Object ParameterBean {
            get { return _parameterBean; }
            set { this._parameterBean = value; }
        }

        public Object ResultTypeSpecification {
            get { return _resultTypeSpecification; }
            set { this._resultTypeSpecification = value; }
        }

        public String MethodName {
            get { return _methodName; }
            set { this._methodName = value; }
        }

        public ${glStatementConfig} StatementConfig {
            get { return _statementConfig; }
            set { this._statementConfig = value; }
        }

        public String TableDbName {
            get { return _tableDbName; }
            set { this._tableDbName = value; }
        }
    }
}
