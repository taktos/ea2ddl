#set ($myClassName = "${glSqlClauseAbstractName}")

using System;
using ${glPackageBaseCommon};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCOption};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonDBMetaInfo};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonSqlClause} {

// JavaLike
[System.Serializable]
public abstract class ${myClassName} : ${glSqlClauseInterfaceName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
	protected static readonly String SELECT_HINT = "/*$dto.SelectHint*/ ";
	
    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // -----------------------------------------------------
    //                                                 Basic
    //                                                 -----
    /** Target table name. */
    protected readonly String _tableName;

    // -----------------------------------------------------
    //                                       Clause Resource
    //                                       ---------------
	/** Selected select column map. map:{tableAliasName : map:{columnName : selectColumnInfo}}*/
    protected Map<String, Map<String, SelectedSelectColumnInfo>> _selectedSelectColumnMap = new LinkedHashMap<String, Map<String, SelectedSelectColumnInfo>>();

    /** Specified select column map. map:{ tableAliasName = map:{ columnName : null } } */
    protected Map<String, Map<String, String>> _specifiedSelectColumnMap;
    
    /** Specified derive sub-query map. */
    protected Map<String, String> _specifiedDeriveSubQueryMap;

    /** Included select column map. */
    protected Map<String, String> _includedSelectColumnMap = new LinkedHashMap<String, String>();

	/** The map of real column and alias of select clause. map:{realColumnName : aliasName} */
	protected Map<String, String> _selectClauseRealColumnAliasMap = new HashMap<String, String>();// Without linked!
	
    /** Outer join map. */
    protected Map<String, LeftOuterJoinInfo> _outerJoinMap = new LinkedHashMap<String, LeftOuterJoinInfo>();

    /** Where list. */
    protected List<String> _whereList = new ArrayList<String>();

    /** Inline where list for BaseTable. */
    protected List<String> _baseTableInlineWhereList = new ArrayList<String>();

    /** Order-by clause. */
    protected  ${glOrderByClauseName} _orderByClause = new ${glOrderByClauseName}();

    /** Union clause list. */
    protected List<UnionQueryInfo> _unionQueryInfoList = new ArrayList<UnionQueryInfo>();

    /** Is included-select-column effective? Default value is false. */
    protected bool _isIncludedSelectColumnEffective = false;

    /** Is order-by effective? Default value is false. */
    protected bool _isOrderByEffective = false;

    // -----------------------------------------------------
    //                                        Fetch Property
    //                                        --------------
    /** Fetch start index. (for fetchXxx()) */
    protected int _fetchStartIndex = 0;

    /** Fetch size. (for fetchXxx()) */
    protected int _fetchSize = 0;

    /** Fetch page number. (for fetchXxx()) This value should be plus. */
    protected int _fetchPageNumber = 1;

    /** Is fetch-narrowing effective? Default value is false. */
    protected bool _isFetchScopeEffective = false;

    // -----------------------------------------------------
    //                               AdditionalConditionAsOr
    //                               -----------------------
    /** Is additional condition as or effective?*/
    protected bool _isAdditionalConditionAsOrEffective = false;

    // -----------------------------------------------------
    //                               WhereClauseSimpleFilter
    //                               -----------------------
    // /** The filter for where clause. */
    // protected List<${glWhereClauseSimpleFilterInterfaceName}> _whereClauseSimpleFilterList;

    // -----------------------------------------------------
    //                                 Selected Foreign Info
    //                                 ---------------------
    /** The information of selected foreign table. */
    protected Map<String, String> _selectedForeignInfo;
	
    // -----------------------------------------------------
    //                                         Optional Info
    //                                         -------------
    protected bool _formatClause;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(String tableName) {
        if (tableName == null) {
            String msg = "Argument[tableName] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        _tableName = tableName;
    }

    // ===================================================================================
    //                                                                              Clause
    //                                                                              ======
    // -----------------------------------------------------
    //                                       Complete Clause
    //                                       ---------------
    public String getClause() {
        StringBuilder sb = new StringBuilder(512);
		sb.append(getSelectClause());
        sb.append(" ");
        sb.append(buildClauseWithoutMainSelect(false));
		String sql = sb.toString();
        return filterSubQueryIndent(sql);
    }
	
	public String getClausePKOnly() {
        StringBuilder sb = new StringBuilder(512);
		sb.append(getSelectClausePKOnly());
        sb.append(" ");
        sb.append(buildClauseWithoutMainSelect(true));
		String sql = sb.toString();
        return filterSubQueryIndent(sql);
	}
	
	protected String buildClauseWithoutMainSelect(bool pkonly) {
	    StringBuilder sb = new StringBuilder(512);
        sb.append(getFromClause());
        sb.append(getFromHint());
        sb.append(" ");
        sb.append(getWhereClause());
		String unionClause = buildUnionClause(pkonly ? getSelectClausePKOnly() : getSelectClause());
		
		// Delete template mark! (At the future this will be unnecessary.)
		unionClause = replaceString(unionClause, getUnionWhereClauseMark(), "");// Required!
		unionClause = replaceString(unionClause, getUnionWhereFirstConditionMark(), "");// Required!
		
        sb.append(unionClause);
        if (_isOrderByEffective && !_orderByClause.isEmpty()) {
            sb.append(" ");
            sb.append(getOrderByClause());
        }
        sb.append(" ");
        sb.append(getSqlSuffix());
        return sb.toString();
	}
    
    // -----------------------------------------------------
    //                                       Fragment Clause
    //                                       ---------------
    public String getClauseFromWhereWithUnionTemplate() {
	    return buildClauseFromWhereAsTemplate(false);
    }
	
    public String getClauseFromWhereWithWhereUnionTemplate() {
	    return buildClauseFromWhereAsTemplate(true);
	}
	
    protected virtual String buildClauseFromWhereAsTemplate(bool template) {
        StringBuilder sb = new StringBuilder(512);
        sb.append(getFromClause());
        sb.append(getFromHint());
        sb.append(" ");
        sb.append(buildWhereClause(template));
        sb.append(buildUnionClause(getUnionSelectClauseMark()));
        return sb.toString();
	}
	
    protected virtual String buildUnionClause(String selectClause) {
        StringBuilder sb = new StringBuilder();
        for (Iterator<UnionQueryInfo> ite = _unionQueryInfoList.iterator(); ite.hasNext(); ) {
            UnionQueryInfo unionQueryInfo = (UnionQueryInfo)ite.next();
            String unionQueryClause = unionQueryInfo.getUnionQueryClause();
            bool unionAll = unionQueryInfo.isUnionAll();
            if (isFormatClauseEffective()) {
                sb.append(getLineSeparator());
            }
            sb.append(unionAll ? " union all " : " union ");
            if (isFormatClauseEffective()) {
                sb.append(getLineSeparator());
            }
			sb.append(selectClause).append(" ").append(unionQueryClause);
        }
        return sb.toString();
    }

    // ===================================================================================
    //                                                                        Clause Parts
    //                                                                        ============
	public String getSelectClause() {
	    StringBuilder sb = new StringBuilder();
		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableName);
        List<${glColumnInfoName}> columnInfoList = dbmeta.ColumnInfoList;

        // [DBFlute-0.7.4]
        Map<String, String> localSpecifiedMap = _specifiedSelectColumnMap != null ? _specifiedSelectColumnMap.get(getLocalTableAliasName()) : null;
        bool existsSpecifiedLocal = localSpecifiedMap != null && !localSpecifiedMap.isEmpty();
		
		foreach (${glColumnInfoName} columnInfo in columnInfoList) {
		    String columnName = columnInfo.ColumnDbName;
			
            // [DBFlute-0.7.4]
            if (existsSpecifiedLocal && !localSpecifiedMap.containsKey(columnName)) {
                continue;
            }

			if (sb.length() > 0) {
			    sb.append(", ");
			} else {
			    sb.append("select").append(SELECT_HINT).append(" ");
			}
			String realColumnName = getLocalTableAliasName() + "." + columnName;
			sb.append(realColumnName).append(" as ").append(columnName);
			_selectClauseRealColumnAliasMap.put(realColumnName, columnName);
		}
	    Set<String> tableAliasNameSet = _selectedSelectColumnMap.keySet();
		foreach (String tableAliasName in tableAliasNameSet) {
		    Map<String, SelectedSelectColumnInfo> map = _selectedSelectColumnMap.get(tableAliasName);
			Collection<SelectedSelectColumnInfo> selectColumnInfoList = map.values();

            // [DBFlute-0.7.4]
            Map<String, String> foreginSpecifiedMap = _specifiedSelectColumnMap != null ? _specifiedSelectColumnMap.get(tableAliasName) : null;
            bool existsSpecifiedForeign = foreginSpecifiedMap != null && !foreginSpecifiedMap.isEmpty();

			foreach (SelectedSelectColumnInfo selectColumnInfo in selectColumnInfoList) {
			    String realColumnName = selectColumnInfo.buildRealColumnName();

                // [DBFlute-0.7.4]
                if (existsSpecifiedForeign && !foreginSpecifiedMap.containsKey(selectColumnInfo.getColumnName())) {
                    continue;
                }

                sb.append(", ").append(realColumnName).append(" as ").append(selectColumnInfo.getColumnAliasName());
				_selectClauseRealColumnAliasMap.put(realColumnName, selectColumnInfo.getColumnAliasName());
			}
		}
		if (_isIncludedSelectColumnEffective && !_includedSelectColumnMap.isEmpty()) {
		    sb.append(getIncludedSelectColumnClause());
		}

        // [DBFlute-0.7.4]
        if (_specifiedDeriveSubQueryMap != null && !_specifiedDeriveSubQueryMap.isEmpty()) {
            Collection<String> deriveSubQuerySet = _specifiedDeriveSubQueryMap.values();
            foreach (String deriveSubQuery in deriveSubQuerySet) {
                if (isFormatClauseEffective()) {
                    sb.append(getLineSeparator()).append("     ");
                }
                sb.append(", ").append(deriveSubQuery);
            }
        }

		return sb.toString();
	}
	
	public String getSelectClausePKOnly() {
	    StringBuilder sb = new StringBuilder();
		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableName);
		${glUniqueInfoName} uniqueInfo = dbmeta.PrimaryUniqueInfo;
		List<${glColumnInfoName}> columnInfoList = uniqueInfo.UniqueColumnList;
		foreach (${glColumnInfoName} columnInfo in columnInfoList) {
		    String columnName = columnInfo.ColumnDbName;
			if (sb.length() > 0) {
			    sb.append(", ");
			} else {
			    sb.append("select").append(SELECT_HINT).append(" ");
			}
			String realColumnName = getLocalTableAliasName() + "." + columnName;
			sb.append(realColumnName).append(" as ").append(columnName);
			_selectClauseRealColumnAliasMap.put(realColumnName, columnName);
		}
		if (_isIncludedSelectColumnEffective && !_includedSelectColumnMap.isEmpty()) {
		    sb.append(getIncludedSelectColumnClause());
		}

        // [DBFlute-0.7.4]
        if (_specifiedDeriveSubQueryMap != null && !_specifiedDeriveSubQueryMap.isEmpty()) {
            Collection<String> deriveSubQuerySet = _specifiedDeriveSubQueryMap.values();
            foreach (String deriveSubQuery in deriveSubQuerySet) {
                if (isFormatClauseEffective()) {
                    sb.append(getLineSeparator()).append("     ");
                }
                sb.append(", ").append(deriveSubQuery);
            }
        }

		return sb.toString();
	}
	
    public String getSelectHint() {
        return createSelectHint();
    }

    public String getIncludedSelectColumnClause() {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (Iterator<String> ite = _includedSelectColumnMap.keySet().iterator(); ite.hasNext(); count++) {
            String aliasName = ite.next();
            String realColumnName = (String)_includedSelectColumnMap.get(aliasName);
            sb.append(", ").append(realColumnName).append(" as ").append(aliasName);
			_selectClauseRealColumnAliasMap.put(realColumnName, aliasName);
        }
        return sb.toString();
    }

    public String getFromClause() {
        StringBuilder sb = new StringBuilder();
        if (isFormatClauseEffective()) {
            sb.append(getLineSeparator()).append("  ");
        }
        sb.append("from ");
        if (_baseTableInlineWhereList.isEmpty()) {
            sb.append(_tableName).append(" dflocal");
        } else {
            sb.append(getInlineViewClause(_tableName, _baseTableInlineWhereList)).append(" dflocal");
        }
        sb.append(getFromBaseTableHint());
        sb.append(getLeftOuterJoinClause());
        return sb.toString();
    }

    protected String getLeftOuterJoinClause() {
        StringBuilder sb = new StringBuilder();
        for (Iterator<String> ite = _outerJoinMap.keySet().iterator(); ite.hasNext(); ) {
            String aliasName = ite.next();
            LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap.get(aliasName);
            String joinTableName = joinInfo.getJoinTableName();
            List<String> inlineWhereClauseList = joinInfo.getInlineWhereClauseList();
            List<String> additionalOnClauseList = joinInfo.getAdditionalOnClauseList();
            Map<String, String> joinOnMap = joinInfo.getJoinOnMap();
            assertJoinOnMapNotEmpty(joinOnMap, aliasName);

            if (isFormatClauseEffective()) {
                sb.append(getLineSeparator()).append("   ");
            }
            sb.append(" left outer join ");
            if (inlineWhereClauseList.isEmpty()) {
                sb.append(joinTableName);
            } else {
                sb.append(getInlineViewClause(joinTableName, inlineWhereClauseList));
            }
            sb.append(" ").append(aliasName).append(" on ");
            int count = 0;
            Set<String> localColumnNameSet = joinOnMap.keySet();
            foreach (String localColumnName in localColumnNameSet) {
                String foreignColumnName = (String)joinOnMap.get(localColumnName);
                if (count > 0) {
                    sb.append(" and ");
                }
                if (localColumnName.Equals("$$fixedCondition$$")) {
                    sb.append(foreignColumnName);
                } else {
                    sb.append(localColumnName).append(" = ").append(foreignColumnName);
                }
                ++count;
            }
			foreach (String additionalOnClause in additionalOnClauseList) {
			    sb.append(" and ").append(additionalOnClause);
			}
        }
        return sb.toString();
    }

    protected String getInlineViewClause(String joinTableName, List<String> inlineWhereClauseList) {
        StringBuilder sb = new StringBuilder();
        sb.append("(select * from ").append(joinTableName).append(" where ");
        int count = 0;
        for (Iterator<String> ite = inlineWhereClauseList.iterator(); ite.hasNext(); ) {
            String clauseElement = ite.next();
            // clauseElement = filterWhereClauseSimply(clauseElement); *Non Support on C#
            if (count > 0) {
                sb.append(" and ");
            }
            sb.append(clauseElement);
            ++count;
        }
        sb.append(")");
        return sb.toString();
    }

    public String getFromBaseTableHint() {
        return createFromBaseTableHint();
    }

    public String getFromHint() {
        return createFromHint();
    }

    public String getWhereClause() {
	    return buildWhereClause(false);
    }
	
	protected String buildWhereClause(bool template) {
        StringBuilder sb = new StringBuilder();
        int count = 0;
        for (Iterator<String> ite = _whereList.iterator(); ite.hasNext(); count++) {
            String clauseElement = (String)ite.next();
            // clauseElement = filterWhereClauseSimply(clauseElement); *Non Support on C#
            if (count == 0) {
                if (isFormatClauseEffective()) {
                    sb.append(getLineSeparator()).append(" ");
                }
                sb.append("where ").append(template  ? getWhereFirstConditionMark() : "").append(clauseElement);
            } else {
                if (isFormatClauseEffective()) {
                    sb.append(getLineSeparator()).append("  ");
                }
                sb.append(" and ").append(clauseElement);
            }
        }
		if (template && sb.length() == 0) {
		    sb.append(getWhereClauseMark());
		}
        return sb.toString();
    }
	
    public String getOrderByClause() {
        String orderByClause = null;
        if (!_unionQueryInfoList.isEmpty()) {
            if (_selectClauseRealColumnAliasMap == null || _selectClauseRealColumnAliasMap.isEmpty()) {
                String msg = "The selectClauseColumnAliasMap should not be null or empty when union query exists: " + toString();
                throw new IllegalStateException(msg);
            }
            orderByClause = _orderByClause.getOrderByClause(_selectClauseRealColumnAliasMap);
        } else {
            orderByClause = _orderByClause.getOrderByClause();
        }
        if (isFormatClauseEffective() && orderByClause != null && orderByClause.Trim().Length > 0) {
            return getLineSeparator() + " " + orderByClause;
        } else {
            return orderByClause;
        }
    }

    public String getSqlSuffix() {
        String sqlSuffix = createSqlSuffix();
        if (isFormatClauseEffective() && sqlSuffix != null && sqlSuffix.Trim().Length > 0) {
            return getLineSeparator() + sqlSuffix;
        } else {
            return sqlSuffix;
        }
    }

    // ===================================================================================
    //                                                                          Copy Parts
    //                                                                          ==========
    public void copyIncludedSelectColumn(${glSqlClauseInterfaceName} sqlClause) {
        Set<String> keySet = _includedSelectColumnMap.keySet();
        for (Iterator<String> ite = keySet.iterator(); ite.hasNext(); ) {
             String aliasName = ite.next();
             String realColumnName = (String)_includedSelectColumnMap.get(aliasName);
            sqlClause.registerIncludedSelectColumn(aliasName, realColumnName);
        }
    }

	// ===================================================================================
    //                                                                SelectedSelectColumn
    //                                                                ====================
    /**
     * Register selected select column.
     * 
     * @param foreignTableAliasName The alias name of foreign table. (NotNull)
	 * @param localTableName The table name of local. (NotNull)
	 * @param foreignPropertyName The property name of foreign table. (NotNull)
     * @param localRelationPath The path of local relation. (Nullable)
     */
    public void registerSelectedSelectColumn(String foreignTableAliasName
			                               , String localTableName
										   , String foreignPropertyName
										   , String localRelationPath) {
        _selectedSelectColumnMap.put(foreignTableAliasName, createSelectedSelectColumnInfo(foreignTableAliasName, localTableName, foreignPropertyName, localRelationPath));
    }
    
	protected Map<String, SelectedSelectColumnInfo> createSelectedSelectColumnInfo(String foreignTableAliasName
											                                     , String localTableName
													                             , String foreignPropertyName
													                             , String localRelationPath) {
		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(localTableName);
        ${glForeignInfoName} foreignInfo = dbmeta.FindForeignInfo(foreignPropertyName);
		int relationNo = foreignInfo.RelationNo;
		String nextRelationPath = "_" + relationNo;
        if (localRelationPath != null) {
            nextRelationPath = localRelationPath + nextRelationPath;
        }
		Map<String, SelectedSelectColumnInfo> resultMap = new LinkedHashMap<String, SelectedSelectColumnInfo>();
		${glDBMetaInterfaceName} foreignDBMeta = foreignInfo.ForeignDBMeta;
        foreach (${glColumnInfoName} columnInfo in foreignDBMeta.ColumnInfoList) {
            String columnDbName = columnInfo.ColumnDbName;
			SelectedSelectColumnInfo selectColumnInfo = new SelectedSelectColumnInfo();
			selectColumnInfo.setTableAliasName(foreignTableAliasName);
			selectColumnInfo.setColumnName(columnDbName);
			selectColumnInfo.setColumnAliasName(columnDbName + nextRelationPath);
			resultMap.put(columnDbName, selectColumnInfo);
        }
		return resultMap;
	}

    public class SelectedSelectColumnInfo {
        protected String tableAliasName;
        protected String columnName;
        protected String columnAliasName;
        public String buildRealColumnName() {
            if (tableAliasName != null) {
                return tableAliasName + "." + columnName;
            } else {
                return columnName;
            }
        }
        public String getTableAliasName() {
            return tableAliasName;
        }
        public void setTableAliasName(String tableAliasName) {
            this.tableAliasName = tableAliasName;
        }
        public String getColumnName() {
            return columnName;
        }
        public void setColumnName(String columnName) {
            this.columnName = columnName;
        }
        public String getColumnAliasName() {
            return columnAliasName;
        }
        public void setColumnAliasName(String columnAliasName) {
            this.columnAliasName = columnAliasName;
        }
    }
	
    // ===================================================================================
    //                                                                IncludedSelectColumn
    //                                                                ====================
    public void ignoreIncludedSelectColumn() {
        _isIncludedSelectColumnEffective = false;
    }

    public void makeIncludedSelectColumnEffective() {
        if (!_includedSelectColumnMap.isEmpty()) {
            _isIncludedSelectColumnEffective = true;
        }
    }

    public void registerIncludedSelectColumn(String aliasName, String realColumnName) {
        _isIncludedSelectColumnEffective = true;
        _includedSelectColumnMap.put(aliasName, realColumnName);
    }

    // ===================================================================================
    //                                                                           OuterJoin
    //                                                                           =========
    public void registerOuterJoin(String joinTableName, String aliasName, Map<String, String> joinOnMap) {
        assertAlreadyOuterJoin(aliasName);
        assertJoinOnMapNotEmpty(joinOnMap, aliasName);
         LeftOuterJoinInfo joinInfo = new LeftOuterJoinInfo();
        joinInfo.setAliasName(aliasName);
        joinInfo.setJoinTableName(joinTableName);
        joinInfo.setJoinOnMap(joinOnMap);
        _outerJoinMap.put(aliasName, joinInfo);
    }

    protected class LeftOuterJoinInfo {
        protected String _aliasName;
        protected String _joinTableName;
        protected List<String> _inlineWhereClauseList = new ArrayList<String>();
        protected List<String> _additionalOnClauseList = new ArrayList<String>();
        protected Map<String, String> _joinOnMap;
		protected bool _onClauseInline;
        public String getAliasName() {
            return _aliasName;
        }
        public void setAliasName(String value) {
            _aliasName = value;
        }
        public String getJoinTableName() {
            return _joinTableName;
        }
        public void setJoinTableName(String value) {
            _joinTableName = value;
        }
        public List<String> getInlineWhereClauseList() {
            return _inlineWhereClauseList;
        }
        public void addInlineWhereClause(String value) {
            _inlineWhereClauseList.add(value);
        }
        public List<String> getAdditionalOnClauseList() {
            return _additionalOnClauseList;
        }
        public void addAdditionalOnClause(String value) {
            _additionalOnClauseList.add(value);
        }
        public Map<String, String> getJoinOnMap() {
            return _joinOnMap;
        }
        public void setJoinOnMap(Map<String, String> value) {
            _joinOnMap = value;
        }
        public bool isOnClauseInline() {
            return _onClauseInline;
        }
        public void setOnClauseInline(bool value) {
            _onClauseInline = value;
        }
    }

    protected void assertAlreadyOuterJoin(String aliasName) {
        if (_outerJoinMap.containsKey(aliasName)) {
            String msg = "The alias name have already registered in outer join: " + aliasName;
            throw new IllegalStateException(msg);
        }
    }

    protected void assertJoinOnMapNotEmpty(Map<String, String> joinOnMap, String aliasName) {
        if (joinOnMap.isEmpty()) {
            String msg = "The joinOnMap should not be empty: aliasName=" + aliasName;
            throw new IllegalStateException(msg);
        }
    }

    // ===================================================================================
    //                                                                               Where
    //                                                                               =====
    public void registerWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value) {
        assertStringNotNullAndNotTrimmedEmpty("columnFullName", columnFullName);
        key.addWhereClause(_whereList, columnFullName, value);
        arrangeWhereListAdditionalConditionAsOr(_whereList);
    }

    public void registerWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option) {
        assertStringNotNullAndNotTrimmedEmpty("columnFullName", columnFullName);
        assertObjectNotNull("option of " + columnFullName, option);
        key.addWhereClause(_whereList, columnFullName, value, option);
        arrangeWhereListAdditionalConditionAsOr(_whereList);
    }

    public void registerWhereClause(String clause) {
        assertStringNotNullAndNotTrimmedEmpty("clause", clause);
        _whereList.add(clause);
        arrangeWhereListAdditionalConditionAsOr(_whereList);
    }

    public void exchangeFirstWhereClauseForLastOne() {
        if (_whereList.size() > 1) {
             String first = (String)_whereList.get(0);
             String last = (String)_whereList.get(_whereList.size() - 1);
            _whereList.set(0, last);
            _whereList.set(_whereList.size() - 1, first);
        }
    }

    // ===================================================================================
    //                                                                         InlineWhere
    //                                                                         ===========
    public void registerBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value) {
        assertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
        key.addWhereClause(_baseTableInlineWhereList, columnName, value);
        arrangeWhereListAdditionalConditionAsOr(_baseTableInlineWhereList);
    }

    public void registerBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option) {
        assertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
        assertObjectNotNull("option of " + columnName, option);
        key.addWhereClause(_baseTableInlineWhereList, columnName, value, option);
        arrangeWhereListAdditionalConditionAsOr(_baseTableInlineWhereList);
    }

    public void registerBaseTableInlineWhereClause(String value) {
        _baseTableInlineWhereList.add(value);
    }

    public void registerOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, bool onClauseInline) {
        assertNotYetOuterJoin(aliasName);
        assertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
         LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap.get(aliasName);
		if (onClauseInline) {
            key.addWhereClause(joinInfo.getAdditionalOnClauseList(), aliasName + "." + columnName, value);
		} else {
            key.addWhereClause(joinInfo.getInlineWhereClauseList(), columnName, value);
		}
        arrangeWhereListAdditionalConditionAsOr(joinInfo.getInlineWhereClauseList());
    }

    public void registerOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option, bool onClauseInline) {
        assertNotYetOuterJoin(aliasName);
        assertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
         LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap.get(aliasName);
		if (onClauseInline) {
            key.addWhereClause(joinInfo.getAdditionalOnClauseList(), aliasName + "." + columnName, value, option);
            arrangeWhereListAdditionalConditionAsOr(joinInfo.getAdditionalOnClauseList());
		} else {
            key.addWhereClause(joinInfo.getInlineWhereClauseList(), columnName, value, option);
            arrangeWhereListAdditionalConditionAsOr(joinInfo.getInlineWhereClauseList());
		}
    }

    public void registerOuterJoinInlineWhereClause(String aliasName, String value, bool onClauseInline) {
        assertNotYetOuterJoin(aliasName);
         LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap.get(aliasName);
		if (onClauseInline) {
            joinInfo.addAdditionalOnClause(value);
            arrangeWhereListAdditionalConditionAsOr(joinInfo.getAdditionalOnClauseList());
		} else {
		    joinInfo.addInlineWhereClause(value);
            arrangeWhereListAdditionalConditionAsOr(joinInfo.getInlineWhereClauseList());
		}
    }

    protected void assertNotYetOuterJoin(String aliasName) {
        if (!_outerJoinMap.containsKey(aliasName)) {
            String msg = "The alias name have not registered in outer join yet: " + aliasName;
            throw new IllegalStateException(msg);
        }
    }

    // ===================================================================================
    //                                                             AdditionalConditionAsOr
    //                                                             =======================
    public void makeAdditionalConditionAsOrEffective() {
        _isAdditionalConditionAsOrEffective = true;
    }

    public void ignoreAdditionalConditionAsOr() {
        _isAdditionalConditionAsOrEffective = false;
    }

    protected void arrangeWhereListAdditionalConditionAsOr(List<String> whereList) {
        if (_isAdditionalConditionAsOrEffective) {
            if (whereList.size() < 2) {
                String msg = "The whereList should have two more elements when the isAdditionalConditionAsOrEffective is true: " + toString();
                throw new IllegalStateException(msg);
            }
             String lastWhereClause = (String)whereList.remove(whereList.size() - 1);
             String preWhereClause = (String)whereList.remove(whereList.size() - 1);
            if (preWhereClause.StartsWith("(") && preWhereClause.EndsWith(")")) {
                String plainClause = preWhereClause.Substring("(".Length, preWhereClause.Length - ")".Length);
                whereList.add("(" + plainClause + " or " + lastWhereClause + ")");
            } else {
                whereList.add("(" + preWhereClause + " or " + lastWhereClause + ")");
            }
        }
    }

    // ===================================================================================
    //                                                                             OrderBy
    //                                                                             =======
    public ${glOrderByClauseName} getSqlComponentOfOrderByClause() {
        return _orderByClause;
    }

    public ${glSqlClauseInterfaceName} clearOrderBy() {
        _isOrderByEffective = false;
        _orderByClause.clear();
        return this;
    }

    public ${glSqlClauseInterfaceName} ignoreOrderBy() {
        _isOrderByEffective = false;
        return this;
    }

    public ${glSqlClauseInterfaceName} makeOrderByEffective() {
        if (!_orderByClause.isEmpty()) {
            _isOrderByEffective = true;
        }
        return this;
    }

    public void reverseOrderBy_Or_OverrideOrderBy(String orderByProperty, String registeredOrderByProperty, bool ascOrDesc) {
        _isOrderByEffective = true;
        if (!_orderByClause.isSameOrderByColumn(orderByProperty)) {
            clearOrderBy();
            registerOrderBy(orderByProperty, registeredOrderByProperty, ascOrDesc);
        } else {
            _orderByClause.reverseAll();
        }
    }

    public void registerOrderBy(String orderByProperty, String registeredOrderByProperty, bool ascOrDesc) {
        try {
            _isOrderByEffective = true;
            List<String> orderByList = new ArrayList<String>();
            {
                String[] splitArray = orderByProperty.Split('/');
				foreach (String element in splitArray) {
                    orderByList.add(element);
                }
            }

            if (registeredOrderByProperty == null || registeredOrderByProperty.Trim().Length ==0) {
                registeredOrderByProperty = orderByProperty;
            }

            List<String> registeredOrderByList = new ArrayList<String>();
            {
			    String[] splitArray = registeredOrderByProperty.Split('/');
				foreach (String element in splitArray) {
                    registeredOrderByList.add(element);
                }
            }

            int count = 0;
            for (Iterator<String> ite = orderByList.iterator(); ite.hasNext(); ) {
                String orderBy = ite.next();
                String registeredOrderBy = (String)registeredOrderByList.get(count);

                _isOrderByEffective = true;
                String aliasName = null;
                String columnName = null;
                String registeredAliasName = null;
                String registeredColumnName = null;

                if (orderBy.IndexOf(".") < 0) {
                    columnName = orderBy;
                } else {
                    aliasName = orderBy.Substring(0, orderBy.LastIndexOf("."));
                    columnName = orderBy.Substring(orderBy.LastIndexOf(".") + 1);
                }

                if (registeredOrderBy.IndexOf(".") < 0) {
                    registeredColumnName = registeredOrderBy;
                } else {
                    registeredAliasName = registeredOrderBy.Substring(0, registeredOrderBy.LastIndexOf("."));
                    registeredColumnName = registeredOrderBy.Substring(registeredOrderBy.LastIndexOf(".") + 1);
                }

                ${glOrderByElementName} element = new ${glOrderByElementName}();
                element.setAliasName(aliasName);
                element.setColumnName(columnName);
                element.setRegisteredAliasName(registeredAliasName);
                element.setRegisteredColumnName(registeredColumnName);
                if (ascOrDesc) {
                    element.setupAsc();
                } else {
                    element.setupDesc();
                }
                _orderByClause.addOrderByElement(element);

                count++;
            }
        } catch (RuntimeException e) {
            String msg = "registerOrderBy() threw the exception: orderByProperty=" + orderByProperty;
            msg = msg + " registeredColumnFullName=" + registeredOrderByProperty;
            msg = msg + " ascOrDesc=" + ascOrDesc;
            msg = msg + " sqlClause=" + this.ToString();
            throw new RuntimeException(msg, e);
        }
    }
	
	public virtual void addNullsFirstToPreviousOrderBy() {
	    _orderByClause.addNullsFirstToPreviousOrderByElement(createOrderByNullsSetupper());
	}
	
	public virtual void addNullsLastToPreviousOrderBy() {
	    _orderByClause.addNullsLastToPreviousOrderByElement(createOrderByNullsSetupper());
	}
	
	protected virtual OrderByNullsSetupper createOrderByNullsSetupper() {// As Default
	    return new OrderByNullsSetupperBySupported();
	}
	
	protected class OrderByNullsSetupperBySupported : OrderByNullsSetupper {
	    public String setup(String columnName, String orderByElementClause, bool nullsFirst) {
		    return orderByElementClause + " nulls " + (nullsFirst ? "first" : "last");
		}
	}
	
	protected virtual OrderByNullsSetupper createOrderByNullsSetupperByCaseWhen() {// Helper For Nulls Unsupported Database
	    return new OrderByNullsSetupperByCaseWhen();
	}

	protected class OrderByNullsSetupperByCaseWhen : OrderByNullsSetupper {
	    public String setup(String columnName, String orderByElementClause, bool nullsFirst) {
    	    String thenNumber = nullsFirst ? "1" : "0";
    	    String elseNumber = nullsFirst ? "0" : "1";
    	    String caseWhen = "case when " + columnName + " is not null then " + thenNumber + " else " + elseNumber + " end asc";
			return caseWhen + ", " + orderByElementClause;
		}
	}

    // ===================================================================================
    //                                                                          UnionQuery
    //                                                                          ==========
    public void registerUnionQuery(String unionQueryClause, bool unionAll) {
        assertStringNotNullAndNotTrimmedEmpty("unionQueryClause", unionQueryClause);
         UnionQueryInfo unionQueryInfo = new UnionQueryInfo();
        unionQueryInfo.setUnionQueryClause(unionQueryClause);
        unionQueryInfo.setUnionAll(unionAll);
        _unionQueryInfoList.add(unionQueryInfo);
    }

    protected class UnionQueryInfo {
        protected String _unionQueryClause;
        protected bool _unionAll;
        public String getUnionQueryClause() {
            return _unionQueryClause;
        }
        public void setUnionQueryClause(String unionQueryClause) {
            _unionQueryClause = unionQueryClause;
        }
        public bool isUnionAll() {
            return _unionAll;
        }
        public void setUnionAll(bool unionAll) {
            _unionAll = unionAll;
        }
    }

    // ===================================================================================
    //                                                                             Advance
    //                                                                             =======
    /**
     * @param fetchSize Fetch-size. (NotMinus & NotZero)
     * @return this. (NotNull)
     */
    public ${glSqlClauseInterfaceName} fetchFirst(int fetchSize) {
        _isFetchScopeEffective = true;
        if (fetchSize <= 0) {
            String msg = "Argument[fetchSize] must be plus: " + fetchSize;
            throw new IllegalArgumentException(msg);
        }
        _fetchStartIndex = 0;
        _fetchSize = fetchSize;
        _fetchPageNumber = 1;
        doClearFetchPageClause();
        doFetchFirst();
        return this;
    }

    /**
     * @param fetchStartIndex Fetch-start-index. 0 origin. (NotMinus)
     * @param fetchSize Fetch size. (NotMinus)
     * @return this. (NotNull)
     */
    public ${glSqlClauseInterfaceName} fetchScope(int fetchStartIndex, int fetchSize) {
        _isFetchScopeEffective = true;
        if (fetchStartIndex < 0) {
            String msg = "Argument[fetchStartIndex] must be plus or zero: " + fetchStartIndex;
            throw new IllegalArgumentException(msg);
        }
        if (fetchSize <= 0) {
            String msg = "Argument[fetchSize] must be plus: " + fetchSize;
            throw new IllegalArgumentException(msg);
        }
        _fetchStartIndex = fetchStartIndex;
        _fetchSize = fetchSize;
        return fetchPage(1);
    }

    /**
     * @param fetchPageNumber Page-number. 1 origin. (NotMinus & NotZero: If minus or zero, set one.)
     * @return this. (NotNull)
     */
    public ${glSqlClauseInterfaceName} fetchPage(int fetchPageNumber) {
        _isFetchScopeEffective = true;
        if (fetchPageNumber <= 0) {
            fetchPageNumber = 1;
        }
        if (_fetchSize <= 0) {
            String msg = "Fetch size should not be minus or zero!" + getLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + getLineSeparator();
            msg = msg + "Look! Read the message below." + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Advice]" + getLineSeparator();
            msg = msg + "When you invoke this method, it is necessary to invoke 'FetchFirst()' or 'FetchScope()' ahead of that. " + getLineSeparator();
            msg = msg + "Please confirm your program. Does it really invoke 'FetchPage()' with 'FetchFirst()' or 'FetchScope()'?" + getLineSeparator();
            msg = msg + "  For example:" + getLineSeparator();
            msg = msg + "    before (x):" + getLineSeparator();
            msg = msg + "      XxxCB cb = new XxxCB();" + getLineSeparator();
            msg = msg + "      cb.FetchPage(3);" + getLineSeparator();
            msg = msg + "    after  (o):" + getLineSeparator();
            msg = msg + "      XxxCB cb = new XxxCB();" + getLineSeparator();
            msg = msg + "      cb.FetchFirst(20); // The size of page" + getLineSeparator();
            msg = msg + "      cb.FetchPage(3);   // The number of target page" + getLineSeparator();
            msg = msg + getLineSeparator();
            msg = msg + "[Actual Parameter Value]" + getLineSeparator();
            msg = msg + "fetchSize=" + _fetchSize + getLineSeparator();
            msg = msg + "fetchPageNumber=" + fetchPageNumber + getLineSeparator();
            msg = msg + "* * * * * * * * * */" + getLineSeparator();
            throw new IllegalStateException(msg);
        }
        _fetchPageNumber = fetchPageNumber;
        if (_fetchPageNumber == 1 && _fetchStartIndex == 0) {
            return fetchFirst(_fetchSize);
        }
        doClearFetchPageClause();
        doFetchPage();
        return this;
    }

    abstract protected void doFetchFirst();
    abstract protected void doFetchPage();
    abstract protected void doClearFetchPageClause();

    public virtual int getFetchStartIndex() {
        return _fetchStartIndex;
    }

    public virtual int getFetchSize() {
        return _fetchSize;
    }

    public virtual int getFetchPageNumber() {
        return _fetchPageNumber;
    }

    /**
     * @return Page start index. 0 origin. (NotMinus)
     */
    public virtual int getPageStartIndex() {
        if (_fetchPageNumber <= 0) {
            String msg = "_fetchPageNumber must be plus: " + _fetchPageNumber;
            throw new IllegalStateException(msg);
        }
        return _fetchStartIndex + (_fetchSize * (_fetchPageNumber - 1));
    }

    /**
     * @return Page end index. 0 origin. (NotMinus)
     */
    public virtual int getPageEndIndex() {
        if (_fetchPageNumber <= 0) {
            String msg = "_fetchPageNumber must be plus: " + _fetchPageNumber;
            throw new IllegalStateException(msg);
        }
        return _fetchStartIndex + (_fetchSize * _fetchPageNumber);
    }

    public virtual bool isFetchScopeEffective() {
        return _isFetchScopeEffective;
    }

    public virtual ${glSqlClauseInterfaceName} ignoreFetchScope() {
        _isFetchScopeEffective = false;
        doClearFetchPageClause();
        return this;
    }

    public virtual ${glSqlClauseInterfaceName} makeFetchScopeEffective() {
        if (getFetchSize() > 0 && getFetchPageNumber() > 0) {
            fetchPage(getFetchPageNumber());
        }
        return this;
    }
	
    public virtual bool isFetchStartIndexSupported() {
        return true; // Default
    }

    public virtual bool isFetchSizeSupported() {
        return true; // Default
    }

    abstract protected String createSelectHint();
    abstract protected String createFromBaseTableHint();
    abstract protected String createFromHint();
    abstract protected String createSqlSuffix();

    // ===================================================================================
    //                                                                     Fetch Narrowing
    //                                                                     ===============
    public virtual int getFetchNarrowingSkipStartIndex() {
        return getPageStartIndex();
    }

    public virtual int getFetchNarrowingLoopCount() {
        return getFetchSize();
    }

    public virtual bool isFetchNarrowingEffective() {
        return _isFetchScopeEffective;
    }

	// ===================================================================================
    //                                                                                Lock
    //                                                                                ====
	public abstract ${glSqlClauseInterfaceName} lockForUpdate();
	
    // ===================================================================================
    //                                                                            Resolver
    //                                                                            ========
    public String resolveJoinAliasName(String relationPath, int cqNestNo) {
        return resolveNestLevelExpression("dfrelation" + relationPath, cqNestNo);
    }

    public String resolveNestLevelExpression(String name, int cqNestNo) {
        // if (cqNestNo > 1) {
        //     return name + "_n" + cqNestNo;
        // } else {
        //     return name;
        // }
		return name;
    }

    public int resolveRelationNo(String localTableName, String foreignPropertyName) {
         ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(localTableName);
         ${glForeignInfoName} foreignInfo = dbmeta.FindForeignInfo(foreignPropertyName);
        return foreignInfo.RelationNo;
    }

	// ===================================================================================
    //                                                                    Table Alias Info
    //                                                                    ================
	public String getLocalTableAliasName() {
	    return "dflocal";
	}
	
	public String getForeignTableAliasPrefix() {
	    return "dfrelation";
	}

	// ===================================================================================
    //                                                                       Template Mark
    //                                                                       =============
	public String getWhereClauseMark() {
	    return "#df:whereClause#";
	}
	
	public String getWhereFirstConditionMark() {
	    return "#df:whereFirstCondition#";
	}
	
	public String getUnionSelectClauseMark() {
	    return "#df:unionSelectClause#";
	}
	
	public String getUnionWhereClauseMark() {
	    return "#df:unionWhereClause#";
	}
	
	public String getUnionWhereFirstConditionMark() {
	    return "#df:unionWhereFirstCondition#";
	}
	
//    // =====================================================================================
//    //                                                            Where Clause Simple Filter
//    //                                                            ==========================
//    public void addWhereClauseSimpleFilter(${glWhereClauseSimpleFilterInterfaceName} whereClauseSimpleFilter) {
//		if (_whereClauseSimpleFilterList == null) {
//		    _whereClauseSimpleFilterList = new ArrayList<${glWhereClauseSimpleFilterInterfaceName}>();
//		}
//        _whereClauseSimpleFilterList.add(whereClauseSimpleFilter);
//    }
//
//    protected String filterWhereClauseSimply(String clauseElement) {
//        if (_whereClauseSimpleFilterList == null || _whereClauseSimpleFilterList.isEmpty()) {
//            return clauseElement;
//        }
//        for (Iterator<${glWhereClauseSimpleFilterInterfaceName}> ite = _whereClauseSimpleFilterList.iterator(); ite.hasNext(); ) {
//             ${glWhereClauseSimpleFilterInterfaceName} filter = ite.next();
//            if (filter == null) {
//                String msg = "The list of filter should not have null: _whereClauseSimpleFilterList=" + _whereClauseSimpleFilterList;
//                throw new IllegalStateException(msg);
//            }
//            clauseElement = filter.filterClauseElement(clauseElement);
//        }
//        return clauseElement;
//    }
	
    // =====================================================================================
    //                                                                 Selected Foreign Info
    //                                                                 =====================
	public bool isSelectedForeignInfoEmpty() {
		if (_selectedForeignInfo == null) {
		    return true;
		}
        return _selectedForeignInfo.isEmpty();
	}

	public bool hasSelectedForeignInfo(String relationPath) {
		if (_selectedForeignInfo == null) {
		    return false;
		}
	    return _selectedForeignInfo.containsKey(relationPath);
	}

	public void registerSelectedForeignInfo(String relationPath, String foreignPropertyName) {
		if (_selectedForeignInfo == null) {
		    _selectedForeignInfo = new HashMap<String, String>();
		}
		_selectedForeignInfo.put(relationPath, foreignPropertyName);
	}
    
    // ===================================================================================
    //                                                                       Format Clause
    //                                                                       =============
    public bool isFormatClauseEffective() {
        return _formatClause;
    }

    public void makeFormatClauseEffective() {
        _formatClause = true;
    }

    // ===================================================================================
    //                                                                    Sub Query Indent
    //                                                                    ================
    public String resolveSubQueryBeginMark(String subQueryIdentity) {
        return getSubQueryBeginMarkPrefix() + subQueryIdentity + getSubQueryIdentityTerminal();
    }

    public String resolveSubQueryEndMark(String subQueryIdentity) {
        return getSubQueryEndMarkPrefix() + subQueryIdentity + getSubQueryIdentityTerminal();
    }

    protected String getSubQueryBeginMarkPrefix() {
        return "--df:SubQueryBegin#";
    }

    protected String getSubQueryEndMarkPrefix() {
        return "--df:SubQueryEnd#";
    }
    
    protected String getSubQueryIdentityTerminal() {
        return "#IdentityTerminal#";
    }

    public String filterSubQueryIndent(String sql) {
        return isFormatClauseEffective() ? filterSubQueryIndent(sql, "") : sql;
    }

    protected String filterSubQueryIndent(String sql, String preIndent) {
        if (!isFormatClauseEffective()) {
            return sql;
        }
        String lineSeparator = getLineSeparator();
        if (!sql.Contains(getSubQueryBeginMarkPrefix())) {
            return sql;
        }
        String[] lines = sql.Split(lineSeparator.ToCharArray());// *Attension about difference between Language!
        String beginMarkPrefix = getSubQueryBeginMarkPrefix();
        String endMarkPrefix = getSubQueryEndMarkPrefix();
        String identityTerminal = getSubQueryIdentityTerminal();
        int terminalLength = identityTerminal.Length;
        StringBuilder mainSb = new StringBuilder();
        StringBuilder subSb = null;
        bool throughBegin = false;
        bool throughBeginFirst = false;
        String subQueryIdentity = null;
        String indent = null;
        foreach (String line in lines) {
            if (!throughBegin) {
                if (line.Contains(beginMarkPrefix)) {
                    throughBegin = true;
                    subSb = new StringBuilder();
                    int markIndex = line.IndexOf(beginMarkPrefix);
                    int terminalIndex = line.IndexOf(identityTerminal);
                    if (terminalIndex < 0) {
                        String msg = "Identity terminal was Not Found at the begin line: [" + line + "]";
                        throw new SubQueryIndentFailureException(msg);
                    }
                    String clause = line.Substring(0, markIndex) + line.Substring(terminalIndex + terminalLength);
                    subQueryIdentity = line.Substring(markIndex + beginMarkPrefix.Length, terminalIndex - (markIndex + beginMarkPrefix.Length));// *Attension about difference between Language!
                    subSb.append(clause);
                    indent = buildSpaceBar(markIndex - preIndent.Length);
                } else {
                    mainSb.append(line).append(getLineSeparator());
                }
            } else {
                // - - - - - - - -
                // In begin to end
                // - - - - - - - -
                if (line.Contains(endMarkPrefix + subQueryIdentity)) {// The end
                    int markIndex = line.IndexOf(endMarkPrefix);
                    int terminalIndex = line.IndexOf(identityTerminal);
                    if (terminalIndex < 0) {
                        String msg = "Identity terminal was Not Found at the begin line: [" + line + "]";
                        throw new SubQueryIndentFailureException(msg);
                    }
                    String clause = line.Substring(0, markIndex) + line.Substring(terminalIndex + terminalLength);
                    subSb.append(clause).append(getLineSeparator());
                    String currentSql = filterSubQueryIndent(subSb.toString(), preIndent + indent);
                    mainSb.append(currentSql);
                    throughBegin = false;
                    throughBeginFirst = false;
                } else {
                    if (!throughBeginFirst) {
                        subSb.append(line.Trim()).append(getLineSeparator());
                        throughBeginFirst = true;
                    } else {
                        subSb.append(indent).append(line).append(getLineSeparator());
                    }
                }
            }
        }
        String filteredSql = mainSb.toString();
        
        if (throughBegin) {
            String msg = "End Mark Not Found!";
            msg = msg + getLineSeparator() + "[Current SubQueryIdentity]" + getLineSeparator();
            msg = msg + subQueryIdentity + getLineSeparator();
            msg = msg + getLineSeparator() + "[Before Filter]" + getLineSeparator();
            msg = msg + sql + getLineSeparator();
            msg = msg + getLineSeparator() + "[After Filter]" + getLineSeparator() + filteredSql;
            throw new SubQueryIndentFailureException(msg);
        }
        if (filteredSql.Contains(beginMarkPrefix)) {
            String msg = "Any begin marks are not filtered!";
            msg = msg + getLineSeparator() + "[Current SubQueryIdentity]" + getLineSeparator();
            msg = msg + subQueryIdentity + getLineSeparator();
            msg = msg + getLineSeparator() + "[Before Filter]" + getLineSeparator();
            msg = msg + sql + getLineSeparator();
            msg = msg + getLineSeparator() + "[After Filter]" + getLineSeparator() + filteredSql;
            throw new SubQueryIndentFailureException(msg);
        }
        return filteredSql;
    }
    
    protected String buildSpaceBar(int size) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < size; i++) {
            sb.append(" ");
        }
        return sb.toString();
    }
    
    public class SubQueryIndentFailureException : RuntimeException {
        public SubQueryIndentFailureException(String msg) : base(msg) {
        }
    }

    // ===================================================================================
    //                                                                       Specification
    //                                                                       =============
    public void specifySelectColumn(String tableAliasName, String columnName) {
        if (_specifiedSelectColumnMap == null) {
            _specifiedSelectColumnMap = new HashMap<String, Map<String, String>>();
        }
        if (!_specifiedSelectColumnMap.containsKey(tableAliasName)) {
            _specifiedSelectColumnMap.put(tableAliasName, new HashMap<String, String>());
        }
        Map<String, String> elementMap = _specifiedSelectColumnMap.get(tableAliasName);
        elementMap.put(columnName, null); // The value is dummy for extension at the future.
        _specifiedSelectColumnMap.put(tableAliasName, elementMap);
    }

    public void specifyDeriveSubQuery(String aliasName, String deriveSubQuery) {
        if (_specifiedDeriveSubQueryMap == null) {
            _specifiedDeriveSubQueryMap = new LinkedHashMap<String, String>();
        }
        _specifiedDeriveSubQueryMap.put(aliasName, deriveSubQuery);
    }

    public bool hasSpecifiedDeriveSubQuery(String aliasName) {
        if (_specifiedDeriveSubQueryMap == null) { return false; }
        return _specifiedDeriveSubQueryMap.containsKey(aliasName);
    }

    public String getSpecifiedColumnNameAsOne() {
        if (_specifiedSelectColumnMap != null && _specifiedSelectColumnMap.size() == 1) {
            Map<String, String> elementMap = _specifiedSelectColumnMap.get(_specifiedSelectColumnMap.keySet().iterator().next());
            if (elementMap != null && elementMap.size() == 1) {
                return elementMap.keySet().iterator().next();
            }
        }
        return null;
    }

    public void clearSpecifiedSelectColumn() {
        if (_specifiedSelectColumnMap != null) { _specifiedSelectColumnMap.clear(); _specifiedSelectColumnMap = null; }
    }

    // [DBFlute-0.7.9]
    // ===================================================================================
    //                                                                        Query Update
    //                                                                        ============
    public String getClauseQueryUpdate(Map<String, String> columnParameterMap) {
        if (columnParameterMap.isEmpty()) {
            return null;
        }
        String aliasName = getLocalTableAliasName();
        ${glDBMetaInterfaceName} dbmeta = findDBMeta();
        if (dbmeta.HasTwoOrMorePrimaryKeys) {
            String msg = "The target table of queryUpdate() should have only one primary key:";
            msg = msg + " primaryKeys=" + toStringView(dbmeta.PrimaryUniqueInfo.UniqueColumnList);
            throw new IllegalStateException(msg);
        }
        String primaryKeyName = dbmeta.PrimaryUniqueInfo.FirstColumn.ColumnDbName;
        String selectClause = "select " + aliasName + "." + primaryKeyName;
        String fromWhereClause = getClauseFromWhereWithUnionTemplate();

        // Replace template marks. These are very important!
        fromWhereClause = replaceString(fromWhereClause, getUnionSelectClauseMark(), selectClause);
        fromWhereClause = replaceString(fromWhereClause, getUnionWhereClauseMark(), "");
        fromWhereClause = replaceString(fromWhereClause, getUnionWhereFirstConditionMark(), "");

        StringBuilder sb = new StringBuilder();
        String ln = "";
        if (isFormatClauseEffective()) {
            ln = getLineSeparator();
        }
        sb.append("update ").append(_tableName).append(ln);
        int index = 0;
        // It is guaranteed that the map has one or more elements.
        foreach (String columnName in columnParameterMap.keySet()) {
            String parameter = columnParameterMap.get(columnName); 
            if (index == 0) {
                sb.append("   set ").append(columnName).append(" = ").append(parameter).append(ln);
            } else {
                sb.append("     , ").append(columnName).append(" = ").append(parameter).append(ln);
            }
            ++index;
        }
        if (isUpdateSubQueryUseLocalTableSupported()) {
            String subQuery = filterSubQueryIndent(selectClause + " " + fromWhereClause);
            sb.append(" where ").append(primaryKeyName);
            sb.append(" in (").append(ln).append(subQuery).append(ln).append(")");
            return sb.toString();
        } else {
            String subQuery = filterSubQueryIndent(fromWhereClause);
            subQuery = replaceString(subQuery, aliasName + ".", "");
            subQuery = replaceString(subQuery, " " + aliasName + " ", " ");
            subQuery = subQuery.Substring(subQuery.IndexOf("where "));
            sb.append(" ").append(subQuery);
            return sb.toString();
        }
    }

    public String getClauseQueryDelete() {
        String aliasName = getLocalTableAliasName();
        ${glDBMetaInterfaceName} dbmeta = findDBMeta();
        if (dbmeta.HasTwoOrMorePrimaryKeys) {
            String msg = "The target table of queryDelete() should have only one primary key:";
            msg = msg + " primaryKeys=" + toStringView(dbmeta.PrimaryUniqueInfo.UniqueColumnList);
            throw new IllegalStateException(msg);
        }
        String primaryKeyName = dbmeta.PrimaryUniqueInfo.FirstColumn.ColumnDbName;
        String selectClause = "select " + aliasName + "." + primaryKeyName;
        String fromWhereClause = getClauseFromWhereWithUnionTemplate();
        
        // Replace template marks. These are very important!
        fromWhereClause = replaceString(fromWhereClause, getUnionSelectClauseMark(), selectClause);
        fromWhereClause = replaceString(fromWhereClause, getUnionWhereClauseMark(), "");
        fromWhereClause = replaceString(fromWhereClause, getUnionWhereFirstConditionMark(), "");
        
        if (isUpdateSubQueryUseLocalTableSupported()) {
            String subQuery = filterSubQueryIndent(selectClause + " " + fromWhereClause);
            StringBuilder sb = new StringBuilder();
            String ln = "";
            if (isFormatClauseEffective()) {
                ln = getLineSeparator();
            }
            sb.append("delete from ").append(_tableName).append(ln);
            sb.append(" where ").append(primaryKeyName);
            sb.append(" in (").append(ln).append(subQuery).append(ln).append(")");
            return sb.toString();
        } else {
            String subQuery = filterSubQueryIndent(fromWhereClause);
            subQuery = replaceString(subQuery, aliasName + ".", "");
            subQuery = replaceString(subQuery, " " + aliasName + " ", " ");
            subQuery = subQuery.Substring(subQuery.IndexOf("from "));
            return "delete " + subQuery;
        }
    }

    protected virtual bool isUpdateSubQueryUseLocalTableSupported() {
        return true;
    }
    
    // [DBFlute-0.7.9]
    // ===================================================================================
    //                                                                       Assist Helper
    //                                                                       =============
    protected ${glDBMetaInterfaceName} findDBMeta() {
        return ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableName); 
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected String replaceString(String text, String fromText, String toText) {
	    return ${glSimpleStringUtil}.Replace(text, fromText, toText);
    }
	
    protected String getLineSeparator() {
        return ${glSimpleSystemUtil}.GetLineSeparator();
    }

    protected String toStringView(Object obj) {
	    return ${glTraceViewUtilName}.ToStringView(obj);
    }
    
    // -----------------------------------------------------
    //                                         Assert Object
    //                                         -------------
    protected void assertObjectNotNull(String variableName, Object value) {
	    ${glSimpleAssertUtil}.AssertObjectNotNull(variableName, value);
    }

    // -----------------------------------------------------
    //                                         Assert String
    //                                         -------------
    protected void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
	    ${glSimpleAssertUtil}.AssertStringNotNullAndNotTrimmedEmpty(variableName, value);
    }
	
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
	public String toString() {
	    return ToString();
	}
}

}
