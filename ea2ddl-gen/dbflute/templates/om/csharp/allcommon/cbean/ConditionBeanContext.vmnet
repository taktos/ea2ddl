
using System;
using System.Collections;
using System.Reflection;
using System.Text;
using System.Threading;

using ${glPackageBaseCommonS2DaoInternalSqlParser};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonCBean} {

    public static class ${glConditionBeanContextName} {

        private static LocalDataStoreSlot _slot = Thread.AllocateDataSlot();

        public static ${glConditionBeanInterfaceName} GetConditionBeanOnThread() {
            return (${glConditionBeanInterfaceName})Thread.GetData(_slot);
        }

        public static void SetConditionBeanOnThread(${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName}) {
            if (${glAttachedCBArgsVariableName} == null) {
                String msg = "The argument[${glAttachedCBArgsVariableName}] must not be null.";
                throw new ArgumentNullException(msg);
            }
            Thread.SetData(_slot, ${glAttachedCBArgsVariableName});
        }

        public static void ClearConditionBeanOnThread() {
            Thread.SetData(_slot, null);
        }

        public static bool IsExistConditionBeanOnThread() {
            return (Thread.GetData(_slot) != null);
        }

        public static bool IsTheArgumentConditionBean(Object dtoInstance) {
            if (dtoInstance is ${glConditionBeanInterfaceName}) {
                return true;
            } else {
                return false;
            }
        }

        public static bool IsTheTypeConditionBean(Type dtoType) {
            if (typeof(${glConditionBeanInterfaceName}).IsAssignableFrom(dtoType)) {
                return true;
            } else {
                return false;
            }
        }

        // ===================================================================================
        //                                                                  Exception Handling
        //                                                                  ==================
        public static void ThrowEntityAlreadyDeletedException(Object searchKey4Log) {
            ThrowEntityAlreadyDeletedException(searchKey4Log, null);
        }

        public static void ThrowEntityAlreadyDeletedException(Object searchKey4Log, String tableDbName) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The entity was Not Found! it has already been deleted!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm the existence of your target record on your database." + GetLineSeparator();
            msg = msg + "Does the target record really created before this operation?" + GetLineSeparator();
            msg = msg + "Has the target record been deleted by other thread?" + GetLineSeparator();
            msg = msg + "It is precondition that the record exists on your database." + GetLineSeparator();
            msg = msg + GetLineSeparator();
    		if (searchKey4Log != null && searchKey4Log is ${glConditionBeanInterfaceName}) {
    		    ${glConditionBeanInterfaceName} cb = (${glConditionBeanInterfaceName})searchKey4Log;
    			String dispalySql = FilterDisplaySql(cb.ToDisplaySql(), cb.TableDbName);
    			msg = msg + "[Executed SQL for Display]" + GetLineSeparator() + dispalySql + GetLineSeparator();
    		} else {
                msg = msg + "[Search Condition]" + GetLineSeparator() + searchKey4Log + GetLineSeparator();
            }
            msg = msg + "* * * * * * * * * */" + GetLineSeparator();
            throw new ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}(msg);
        }

        public static void ThrowEntityDuplicatedException(String resultCountString, Object searchKey4Log, Exception cause) {
            ThrowEntityDuplicatedException(resultCountString, searchKey4Log, cause, null);
        }

        public static void ThrowEntityDuplicatedException(String resultCountString, Object searchKey4Log, Exception cause, String tableDbName) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The entity was Too Many! it has been duplicated. It should be the only one! But the resultCount=" + resultCountString + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm your search condition. Does it really select the only one?" + GetLineSeparator();
            msg = msg + "Please confirm your database. Does it really exist the only one?" + GetLineSeparator();
            msg = msg + GetLineSeparator();
    		if (searchKey4Log != null && searchKey4Log is ${glConditionBeanInterfaceName}) {
    		    ${glConditionBeanInterfaceName} cb = (${glConditionBeanInterfaceName})searchKey4Log;
    			String dispalySql = FilterDisplaySql(cb.ToDisplaySql(), cb.TableDbName);
    			msg = msg + "[Executed SQL for Display]" + GetLineSeparator() + dispalySql + GetLineSeparator();
    		} else {
                msg = msg + "[Search Condition]" + GetLineSeparator() + searchKey4Log + GetLineSeparator();
            }
            msg = msg + "* * * * * * * * * */" + GetLineSeparator();
            if (cause != null) {
                throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg, cause);
            } else {
                throw new ${glPackageBaseCommonException}.${glEntityDuplicatedException}(msg);
            }
        }

        private static String FilterDisplaySql(String displaySql, String tableDbName) {
            if (displaySql == null || displaySql.Trim().Length == 0) {
                return null;
            }
            if (displaySql.IndexOf(GetLineSeparator()) >= 0) {
                return displaySql;
            }
            int basePointIndex = displaySql.IndexOf(" from " + tableDbName);
            if (basePointIndex < 0) {
                return displaySql;
            }
            return displaySql.Substring(0, basePointIndex) + GetLineSeparator() + " " + displaySql.Substring(basePointIndex);
        }

    	// ===============================================================================
        //                                                                     Display SQL
        //                                                                     ===========
    	public static String ConvertConditionBean2DisplaySql(${glConditionBeanInterfaceName} cb) {
    	    String twoWaySql;
    	    if (cb.IsLimitSelect_PKOnly()) {
    		    twoWaySql = cb.SqlClause.getClausePKOnly();
    		} else {
    		    twoWaySql = cb.SqlClause.getClause();
    		}
    	    return ${glInternalSqlParser}.ConvertTwoWaySql2DisplaySql(twoWaySql, cb);
    	}
	
    	// ===============================================================================
        //                                                                  General Helper
        //                                                                  ==============
        private static String GetLineSeparator() {
            return ${glSimpleSystemUtil}.GetLineSeparator();
        }
    }
}
