
using System;
using System.Data;
using System.Data.SqlTypes;

using Seasar.Dao.Impl;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Quill.Dao.Impl;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};
using ${glPackageBaseCommonJdbc};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glS2DaoSetting} : AbstractDaoSetting {
        protected override void SetupDao(IDataSource dataSource) {
            BasicCommandFactory commandFactory = new InternalBasicCommandFactory();
            BasicDataReaderFactory dataReaderFactory = new BasicDataReaderFactory(commandFactory);
            FieldAnnotationReaderFactory annotationReaderFactory = new FieldAnnotationReaderFactory();
            _daoMetaDataFactory = new ${glS2DaoMetaDataFactoryImpl}(dataSource, commandFactory, annotationReaderFactory, dataReaderFactory);
            _daoInterceptor = new ${glS2DaoInterceptor}(_daoMetaDataFactory);
        }
    }

    public class InternalBasicCommandFactory : BasicCommandFactory {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        // ===============================================================================
        //                                                                Command Creation
        //                                                                ================
        public override IDbCommand CreateCommand(IDbConnection conn, string sql) {
            IDbCommand cmd = conn.CreateCommand();
            cmd.CommandText = ChangeSignSql(cmd, sql);
            ${glStatementConfig} defaultStatementConfig = ${glDBFluteConfig}.GetInstance().DefaultStatementConfig;
            bool internalDebug = ${glDBFluteConfig}.GetInstance().IsInternalDebug;
            ${glStatementConfig} config = FindStatementConfigOnThread();
            if (config != null && config.HasQueryTimeout()) {
                if (internalDebug) {
                    _log.Debug("...Setting statement config as request: " + config);
                }
                cmd.CommandTimeout = config.GetQueryTimeout().Value;// DBFlute original logic.
            } else if (defaultStatementConfig != null && defaultStatementConfig.HasQueryTimeout()) {
                if (internalDebug) {
                    _log.Debug("...Setting statement config as default: " + config);
                }
                cmd.CommandTimeout = defaultStatementConfig.GetQueryTimeout().Value;// DBFlute original logic.
            } else {
                if (CommandTimeout > -1) {
                    cmd.CommandTimeout = CommandTimeout;// S2Dao original logic.
                }
            }
            return cmd;
        }

        protected ${glStatementConfig} FindStatementConfigOnThread() {
            ${glStatementConfig} config = null;
            if (${glConditionBeanContextName}.IsExistConditionBeanOnThread()) {
                ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
                config = cb.StatementConfig;
            } else if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                ${glOutsideSqlContextName} context = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                config = context.StatementConfig;
            }
            return config;
        }
    }
}