
using System;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Text;

using Seasar.Framework.Exceptions;
using Seasar.Framework.Util;
using Seasar.Extension.ADO;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};
using ${glPackageBaseCommonS2DaoInternalSqlHandler};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glFetchNarrowingResultSetFactory} : IDataReaderFactory {

        public ${glFetchNarrowingResultSetFactory}() {
        }

        public IDataReader CreateDataReader(IDataSource dataSource, IDbCommand cmd) {
            IDataReader dataReader = ExecuteReader(dataSource, cmd);

            if (!${glFetchNarrowingBeanContextName}.IsExistFetchNarrowingBeanOnThread()) {
                return dataReader;// If the first argument is not condition-bean...
            }
            ${glFetchNarrowingBeanInterfaceName} cb = ${glFetchNarrowingBeanContextName}.GetFetchNarrowingBeanOnThread();
            if (!IsUseFetchNarrowingResultSetWrapper(cb)) {
                return dataReader;
            }
            ${glFetchNarrowingResultSetWrapper} wrapper = null;
            if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                wrapper = new ${glFetchNarrowingResultSetWrapper}(dataReader, cb, outsideSqlContext.IsOffsetByCursorForcedly, outsideSqlContext.IsLimitByCursorForcedly);
            } else {
                wrapper = new ${glFetchNarrowingResultSetWrapper}(dataReader, cb, false, false);
            }
            return wrapper;
        }

        protected bool IsUseFetchNarrowingResultSetWrapper(${glFetchNarrowingBeanInterfaceName} cb) {
            if (cb.SafetyMaxResultSize > 0) {
                return true;
            }
            if (!cb.IsFetchNarrowingEffective) {
                return false;// It is not necessary to control.
            }
            if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                if (outsideSqlContext.IsOffsetByCursorForcedly || outsideSqlContext.IsLimitByCursorForcedly) {
                    return true;
                }
            }
            if (cb.IsFetchNarrowingSkipStartIndexEffective || cb.IsFetchNarrowingLoopCountEffective) {
                return true;
            }
            return false;
        }

        protected IDataReader ExecuteReader(IDataSource dataSource, IDbCommand cmd) {
            return CommandUtil.ExecuteReader(dataSource, cmd);
        }
    }
}
