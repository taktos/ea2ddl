#set ($myClassName = "${glClassificationDefinition}")

using System;
using System.Collections.Generic;

namespace ${glPackageBaseCommon} {

    /// <summary>
    /// The definition class that has classification.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    public static class ${myClassName} {

        // ===============================================================================
        //                                                  Classification Code Definition
        //                                                  ==============================
#foreach ($classificationName in $database.ClassificationNameList)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
#foreach ($classificationMap in $classificationMapList)
        /// <summary>
        /// The classification code of ${classificationMap.get('name')}.
        /// ${classificationMap.get('comment')}
        /// </summary>
        public const String CODE_${classificationName}_${classificationMap.get('name')} = "$classificationMap.get('code')";

#end
#end
        // ===============================================================================
        //                                           Classification CodeNameMap Definition
        //                                           =====================================
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
        /** The classification code-name map of ${classificationName}. */
        public static readonly IDictionary<String, String> CODE_NAME_MAP_${classificationName};
        public static String Find${classificationName}Name(String code) { return FindByCode(code, CODE_NAME_MAP_${classificationName}); }

#end
#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
        /** The classification code-alias map of ${classificationName}. */
        public static readonly IDictionary<String, String> CODE_ALIAS_MAP_${classificationName};
        public static String Find${classificationName}Alias(String code) { return FindByCode(code, CODE_ALIAS_MAP_${classificationName}); }

#end
        // ===============================================================================
        //                                                              Static Initializer
        //                                                              ==================
        static ${myClassName}() {
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
            {
                IDictionary<String, String> map = new Dictionary<String, String>();
#foreach ($classificationMap in $classificationMapList)
                map.Add(CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('name')}");
#end
                CODE_NAME_MAP_${classificationName} = map; //java.util.Collections.unmodifiableMap(map);
            }
#end
#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
            {
                IDictionary<String, String> map = new Dictionary<String, String>();
#foreach ($classificationMap in $classificationMapList)
                map.Add(CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('alias')}");
#end
                CODE_ALIAS_MAP_${classificationName} = map; //java.util.Collections.unmodifiableMap(map);
            }
#end
        }

        private static String FindByCode(String code, IDictionary<String, String> map) {
            foreach (String key in map.Keys) {
                if (code.ToLower().Equals(key.ToLower())) {
                    return map[key];
                }
            }
            return null;
        }
    }
}
