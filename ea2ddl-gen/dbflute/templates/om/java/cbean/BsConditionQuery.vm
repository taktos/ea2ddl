${database.allClassCopyright}package ${glPackageBaseCQ};
#set ($myClassName = "${myBaseConditionQueryClassName}")

import java.util.Map;

import ${glPackageBaseCommonCBean}.*;
import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};
import ${glPackageCIQ}.*;
import ${glPackageCQ}.*;

/**
 * The base condition-query of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} extends ${myAbstractBaseConditionQueryClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionInlineQueryClassName} _inlineQuery;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel) {
        super(childQuery, sqlClause, aliasName, nestLevel);
    }

    // ===================================================================================
    //                                                                              Inline
    //                                                                              ======
    /**
     * Prepare inline query. <br />
     * {select ... from ... left outer join (select * from ${table.name}) where abc = [abc] ...}
     * @return Inline query. (NotNull)
     */
    public ${myConditionInlineQueryClassName} inline() {
        if (_inlineQuery == null) {
            _inlineQuery = new ${myConditionInlineQueryClassName}(getChildQuery(), getSqlClause(), getAliasName(), getNestLevel(), this);
        }
        _inlineQuery.xsetOnClauseInline(false); return _inlineQuery;
    }
    
    /**
     * Prepare on-clause query. <br />
     * {select ... from ... left outer join ${table.name} on ... and abc = [abc] ...}
     * @return On-clause query. (NotNull)
     */
    public ${myConditionInlineQueryClassName} on() {
        if (isBaseQuery(this)) { throw new UnsupportedOperationException("Unsupported onClause of Base Table!"); }
        ${myConditionInlineQueryClassName} inlineQuery = inline(); inlineQuery.xsetOnClauseInline(true); return inlineQuery;
    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
#foreach ($col in $table.columns)
#set ($tmpJavaName = "${col.JavaName}")
#set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

    protected ${glConditionValueName} _${tmpUncapitalisedJavaName};
    public ${glConditionValueName} get${tmpJavaName}() {
        if (_${tmpUncapitalisedJavaName} == null) { _${tmpUncapitalisedJavaName} = new ${glConditionValueName}(); }
        return _${tmpUncapitalisedJavaName};
    }
    protected ${glConditionValueName} getCValue${tmpJavaName}() { return get${tmpJavaName}(); }
#if (${col.isJavaNativeStringObject()})
#if (${col.isSingleKeyForeignKey()})
#set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#if (!${referrer.isOneToOne()})
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_DeriveSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_DeriveSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#end
#end
    #if (${col.isJavaNativeNumberObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
      #end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotInScopeSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotInScopeSubQuery_${referrer.ReferrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")
#if (${referrer.isOneToOne()})
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCapAsOne}")
#else
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_NotExistsSubQuery_${referrer.referrerPropertyNameInitCap}")
#end

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#if (${col.hasSingleKeyReferrer()})
#foreach ($referrer in $col.singleKeyReferrers)
#if (!${referrer.isOneToOne()})
#set ($relatedCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#set ($subQueryPropertyNameInitCap = "${tmpJavaName}_DeriveSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_DeriveSubQuery_${referrer.referrerPropertyNameInitCap}")
#set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected Map<${subQueryKeepMapGeneric}> _${subQueryPropertyName}Map;
    public Map<${subQueryKeepMapGeneric}> get${subQueryPropertyNameInitCap}() { return _${subQueryPropertyName}Map; }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = newLinkedHashMap(); }
        String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery); return "${subQueryPropertyName}." + key;
    }
#end
#end
#end
#end

    public ${myClassName} addOrderBy_${tmpJavaName}_Asc() { regOBA("${col.name}"); return this; }
    public ${myClassName} addOrderBy_${tmpJavaName}_Desc() { regOBD("${col.name}"); return this; }
#end

    // ===================================================================================
    //                                                           Specified Derived OrderBy
    //                                                           =========================
    public ${myClassName} addSpecifiedDerivedOrderBy_Asc(String aliasName) { registerSpecifiedDerivedOrderBy_Asc(aliasName); return this; }
    public ${myClassName} addSpecifiedDerivedOrderBy_Desc(String aliasName) { registerSpecifiedDerivedOrderBy_Desc(aliasName); return this; }

    // ===================================================================================
    //                                                                         Union Query
    //                                                                         ===========
    protected void reflectRelationOnUnionQuery(${glConditionQueryInterfaceName} baseQueryAsSuper, ${glConditionQueryInterfaceName} unionQueryAsSuper) {
#if ($table.hasForeignKeyOrRefererAsOne())
        ${myConditionQueryClassName} baseQuery = (${myConditionQueryClassName})baseQueryAsSuper;
        ${myConditionQueryClassName} unionQuery = (${myConditionQueryClassName})unionQueryAsSuper;
#end
#foreach ($foreignKeys in $table.foreignKeys)
        if (baseQuery.hasConditionQuery${foreignKeys.foreignPropertyNameInitCap}()) {
            unionQuery.query${foreignKeys.foreignPropertyNameInitCap}().reflectRelationOnUnionQuery(baseQuery.query${foreignKeys.foreignPropertyNameInitCap}(), unionQuery.query${foreignKeys.foreignPropertyNameInitCap}());
        }
#end
#foreach ($refferer in $table.referrers)
#if (${refferer.isOneToOne()})
        if (baseQuery.hasConditionQuery${refferer.reffererPropertyNameInitCapAsOne}()) {
            unionQuery.query${refferer.reffererPropertyNameInitCapAsOne}().reflectRelationOnUnionQuery(baseQuery.query${refferer.reffererPropertyNameInitCapAsOne}(), unionQuery.query${refferer.reffererPropertyNameInitCapAsOne}());
        }
#end
#end
    }

    // ===================================================================================
    //                                                                       Foreign Query
    //                                                                       =============
#foreach ($foreignKeys in $table.foreignKeys)
#set ($foreignCQClassName = "${foreignKeys.foreignTableExtendedConditionQueryClassName}")
    
    public ${foreignCQClassName} query${foreignKeys.ForeignPropertyNameInitCap}() {
        return getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}();
    }
    protected ${foreignCQClassName} _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
    public ${foreignCQClassName} getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        if (_conditionQuery${foreignKeys.foreignPropertyNameInitCap} == null) {
            _conditionQuery${foreignKeys.foreignPropertyNameInitCap} = createQuery${foreignKeys.foreignPropertyNameInitCap}();
            setupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}();
        }
        return _conditionQuery${foreignKeys.foreignPropertyNameInitCap};
    }
    protected void setupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}() {
        Map<String, String> joinOnMap = newLinkedHashMap();
#foreach ($columnName in $foreignKeys.LocalColumns)
#set ($localColumn = $table.getColumn($columnName))
#set ($foreignColumnName = $foreignKeys.getLocalForeignMapping().get($columnName))
        joinOnMap.put(getRealColumnName("${localColumn.name}"), getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getRealColumnName("${foreignColumnName}"));
#end
#if ($foreignKeys.hasFixedCondition())
        joinOnMap.put("$$fixedCondition$$", prepareFixedCondition("${foreignKeys.fixedCondition}", getRealAliasName(), getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getRealAliasName()));
#end
        registerOuterJoin(getConditionQuery${foreignKeys.foreignPropertyNameInitCap}(), joinOnMap);
    }
    protected ${foreignCQClassName} createQuery${foreignKeys.foreignPropertyNameInitCap}() {
        String nrp = resolveNextRelationPath("${table.name}", "${foreignKeys.foreignPropertyName}");
        String jan = resolveJoinAliasName(nrp, getNextNestLevel());
        ${foreignCQClassName} cq = new ${foreignCQClassName}(this, getSqlClause(), jan, getNextNestLevel());
        cq.xsetForeignPropertyName("${foreignKeys.foreignPropertyName}"); cq.xsetRelationPath(nrp); return cq;
    }
    public boolean hasConditionQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        return _conditionQuery${foreignKeys.ForeignPropertyNameInitCap} != null;
    }
#end

#foreach ($referrer in $table.referrers)
#set ($relatedCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
#if (${referrer.isOneToOne()})

    public ${relatedCQClassName} query${referrer.referrerPropertyNameInitCapAsOne}() {
        return getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}();
    }
    protected ${relatedCQClassName} _conditionQuery${referrer.referrerPropertyNameInitCapAsOne};
    public ${relatedCQClassName} getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        if (_conditionQuery${referrer.referrerPropertyNameInitCapAsOne} == null) {
            _conditionQuery${referrer.referrerPropertyNameInitCapAsOne} = createQuery${referrer.referrerPropertyNameInitCapAsOne}();
            setupOuterJoin_${referrer.referrerPropertyNameInitCapAsOne}();
        }
        return _conditionQuery${referrer.referrerPropertyNameInitCapAsOne};
    }
    protected void setupOuterJoin_${referrer.referrerPropertyNameInitCapAsOne}() {
        Map<String, String> joinOnMap = newLinkedHashMap();
#foreach ($columnName in $referrer.foreignColumns)
#set ($foreignColumn = $table.getColumn($columnName))
#set ($referrerColumnName = $referrer.getForeignLocalMapping().get($columnName))
        joinOnMap.put(getRealColumnName("${foreignColumn.name}"), getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getRealColumnName("${referrerColumnName}"));
#end
#if ($referrer.hasFixedCondition())
        joinOnMap.put("$$fixedCondition$$", prepareFixedCondition("${referrer.fixedCondition}", getRealAliasName(), getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getRealAliasName()));
#end
        registerOuterJoin(getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}(), joinOnMap);
    }
    protected ${relatedCQClassName} createQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        String nrp = resolveNextRelationPath("${table.name}", "${referrer.referrerPropertyNameAsOne}");
        String jan = resolveJoinAliasName(nrp, getNextNestLevel());
        ${relatedCQClassName} cq = new ${relatedCQClassName}(this, getSqlClause(), jan, getNextNestLevel());
        cq.xsetForeignPropertyName("${referrer.referrerPropertyNameAsOne}"); cq.xsetRelationPath(nrp); return cq;
    }
    public boolean hasConditionQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        return _conditionQuery${referrer.referrerPropertyNameInitCapAsOne} != null;
    }
#end
#end

    protected String getConditionQueryClassNameInternally() { return ${myConditionQueryClassName}.class.getName(); }
    protected String getMapClassNameInternally() { return Map.class.getName(); }
}
