${database.allClassCopyright}package ${glPackageArgumentBean};

#set ($myClassName = "${myArgumentBeanClassName}")

/**
 * The argument-bean of ${myArgumentBeanName}.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} {

    // =====================================================================================
    //                                                                     Static Definition
    //                                                                     =================
#foreach ($propertyName in $propertyDefinitionMap.keySet())

    /// <summary>The java name of ${propertyName}</summary>
    public static final String JAVA_NAME_OF_${database.initCap($propertyName)} = "${database.initCap($propertyName)}";
#end

#foreach ($propertyName in $propertyDefinitionMap.keySet())

    /// <summary>The property name of ${propertyName}</summary>
    public static final String PROPERTY_NAME_OF_${database.initCap($propertyName)} = "${propertyName}";
#end

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getArgumentBeanPropertyType($myArgumentBeanName, $propertyName))

    /// <summary>The value of ${propertyName}.</summary>
    protected ${propertyJavaNative} _${propertyName};

    /// <summary>Has the setter of ${col.UncapitalisedJavaName} been invoked?</summary>
    protected boolean _isSetterInvoked${database.initCap($propertyName)};
#end

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /// <summary>
    /// Constructor.
    /// </summary>
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // =====================================================================================
    //                                                                         Getter Setter
    //                                                                         =============
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getArgumentBeanPropertyType($myArgumentBeanName, $propertyName))

    /**
     * Get the value of ${propertyName}.
     * 
     * @return The value of ${propertyName}.
     */
    public ${propertyJavaNative} get${database.initCap($propertyName)}() {
        return _${propertyName};
        set { _isSetterInvoked${database.initCap($propertyName)} = true; _${propertyName} = value; }
    }

    /**
     * Set the value of ${propertyName}.
     * 
     * @param value The value of ${propertyName}.
     */
    public ${propertyJavaNative} set${database.initCap($propertyName)}(${propertyJavaNative} value) {
        _isSetterInvoked${database.initCap($propertyName)} = true;
        _${propertyName} = value;
    }
#end

    // =====================================================================================
    //                                                                Invoking Determination
    //                                                                ======================
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getArgumentBeanPropertyType($myArgumentBeanName, $propertyName))

    /**
     * Has the setter of ${propertyName} been invoked?
     * 
     * @return Determination.
     */
    public boolean isSetterInvoked${database.initCap($propertyName)}() {
        return _isSetterInvoked${database.initCap($propertyName)};
    }
#end

#if (${database.isAvailableSqlParameterBeanGeneration()})

    // =====================================================================================
    //                                                                 Prepared SqlParameter
    //                                                                 =====================
  #foreach ($sqlParameterName in $database.getArgumentBeanRelatedSqlParameterSqlParameterNameList($myArgumentBeanName))

    /// <summary>
    /// Get prepared parameter bean of ${sqlParameterName}.
    /// </summary>
    public ${glPackageExtendedSqlParameterBean}.${sqlParameterName} generatePreparedSqlParameter${sqlParameterName}() {
        final ${glPackageExtendedSqlParameterBean}.${sqlParameterName} pmb = new ${glPackageExtendedSqlParameterBean}.${sqlParameterName}();
    #foreach ($propertyName in $propertyDefinitionMap.keySet())
      #set ($propertyJavaNative = $database.getArgumentBeanPropertyType($myArgumentBeanName, $propertyName))
      #if ($database.isSqlParameterBeanHaveTheProperty($sqlParameterName, $propertyName))

        pmb.set${database.initCap($propertyName)}(get${database.initCap($propertyName)});
      #end
    #end

        return pmb;
    }
  #end
#end

    // =====================================================================================
    //                                                                 Basic Override Method
    //                                                                 =====================
    /**
     * ${database.OverrideComment}
     * 
     * @return Property-string. (NotNull)
     */
    public override String ToString() {
        StringBuffer sb = new StringBuffer();
#foreach ($propertyName in $propertyDefinitionMap.keySet())
  #set ($propertyJavaNative = $database.getArgumentBeanPropertyType($myArgumentBeanName, $propertyName))

            sb.append(" ${propertyName}=").append(this.${database.initCap($propertyName)});
#end

            return sb.toString();
        }
    }
}
