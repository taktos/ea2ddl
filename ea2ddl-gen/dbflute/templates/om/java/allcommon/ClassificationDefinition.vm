${database.allClassCopyright}package ${glPackageBaseCommon};
#set ($myClassName = "${glClassificationDefinition}")

import java.util.Collections;
import java.util.Map;
import java.util.LinkedHashMap;
#if ($database.isMakeClassificationValueLabelList())
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
#end

/**
 * The definition class that has classification.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // ===================================================================================
    //                                                                 Classification Code
    //                                                                 ===================
#foreach ($classificationName in $database.classificationNameList)
  #set ($classificationMapList = $database.classificationDefinitionMap.get($classificationName))
  #set ($existTop = false)
  #if ($database.classificationTopDefinitionMap.containsKey($classificationName))
    #set ($classificationTopMap = $database.classificationTopDefinitionMap.get($classificationName))
    #set ($existTop = true)
  #else
    #set ($existTop = false)
  #end

    // /- - - - - - - - - - - - - - - - - - - - - - - - - -
    // [${classificationName}]
#if ($existTop && $classificationTopMap.containsKey('topComment'))
    // $classificationTopMap.get('topComment')
#end
    // - - - - - - - - - -/
#if ($existTop && $classificationTopMap.containsKey('topCode'))

    /**
     * The classification TOP code of ${classificationName}. <br />
#if ($classificationTopMap.containsKey('topComment'))
     * $classificationTopMap.get('topComment')
#end
     */
    public static final String ${database.classificationTopCodeVariableNamePrefix}${classificationName} = "$classificationTopMap.get('topCode')";
#end
#foreach ($classificationMap in $classificationMapList)

    /**
     * The classification code of ${classificationMap.get('name')} on ${classificationName}. <br />
#if ($classificationMap.containsKey('comment'))
     * ${classificationMap.get('comment')}
#end
     */
    public static final String ${database.classificationCodeVariableNamePrefix}${classificationName}_${classificationMap.get('name')} = "$classificationMap.get('code')";
#end
#end

    // ===================================================================================
    //                                                          Classification CodeNameMap
    //                                                          ==========================
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
    /** The classification code-name map of ${classificationName}. */
    public static final Map<String, String> CODE_NAME_MAP_${classificationName};
    static {
        final Map<String, String> map = new LinkedHashMap<String, String>();
#foreach ($classificationMap in $classificationMapList)
        map.put(${database.classificationCodeVariableNamePrefix}${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('name')}");
#end
        CODE_NAME_MAP_${classificationName} = Collections.unmodifiableMap(map);
    }
    public static String find${classificationName}Name(String code) { return findByCode(code, CODE_NAME_MAP_${classificationName}); }

#end
#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
#set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
    /** The classification code-alias map of ${classificationName}. */
    public static final Map<String, String> CODE_ALIAS_MAP_${classificationName};
    static {
        final Map<String, String> map = new LinkedHashMap<String, String>();
#foreach ($classificationMap in $classificationMapList)
        map.put(${database.classificationCodeVariableNamePrefix}${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('alias')}");
#end
        CODE_ALIAS_MAP_${classificationName} = Collections.unmodifiableMap(map);
    }
    public static String find${classificationName}Alias(String code) { return findByCode(code, CODE_ALIAS_MAP_${classificationName}); }

#end
    protected static String findByCode(String code, Map<String, String> map) {
        for (String key : map.keySet()) {
            if (code.equalsIgnoreCase(key)) {
                return map.get(key);
            }
        }
        return null;
    }

#if ($database.isMakeClassificationValueLabelList())
    // ===================================================================================
    //                                                       Classification ValueLabelList
    //                                                       =============================
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-name map of ${classificationName}. */
    public static final List<Map<String, String>> VALUE_LABEL_NAME_LIST_${classificationName};
    static {
        final List<Map<String, String>> list = new ArrayList<Map<String, String>>();
#foreach ($classificationMap in $classificationMapList)
        setupValueLabelElement(list, ${database.classificationCodeVariableNamePrefix}${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('name')}");
#end

        VALUE_LABEL_NAME_LIST_${classificationName} = Collections.unmodifiableList(list);
    }
    public static List<Map<String, String>> createValueLabelNameList${classificationName}() {
        return setupValueLabelList(VALUE_LABEL_NAME_LIST_${classificationName});
    }
#end
#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-name map of ${classificationName}. */
    public static final List<Map<String, String>> VALUE_LABEL_ALIAS_LIST_${classificationName};
    static {
        final List<Map<String, String>> list = new ArrayList<Map<String, String>>();
#foreach ($classificationMap in $classificationMapList)
        setupValueLabelElement(list, ${database.classificationCodeVariableNamePrefix}${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('alias')}");
#end

        VALUE_LABEL_ALIAS_LIST_${classificationName} = Collections.unmodifiableList(list);
    }
    public static List<Map<String, String>> createValueLabelAliasList${classificationName}() {
        return setupValueLabelList(VALUE_LABEL_ALIAS_LIST_${classificationName});
    }
#end

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected static List<Map<String, String>> setupValueLabelList(List<Map<String, String>> ls) {
        final List<Map<String, String>> newList = new ArrayList<Map<String, String>>();
        for (final Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final Map<String, String> map = (Map<String, String>)ite.next();
            final Map<String, String> newMap = new LinkedHashMap<String, String>(map);
            newList.add(newMap);
        }
        return newList;
    }

    protected static void setupValueLabelElement(List<Map<String, String>> ls, String value, String label) {
        final Map<String, String> map = new LinkedHashMap<String, String>();
        map.put("value", value);
        map.put("label", label);
        ls.add(Collections.unmodifiableMap(map));
    }
#end
}
