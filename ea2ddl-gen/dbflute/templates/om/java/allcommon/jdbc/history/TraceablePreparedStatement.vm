${database.allClassCopyright}package ${glPackageBaseCommonJdbcHistory};

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * The implementation of prepared statement as traceable prepared statement.
 * 
 * @author ${database.ClassAuthor}
 * @deprecated Please use SqlLogRegistry
 */
public class ${glTraceablePreparedStatementName} implements PreparedStatement {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected PreparedStatement _preparedStatement;

    protected String _preparedSql;

    protected ${glStatementHistoryName} _statementHistory = new ${glStatementHistoryName}();

    protected ${glStatementHistoryWitnessName} _statementHistoryWitness;

    protected boolean _movingNextBatchPoint;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     * 
     * @param preparedStatement Wrap target prepared statement. (NotNull)
     * @param preparedSql Prepared sql. (NotNull)
     * @param statementHistoryWitness Statement history witness. (NotNull)
     */
    public ${glTraceablePreparedStatementName}(PreparedStatement preparedStatement, String preparedSql, ${glStatementHistoryWitnessName} statementHistoryWitness) {
        this._preparedStatement = preparedStatement;
        this._preparedSql = preparedSql;
        this._statementHistoryWitness = statementHistoryWitness;
    }

    // ===================================================================================
    //                                                                            Delegate
    //                                                                            ========
    // -----------------------------------------------------
    //                                             Add-Batch
    //                                             ---------
    public void addBatch() throws SQLException {
        moveNextBatchPoint();
        _preparedStatement.addBatch();
    }

    public void addBatch(String sql) throws SQLException {
        _preparedStatement.addBatch(sql);
    }

    // -----------------------------------------------------
    //                                                Cancel
    //                                                ------
    public void cancel() throws SQLException {
        _preparedStatement.cancel();
    }

    // -----------------------------------------------------
    //                                                 Clear
    //                                                 -----
    public void clearBatch() throws SQLException {
        _preparedStatement.clearBatch();
    }

    public void clearParameters() throws SQLException {
        _preparedStatement.clearParameters();
    }

    public void clearWarnings() throws SQLException {
        _preparedStatement.clearWarnings();
    }

    // -----------------------------------------------------
    //                                                 Close
    //                                                 -----
    public void close() throws SQLException {
        _preparedStatement.close();
    }

    // -----------------------------------------------------
    //                                               Execute
    //                                               -------
    public boolean execute() throws SQLException {
        traceSql(_preparedSql);
        return _preparedStatement.execute();
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        traceSql(sql);
        return _preparedStatement.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        traceSql(sql);
        return _preparedStatement.execute(sql, columnIndexes);
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        traceSql(sql);
        return _preparedStatement.execute(sql, columnNames);
    }

    public boolean execute(String sql) throws SQLException {
        traceSql(sql);
        return _preparedStatement.execute(sql);
    }

    public int[] executeBatch() throws SQLException {
        traceSql(_preparedSql);
        return _preparedStatement.executeBatch();
    }

    public ResultSet executeQuery() throws SQLException {
        traceSql(_preparedSql);
        return _preparedStatement.executeQuery();
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        traceSql(sql);
        return _preparedStatement.executeQuery(sql);
    }

    public int executeUpdate() throws SQLException {
        traceSql(_preparedSql);
        return _preparedStatement.executeUpdate();
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        traceSql(sql);
        return _preparedStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        traceSql(sql);
        return _preparedStatement.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        traceSql(sql);
        return _preparedStatement.executeUpdate(sql, columnNames);
    }

    public int executeUpdate(String sql) throws SQLException {
        traceSql(sql);
        return _preparedStatement.executeUpdate(sql);
    }

    // -----------------------------------------------------
    //                                                 Other
    //                                                 -----
    public Connection getConnection() throws SQLException {
        return _preparedStatement.getConnection();
    }

    public int getFetchDirection() throws SQLException {
        return _preparedStatement.getFetchDirection();
    }

    public int getFetchSize() throws SQLException {
        return _preparedStatement.getFetchSize();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return _preparedStatement.getGeneratedKeys();
    }

    public int getMaxFieldSize() throws SQLException {
        return _preparedStatement.getMaxFieldSize();
    }

    public int getMaxRows() throws SQLException {
        return _preparedStatement.getMaxRows();
    }

    public ResultSetMetaData getMetaData() throws SQLException {
        return _preparedStatement.getMetaData();
    }

    public boolean getMoreResults() throws SQLException {
        return _preparedStatement.getMoreResults();
    }

    public boolean getMoreResults(int current) throws SQLException {
        return _preparedStatement.getMoreResults(current);
    }

    public ParameterMetaData getParameterMetaData() throws SQLException {
        return _preparedStatement.getParameterMetaData();
    }

    public int getQueryTimeout() throws SQLException {
        return _preparedStatement.getQueryTimeout();
    }

    public ResultSet getResultSet() throws SQLException {
        return _preparedStatement.getResultSet();
    }

    public int getResultSetConcurrency() throws SQLException {
        return _preparedStatement.getResultSetConcurrency();
    }

    public int getResultSetHoldability() throws SQLException {
        return _preparedStatement.getResultSetHoldability();
    }

    public int getResultSetType() throws SQLException {
        return _preparedStatement.getResultSetType();
    }

    public int getUpdateCount() throws SQLException {
        return _preparedStatement.getUpdateCount();
    }

    public SQLWarning getWarnings() throws SQLException {
        return _preparedStatement.getWarnings();
    }

    // -----------------------------------------------------
    //                                     Setting Parameter
    //                                     -----------------
    public void setArray(int parameterIndex, Array x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.ARRAY, x);
        _preparedStatement.setArray(parameterIndex, x);
    }

    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        _preparedStatement.setAsciiStream(parameterIndex, x, length);
    }

    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.DECIMAL, x);
        _preparedStatement.setBigDecimal(parameterIndex, x);
    }

    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        _preparedStatement.setBinaryStream(parameterIndex, x, length);
    }

    public void setBlob(int i, Blob x) throws SQLException {
        registerPreparedParameter(i, Types.BLOB, x);
        _preparedStatement.setBlob(i, x);
    }

    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.BOOLEAN, x);
        _preparedStatement.setBoolean(parameterIndex, x);
    }

    public void setByte(int parameterIndex, byte x) throws SQLException {
        _preparedStatement.setByte(parameterIndex, x);
    }

    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        _preparedStatement.setBytes(parameterIndex, x);
    }

    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        // *Out of target about registering prepared parameter.
        _preparedStatement.setCharacterStream(parameterIndex, reader, length);
    }

    public void setClob(int i, Clob x) throws SQLException {
        registerPreparedParameter(i, Types.CLOB, x);
        _preparedStatement.setClob(i, x);
    }

    public void setCursorName(String name) throws SQLException {
        _preparedStatement.setCursorName(name);
    }

    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.DATE, x);
        _preparedStatement.setDate(parameterIndex, x, cal);
    }

    public void setDate(int parameterIndex, Date x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.DATE, x);
        _preparedStatement.setDate(parameterIndex, x);
    }

    public void setDouble(int parameterIndex, double x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.DOUBLE, x);
        _preparedStatement.setDouble(parameterIndex, x);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        _preparedStatement.setEscapeProcessing(enable);
    }

    public void setFetchDirection(int direction) throws SQLException {
        _preparedStatement.setFetchDirection(direction);
    }

    public void setFetchSize(int rows) throws SQLException {
        _preparedStatement.setFetchSize(rows);
    }

    public void setFloat(int parameterIndex, float x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.FLOAT, x);
        _preparedStatement.setFloat(parameterIndex, x);
    }

    public void setInt(int parameterIndex, int x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.INTEGER, x);
        _preparedStatement.setInt(parameterIndex, x);
    }

    public void setLong(int parameterIndex, long x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.LONGVARCHAR, x);
        _preparedStatement.setLong(parameterIndex, x);
    }

    public void setMaxFieldSize(int max) throws SQLException {
        _preparedStatement.setMaxFieldSize(max);
    }

    public void setMaxRows(int max) throws SQLException {
        _preparedStatement.setMaxRows(max);
    }

    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
        registerPreparedParameter(paramIndex, Types.NULL, null);
        _preparedStatement.setNull(paramIndex, sqlType, typeName);
    }

    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.NULL, null);
        _preparedStatement.setNull(parameterIndex, sqlType);
    }

    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.OTHER, x);
        _preparedStatement.setObject(parameterIndex, x, targetSqlType, scale);
    }

    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.OTHER, x);
        _preparedStatement.setObject(parameterIndex, x, targetSqlType);
    }

    public void setObject(int parameterIndex, Object x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.OTHER, x);
        _preparedStatement.setObject(parameterIndex, x);
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        _preparedStatement.setQueryTimeout(seconds);
    }

    public void setRef(int i, Ref x) throws SQLException {
        _preparedStatement.setRef(i, x);
    }

    public void setShort(int parameterIndex, short x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.INTEGER, x);
        _preparedStatement.setShort(parameterIndex, x);
    }

    public void setString(int parameterIndex, String x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.VARCHAR, x);
        _preparedStatement.setString(parameterIndex, x);
    }

    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.TIME, x);
        _preparedStatement.setTime(parameterIndex, x, cal);
    }

    public void setTime(int parameterIndex, Time x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.TIME, x);
        _preparedStatement.setTime(parameterIndex, x);
    }

    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.TIMESTAMP, x);
        _preparedStatement.setTimestamp(parameterIndex, x, cal);
    }

    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        registerPreparedParameter(parameterIndex, Types.TIMESTAMP, x);
        _preparedStatement.setTimestamp(parameterIndex, x);
    }

    /**
     * @deprecated
     */
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        _preparedStatement.setUnicodeStream(parameterIndex, x, length);
    }

    public void setURL(int parameterIndex, URL x) throws SQLException {
        _preparedStatement.setURL(parameterIndex, x);
    }

#if ($database.isJavaVersionGreaterEqualMustang())
    public void setAsciiStream(int arg0, InputStream arg1) throws SQLException {
        _preparedStatement.setAsciiStream(arg0, arg1);
    }

    public void setAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException {
        _preparedStatement.setAsciiStream(arg0, arg1, arg2);
    }

    public void setBinaryStream(int arg0, InputStream arg1) throws SQLException {
        _preparedStatement.setBinaryStream(arg0, arg1);
    }

    public void setBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException {
        _preparedStatement.setBinaryStream(arg0, arg1, arg2);
    }

    public void setBlob(int arg0, InputStream arg1) throws SQLException {
        _preparedStatement.setBlob(arg0, arg1);
    }

    public void setBlob(int arg0, InputStream arg1, long arg2) throws SQLException {
        _preparedStatement.setBlob(arg0, arg1, arg2);
    }

    public void setCharacterStream(int arg0, Reader arg1) throws SQLException {
        _preparedStatement.setCharacterStream(arg0, arg1);
    }

    public void setCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException {
        _preparedStatement.setCharacterStream(arg0, arg1, arg2);
    }

    public void setClob(int arg0, Reader arg1) throws SQLException {
        _preparedStatement.setClob(arg0, arg1);
    }

    public void setClob(int arg0, Reader arg1, long arg2) throws SQLException {
        _preparedStatement.setClob(arg0, arg1, arg2);
    }

    public void setNCharacterStream(int arg0, Reader arg1) throws SQLException {
        _preparedStatement.setNCharacterStream(arg0, arg1);
    }

    public void setNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException {
        _preparedStatement.setNCharacterStream(arg0, arg1, arg2);
    }

    public void setNClob(int arg0, NClob arg1) throws SQLException {
        _preparedStatement.setNClob(arg0, arg1);
    }

    public void setNClob(int arg0, Reader arg1) throws SQLException {
        _preparedStatement.setNClob(arg0, arg1);
    }

    public void setNClob(int arg0, Reader arg1, long arg2) throws SQLException {
        _preparedStatement.setNClob(arg0, arg1, arg2);
    }

    public void setNString(int arg0, String arg1) throws SQLException {
        _preparedStatement.setNString(arg0, arg1);
    }

    public void setRowId(int arg0, RowId arg1) throws SQLException {
        _preparedStatement.setRowId(arg0, arg1);
    }

    public void setSQLXML(int arg0, SQLXML arg1) throws SQLException {
        _preparedStatement.setSQLXML(arg0, arg1);
    }

    public boolean isClosed() throws SQLException {
        return _preparedStatement.isClosed();
    }

    public boolean isPoolable() throws SQLException {
        return _preparedStatement.isPoolable();
    }

    public void setPoolable(boolean arg0) throws SQLException {
        _preparedStatement.setPoolable(arg0);
    }

    public boolean isWrapperFor(Class<?> arg0) throws SQLException {
        return _preparedStatement.isWrapperFor(arg0);
    }

    public <T> T unwrap(Class<T> arg0) throws SQLException {
        return _preparedStatement.unwrap(arg0);
    }
#end

    // ===================================================================================
    //                                                                               Trace
    //                                                                               =====
    protected void traceSql(String sql) {
        // Initialize for zero parameter.
        _statementHistory.current();

        if (_movingNextBatchPoint && _statementHistory.current().isEmpty()) {
            _statementHistory.removeLast();
        }

        setupSqlDisplayList(sql);
        _statementHistoryWitness.witnessTheHistory(_statementHistory);
    }

    protected void registerPreparedParameter(int settingIndex, int jdbcType, Object parameterValue) {
        final ${glPreparedParameterElementName} parameterElement = createPreparedParameterElement(settingIndex, jdbcType, parameterValue);
        _statementHistory.current().addParameterElement(parameterElement);
    }

    protected ${glPreparedParameterElementName} createPreparedParameterElement(int settingIndex, int jdbcType, Object parameterValue) {
        final ${glPreparedParameterElementName} element = new ${glPreparedParameterElementName}();
        element.setSettingIndex(settingIndex);
        element.setJdbcType(jdbcType);
        element.setParameterValue(parameterValue);
        return element;
    }

    // ===================================================================================
    //                                                                              Set up
    //                                                                              ======
    protected void setupSqlDisplayList(String realSql) {
        final java.util.List<${glPreparedExecutionBeanName}> executionBeanList = _statementHistory.getPreparedExecutionBeanList();
        for (${glPreparedExecutionBeanName} executionBean : executionBeanList) {
            final Object[] args = new Object[executionBean.size()];
            int index = 0;
            final java.util.List<${glPreparedParameterElementName}> parameterElementList = executionBean.getPreparedParameterElementList();
            for (${glPreparedParameterElementName} parameterElement : parameterElementList) {
                final Object parameterValue = parameterElement.getParameterValue();
                args[index] = parameterValue;
                ++index;
            }
            final String displaySql = getCompleteSql(realSql, args);
            executionBean.setDisplaySql(displaySql);
        }
    }

    // ===================================================================================
    //                                                                               Batch
    //                                                                               =====
    protected void moveNextBatchPoint() {
        _movingNextBatchPoint = true;
        _statementHistory.next();
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected String getCompleteSql(String sql, Object[] args) {
        if (args == null || args.length == 0) {
            return sql;
        }
        StringBuffer buf = new StringBuffer(200);
        int pos = 0;
        int pos2 = 0;
        int pos3 = 0;
        int pos4 = 0;
        int index = 0;
        while (true) {
            pos = sql.indexOf('?', pos2);
            pos3 = sql.indexOf('\'', pos2);
            pos4 = sql.indexOf('\'', pos3 + 1);
            if (pos > 0) {
                if (pos3 >= 0 && pos3 < pos && pos < pos4) {
                    buf.append(sql.substring(pos2, pos4 + 1));
                    pos2 = pos4 + 1;
                } else {
                    buf.append(sql.substring(pos2, pos));
                    buf.append(getBindVariableText(args[index++]));
                    pos2 = pos + 1;
                }
            } else {
                buf.append(sql.substring(pos2));
                break;
            }
        }
        return buf.toString();
    }

    protected String getBindVariableText(Object bindVariable) {
        if (bindVariable instanceof String) {
            return "'" + bindVariable + "'";
        } else if (bindVariable instanceof Number) {
            return bindVariable.toString();
        } else if (bindVariable instanceof Timestamp) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH.mm.ss");
            return "'" + sdf.format((java.util.Date) bindVariable) + "'";
        } else if (bindVariable instanceof java.util.Date) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            return "'" + sdf.format((java.util.Date) bindVariable) + "'";
        } else if (bindVariable instanceof Boolean) {
            return bindVariable.toString();
        } else if (bindVariable == null) {
            return "null";
        } else {
            return "'" + bindVariable.toString() + "'";
        }
    }

}
