${database.allClassCopyright}package ${glPackageBaseCommonUtil};

import java.util.List;
import java.util.Map;
import java.util.LinkedHashMap;

/**
 * @author ${database.ClassAuthor}
 */
public class ${glValueLabelUtilName} {

    /**
     * Find the label by the value from the list of value label.
     * @param valueLabelList The list of value label. (NotNull and NotEmpty)
     * @param value Value. (NotNull)
     * @return Label. (NotNull)
     */
    public static String findLabel(List<Map<String, Object>> valueLabelList, Object value) {
        if (valueLabelList == null) {
            String msg = "The arguement[valueLabelList] should not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (valueLabelList.isEmpty()) {
            String msg = "The arguement[valueLabelList] should not be empty.";
            throw new IllegalArgumentException(msg);
        }
        if (value == null) {
            String msg = "The arguement[value] should not be null.";
            throw new IllegalArgumentException(msg);
        }
        for (Map<String, Object> elementMap : valueLabelList) {
            final Object currentValue = elementMap.get("value");
            if (value.equals(currentValue)) {
                return (String) elementMap.get("label");
            }
        }
        String msg = "Not found label by the value: value=" + value + " valueLabelList=" + valueLabelList;
        throw new IllegalStateException(msg);
    }
	
	public static Map<Object, String> createValueLabelMap(List<Map<String, Object>> valueLabelList) {
		final Map<Object, String> resultMap = new LinkedHashMap<Object, String>();
		for (Map<String, Object> elementMap : valueLabelList) {
			final Object currentValue = elementMap.get("value");
			final String currentLabel = (String) elementMap.get("label");
			resultMap.put(currentValue, currentLabel);
		}
		return resultMap;
	}
	
	public static Map<String, Object> createLabelValueMap(List<Map<String, Object>> valueLabelList) {
		final Map<String, Object> resultMap = new LinkedHashMap<String, Object>();
		for (Map<String, Object> elementMap : valueLabelList) {
			final Object currentValue = elementMap.get("value");
			final String currentLabel = (String) elementMap.get("label");
			resultMap.put(currentLabel, currentValue);
		}
		return resultMap;
	}
}
