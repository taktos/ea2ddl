${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import org.seasar.dao.AnnotationReaderFactory;
import org.seasar.dao.BeanEnhancer;
import org.seasar.dao.impl.DaoMetaDataFactoryImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.extension.jdbc.StatementFactory;

import ${glPackageBaseCommon}.${glDBFluteConfig};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonS2DaoInternalSqlLog}.${glInternalSqlLogRegistry};

/**
 * DaoMetaDataFactoryImpl for DBFlute.
 * @author ${database.ClassAuthor}
 */
public class ${glDaoMetaDataFactoryImpl} extends DaoMetaDataFactoryImpl {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Log-instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${glDaoInterceptor}.class);

    /** The binding annotation for xaDataSource. {bindingType=may} */
    public static final String xaDataSource_BINDING = "bindingType=may";

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Bean enhancer. */
    protected BeanEnhancer beanEnhancer;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     * @param dataSource Data source.
     * @param statementFactory Statement factory.
     * @param resultSetFactory Result set factory.
     * @param readerFactory Annotation reader factory.
     * @param xaDataSource XA data source.
     */
    public ${glDaoMetaDataFactoryImpl}(javax.sql.DataSource dataSource,
            StatementFactory statementFactory,
            ResultSetFactory resultSetFactory,
            AnnotationReaderFactory readerFactory,
            javax.sql.XADataSource xaDataSource) {
        super(dataSource, statementFactory, resultSetFactory, readerFactory);

        _log.info("/* * * * * * * * * * * * * * * * * * * * * * * * * * * * {DBFlute}");
        showInformation(dataSource, xaDataSource);

        // Stop the LinkageError!
        ${glConditionBeanContextName}.initialize();

        initializeDatabaseProductNameOfContext(xaDataSource);

        final StringBuilder sb = new StringBuilder();
        sb.append("{SqlLog Information}").append(getLineSeparator());
        sb.append("  [SqlLogRegistry]").append(getLineSeparator());
        final Object sqlLogRegistry = ${glInternalSqlLogRegistry}.findContainerSqlLogRegistry();
        if (sqlLogRegistry != null) {
            ${glInternalSqlLogRegistry}.closeRegistration();
            sb.append("    SqlLogRegistry(org.seasar.extension.jdbc) is close! It's default for DBFlute.").append(getLineSeparator());
            sb.append("    If you want to use this, set SqlLogRegistry to SqlLogRegistryLocator at yourself.");
        } else {
            sb.append("    SqlLogRegistry(org.seasar.extension.jdbc) was not found!");
        }
        _log.info(sb);
        ${glDBFluteConfig}.getInstance().lock();
        _log.info("* * * * */");
    }

    protected void showInformation(javax.sql.DataSource dataSource, javax.sql.XADataSource xaDataSource) {
        final StringBuilder sb = new StringBuilder();
        if (xaDataSource != null && xaDataSource instanceof org.seasar.extension.dbcp.impl.XADataSourceImpl) {
            final org.seasar.extension.dbcp.impl.XADataSourceImpl xaDataSourceImpl = (org.seasar.extension.dbcp.impl.XADataSourceImpl)xaDataSource;
            final String driverClassName = xaDataSourceImpl.getDriverClassName();
            final String url = xaDataSourceImpl.getURL();
            final String user = xaDataSourceImpl.getUser();
            sb.append("  [XADataSource]:").append(getLineSeparator());
            sb.append("    driver = " + driverClassName).append(getLineSeparator());
            sb.append("    url    = " + url).append(getLineSeparator());
            sb.append("    user   = " + user).append(getLineSeparator());
        }
        final String statementFactoryExpression = statementFactory != null ? statementFactory.getClass().getSimpleName(): "null";
        final String resultSetFactoryExpression = resultSetFactory != null ? resultSetFactory.getClass().getSimpleName(): "null";
        sb.append("  [StatementFactory]:").append(getLineSeparator());
        sb.append("    Injected statementFactory is " + statementFactoryExpression + ". But DBFlute uses original statementFactory.").append(getLineSeparator());
        sb.append("    If the injected statementFactory is ConfigurableStatementFactory, the config is inherited to the original statementFactory.").append(getLineSeparator());
        sb.append("  [ResultSetFactory]:").append(getLineSeparator());
        sb.append("    Injected resultSetFactory is " + resultSetFactoryExpression + ". But DBFlute uses original resultSetFactory.");
        _log.info("{Injection Information}" + getLineSeparator() + sb);
    }

    // -----------------------------------------------------
    //                                 Database Product Name
    //                                 ---------------------
    protected void initializeDatabaseProductNameOfContext(javax.sql.XADataSource xaDataSource) {
        if (getDatabaseProductNameFromContext() != null) {
            return;
        }

        // From JDBC Driver!
        if (xaDataSource != null && xaDataSource instanceof org.seasar.extension.dbcp.impl.XADataSourceImpl) {
            final org.seasar.extension.dbcp.impl.XADataSourceImpl xaDataSourceImpl = (org.seasar.extension.dbcp.impl.XADataSourceImpl)xaDataSource;
            final String driverClassName = xaDataSourceImpl.getDriverClassName();
            if (driverClassName != null) {
                if (setupDatabaseProductNameByDriverClassName(driverClassName)) {
                    _log.info("...Initializing database product name from driverClassName: " + getDatabaseProductNameFromContext());
                    return;
                }
            }
        }

        _log.info("...Initializing database product name as default: ${database.daoGenDbName}");
        setDatabaseProductNameToContext("${database.daoGenDbName}");
    }

    protected String getDatabaseProductNameFromContext() {
        return ${glConditionBeanContextName}.getDatabaseProductName();
    }

    protected void setDatabaseProductNameToContext(String name) {
        ${glConditionBeanContextName}.setDatabaseProductName(name);
    }

    protected boolean setupDatabaseProductNameByDriverClassName(String driverClassName) {
        return ${glConditionBeanContextName}.setupDatabaseProductNameByDriverClassName(driverClassName);
    }

#if ($database.isVersionAfter1046() && !$database.isVersionAfter1047())
    // ===================================================================================
    //                                                                          Initialize
    //                                                                          ==========
    public void initialize() {
        if (dtoMetaDataFactory == null) {
            final org.seasar.dao.impl.DtoMetaDataFactoryImpl factory = new org.seasar.dao.impl.DtoMetaDataFactoryImpl();
            factory.setAnnotationReaderFactory(this.annotationReaderFactory);
            factory.setValueTypeFactory(valueTypeFactory);
            dtoMetaDataFactory = factory;
        }
        if (resultSetHandlerFactory == null) {
            final org.seasar.dao.impl.ResultSetHandlerFactoryImpl factory = new ${glDaoMetaDataExtension}.ResultSetHandlerFactoryExtension();
            factory.setDtoMetaDataFactory(dtoMetaDataFactory);
            resultSetHandlerFactory = factory;
        }
    }
#end

    // ===================================================================================
    //                                                      DataMetaData Creation Override
    //                                                      ==============================
    protected DaoMetaDataImpl createDaoMetaDataImpl() {// Override!
        final ${glDaoMetaDataExtension} dmdExtension = newDaoMetaDataExtension();
        dmdExtension.setBeanEnhancer(beanEnhancer);
#if ($database.isVersionAfter1046())
        dmdExtension.setAnnotationReaderFactory(this.annotationReaderFactory);
#end
        dmdExtension.setDefaultStatementConfig(${glDBFluteConfig}.getInstance().getDefaultStatementConfig());
        dmdExtension.setInternalDebug(${glDBFluteConfig}.getInstance().isInternalDebug());
        return dmdExtension;
    }

    protected ${glDaoMetaDataExtension} newDaoMetaDataExtension() {
        return new ${glDaoMetaDataExtension}();
    }

    // ===================================================================================
    //                                                                   Sql File Encoding
    //                                                                   =================
    public String getSqlFileEncoding() {
        return sqlFileEncoding;
    }

    // ===================================================================================
    //                                                                       Bean Enhancer
    //                                                                       =============
    public BeanEnhancer getBeanEnhancer() {
        return beanEnhancer;
    }

    public void setBeanEnhancer(final BeanEnhancer beanEnhancer) {
        this.beanEnhancer = beanEnhancer;
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    /**
     * Get the value of line separator.
     * 
     * @return The value of line separator. (NotNull)
     */
    protected static String getLineSeparator() {
        return System.getProperty("line.separator");
    }
}