${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.seasar.extension.jdbc.ResultSetFactory;

// import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanInterfaceName};
// import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanContextName};
// import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalBasicHandler}.SQLExceptionHandler;

/**
 * This is unused in DBFlute so this is very NORMAL result-set-factory for S2Dao.
 * @author ${database.ClassAuthor}
 */
public class ${glFetchNarrowingResultSetFactory} implements ResultSetFactory {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${glFetchNarrowingResultSetFactory}() {
    }

    // ===================================================================================
    //                                                                                Main
    //                                                                                ====
    /**
     * Get result set.
     * @param statement Statement. (NotNull)
     * @return Result set for procedure executing of s2dao. (NotNull)
     */
    public ResultSet getResultSet(Statement statement) { // Unused in DBFlute
        return doGetResultSet(statement);
    }

    /**
     * Create result set.
     * @param ps Prepared statement. (NotNull)
     * @return Result set. (NotNull)
     */
    public ResultSet createResultSet(PreparedStatement ps) { // Unused in DBFlute
        return executeQuery(ps);

        // *Move to InternalBasicSelectHandler 
        // if (!${glFetchNarrowingBeanContextName}.isExistFetchNarrowingBeanOnThread()) {
        //     return resultSet;
        // }
        // final ${glFetchNarrowingBeanInterfaceName} cb = ${glFetchNarrowingBeanContextName}.getFetchNarrowingBeanOnThread();
        // if (!isUseFetchNarrowingResultSetWrapper(cb)) {
        //     return resultSet;
        // }
        // final ${glFetchNarrowingResultSetWrapper} wrapper;
        // if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
        //     final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
        //     wrapper = new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName}, outsideSqlContext.isOffsetByCursorForcedly(), outsideSqlContext.isLimitByCursorForcedly());
        // } else {
        //     wrapper = new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName}, false, false);
        // }
        // return wrapper;
    }

    // protected boolean isUseFetchNarrowingResultSetWrapper(${glFetchNarrowingBeanInterfaceName} cb) {
    //     if (cb.getSafetyMaxResultSize() > 0) {
    //         return true;
    //     }
    //     if (!cb.isFetchNarrowingEffective()) {
    //         return false;// It is not necessary to control.
    //     }
    //     if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
    //         final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
    //         if (outsideSqlContext.isOffsetByCursorForcedly() || outsideSqlContext.isLimitByCursorForcedly()) {
    //             return true;
    //         }
    //     }
    //     if (cb.isFetchNarrowingSkipStartIndexEffective() || cb.isFetchNarrowingLoopCountEffective()) {
    //         return true;
    //     }
    //     return false;
    // }

    // ===================================================================================
    //                                                                      JDBC Delegator
    //                                                                      ==============
    protected ResultSet doGetResultSet(Statement statement)  {
        try {
            return statement.getResultSet();
        } catch (SQLException e) {
            handleSQLException(e, statement);
            return null;// Unreachable!
        }
    }

    protected ResultSet executeQuery(PreparedStatement ps) {
        try {
            return ps.executeQuery();
        } catch (SQLException e) {
            handleSQLException(e, ps);
            return null;// Unreachable!
        }
    }

    protected void handleSQLException(SQLException e, Statement statement) {
        new SQLExceptionHandler().handleSQLException(e, statement);
    }
}
