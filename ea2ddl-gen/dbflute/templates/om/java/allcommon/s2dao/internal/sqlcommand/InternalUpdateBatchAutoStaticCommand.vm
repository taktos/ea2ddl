${database.allClassCopyright}package ${glPackageBaseCommonS2DaoInternalSqlCommand};

import javax.sql.DataSource;

import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.dao.BeanMetaData;

import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalAbstractAutoHandler};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalAbstractBatchAutoHandler};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalUpdateBatchAutoHandler};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glInternalUpdateBatchAutoStaticCommand} extends ${glInternalAbstractBatchAutoStaticCommand} {

	// ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glInternalUpdateBatchAutoStaticCommand}(DataSource dataSource,
            StatementFactory statementFactory, BeanMetaData beanMetaData,
            String[] propertyNames, boolean returningRows, boolean versionNoAutoIncrementOnMemory) {
        super(dataSource, statementFactory, beanMetaData, propertyNames, returningRows, versionNoAutoIncrementOnMemory);
    }

	// ===================================================================================
    //                                                                            Override
    //                                                                            ========
	@Override
    protected ${glInternalAbstractAutoHandler} createAutoHandler() {
        return createBatchAutoHandler();
    }

	@Override
    protected ${glInternalAbstractBatchAutoHandler} createBatchAutoHandler() {
        ${glInternalUpdateBatchAutoHandler} handler = newInternalBatchAutoHandler();
        handler.setVersionNoAutoIncrementOnMemory(versionNoAutoIncrementOnMemory);
        return handler;
    }

    protected ${glInternalUpdateBatchAutoHandler} newInternalBatchAutoHandler() {
        return new ${glInternalUpdateBatchAutoHandler}(getDataSource(), getStatementFactory(), getBeanMetaData(), getPropertyTypes());
    }

	@Override
    protected void setupSql() {
        setupUpdateSql();
    }

	@Override
    protected void setupPropertyTypes(String[] propertyNames) {
        setupUpdatePropertyTypes(propertyNames);
    }
}
