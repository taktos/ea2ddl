${database.allClassCopyright}package ${glPackageBaseCommonCValue};

#set ($myClassName = "${glConditionValueName}")

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import ${glPackageBaseCommonCOption}.${glConditionOptionLikeSearchName};
import ${glPackageBaseCommonCOption}.${glConditionOptionInScopeName};

/**
 * Condition value.
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} {

    // ===================================================================================
    //                                                                               Equal
    //                                                                               =====
    /** Value of equal. */
    protected Object _equalValue;

    /**
     * Get the value of equal.
     * @return The value of equal. (Nullable)
     */
    public Object getEqual() {
        return filterValue(_equalValue);
    }

    /**
     * Set the value of equal.
     * @param value The value of equal. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setEqual(Object value) {
        _equalValue = value;
        return this;
    }

    /**
     * Does it has the value of equal?
     * @return Determination. (NotNull)
     */
    public boolean hasEqual() {
        return _equalValue != null;
    }

    /**
     * Does the value equal the value of equal?
     * @param value The value of equal. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalEqual(Object value) {
        return hasEqual() ? _equalValue.equals(value) : value == null;
    }

    /**
     * Override the value of equal.
     * @param value The value of equal. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideEqual(Object value) {
        _equalValue = value;
        return this;
    }

    /** Location of equal. */
    protected String _equalLocation;

    /**
     * Get the location of equal.
     * @return The location of equal. (Nullable)
     */
    public String getEqualLocation() {
        return _equalLocation;
    }

    /**
     * Set the location of equal.
     * @param location The location of equal. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setEqualLocation(String location) {
        _equalLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                           Not Equal
    //                                                                           =========
    /** Value of notEqual. */
    protected Object _notEqualValue;

    /**
     * Get the value of notEqual.
     * @return The value of notEqual. (Nullable)
     */
    public Object getNotEqual() {
        return filterValue(_notEqualValue);
    }

    /**
     * Set the value of notEqual.
     * @param value The value of notEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setNotEqual(Object value) {
        _notEqualValue = value;
        return this;
    }

    /**
     * Does it has the value of notEqual?
     * @return Determination. (NotNull)
     */
    public boolean hasNotEqual() {
        return _notEqualValue != null;
    }

    /**
     * Does the value equal the value of notEqual?
     * @param value The value of notEqual. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalNotEqual(Object value) {
        return hasNotEqual() ? _notEqualValue.equals(value) : value == null;
    }

    /**
     * Override the value of notEqual.
     * @param value The value of notEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideNotEqual(Object value) {
        _notEqualValue = value;
        return this;
    }

    /** Location of notEqual. */
    protected String _notEqualLocation;

    /**
     * Get the location of notEqual.
     * @return The location of notEqual. (Nullable)
     */
    public String getNotEqualLocation() {
        return _notEqualLocation;
    }

    /**
     * Set the location of notEqual.
     * 
     * @param location The location of notEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setNotEqualLocation(String location) {
        _notEqualLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                        Greater Than
    //                                                                        ============
    /** Value of greaterThan. */
    protected Object _greaterThanValue;

    /**
     * Get the value of greaterThan.
     * @return The value of greaterThan. (Nullable)
     */
    public Object getGreaterThan() {
        return filterValue(_greaterThanValue);
    }

    /**
     * Set the value of greaterThan.
     * @param value The value of greaterThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setGreaterThan(Object value) {
        _greaterThanValue = value;
        return this;
    }

    /**
     * Does it has the value of greaterThan?
     * @return Determination. (NotNull)
     */
    public boolean hasGreaterThan() {
        return _greaterThanValue != null;
    }

    /**
     * Does the value equal the value of greaterThan?
     * @param value The value of greaterThan. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalGreaterThan(Object value) {
        return hasGreaterThan() ? _greaterThanValue.equals(value) : value == null;
    }

    /**
     * Override the value of greaterThan.
     * @param value The value of greaterThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideGreaterThan(Object value) {
        _greaterThanValue = value;
        return this;
    }

    /** Location of GreaterThan. */
    protected String _greaterThanLocation;

    /**
     * Get the location of greaterThan.
     * @return The location of greaterThan. (Nullable)
     */
    public String getGreaterThanLocation() {
        return _greaterThanLocation;
    }

    /**
     * Set the location of greaterThan.
     * @param location The location of greaterThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setGreaterThanLocation(String location) {
        _greaterThanLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                           Less Than
    //                                                                           =========
    /** Value of lessThan. */
    protected Object _lessThanValue;

    /**
     * Get the value of lessThan.
     * @return The value of lessThan. (Nullable)
     */
    public Object getLessThan() {
        return filterValue(_lessThanValue);
    }

    /**
     * Set the value of lessThan.
     * @param value The value of lessThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLessThan(Object value) {
        _lessThanValue = value;
        return this;
    }

    /**
     * Does it has the value of lessThan?
     * @return Determination. (NotNull)
     */
    public boolean hasLessThan() {
        return _lessThanValue != null;
    }

    /**
     * Does the value equal the value of lessThan?
     * @param value The value of lessThan. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalLessThan(Object value) {
        return hasLessThan() ? _lessThanValue.equals(value) : value == null;
    }

    /**
     * Override the value of lessThan.
     * @param value The value of lessThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideLessThan(Object value) {
        _lessThanValue = value;
        return this;
    }

    /** Location of lessThan. */
    protected String _lessThanLocation;

    /**
     * Get the location of lessThan.
     * @return The location of lessThan. (Nullable)
     */
    public String getLessThanLocation() {
        return _lessThanLocation;
    }

    /**
     * Set the location of lessThan.
     * @param location The location of lessThan. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLessThanLocation(String location) {
        _lessThanLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                       Greater Equal
    //                                                                       =============
    /** Value of greaterEqual. */
    protected Object _greaterEqualValue;

    /**
     * Get the value of greaterEqual.
     * @return The value of greaterEqual. (Nullable)
     */
    public Object getGreaterEqual() {
        return filterValue(_greaterEqualValue);
    }

    /**
     * Set the value of greaterEqual.
     * @param value The value of greaterEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setGreaterEqual(Object value) {
        _greaterEqualValue = value;
        return this;
    }

    /**
     * Does it has the value of greaterEqual?
     * @return Determination. (NotNull)
     */
    public boolean hasGreaterEqual() {
        return _greaterEqualValue != null;
    }

    /**
     * Does the value equal the value of greaterEqual?
     * @param value The value of greaterEqual. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalGreaterEqual(Object value) {
        return hasGreaterEqual() ? _greaterEqualValue.equals(value) : value == null;
    }

    /**
     * Override the value of greaterEqual.
     * @param value The value of greaterEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideGreaterEqual(Object value) {
        _greaterEqualValue = value;
        return this;
    }

    /** Location of greaterEqual. */
    protected String _greaterEqualLocation;

    /**
     * Get the location of greaterEqual.
     * @return The location of greaterEqual. (Nullable)
     */
    public String getGreaterEqualLocation() {
        return _greaterEqualLocation;
    }

    /**
     * Set the location of greaterEqual.
     * @param location The location of greaterEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setGreaterEqualLocation(String location) {
        _greaterEqualLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                          Less Equal
    //                                                                          ==========
    /** Value of lessEqual. */
    protected Object _lessEqualValue;

    /**
     * Get the value of lessEqual.
     * @return The value of lessEqual. (Nullable)
     */
    public Object getLessEqual() {
        return filterValue(_lessEqualValue);
    }

    /**
     * Set the value of lessEqual.
     * @param value The value of lessEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLessEqual(Object value) {
        _lessEqualValue = value;
        return this;
    }

    /**
     * Does it has the value of lessEqual?
     * @return Determination. (NotNull)
     */
    public boolean hasLessEqual() {
        return _lessEqualValue != null;
    }

    /**
     * Does the value equal the value of lessEqual?
     * @param value The value of lessEqual. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalLessEqual(Object value) {
        return hasLessEqual() ? _lessEqualValue.equals(value) : value == null;
    }

    /**
     * Override the value of lessEqual.
     * @param value The value of lessEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideLessEqual(Object value) {
        _lessEqualValue = value;
        return this;
    }

    /** Location of lessEqual. */
    protected String _lessEqualLocation;

    /**
     * Get the location of lessEqual.
     * @return The location of lessEqual. (Nullable)
     */
    public String getLessEqualLocation() {
        return _lessEqualLocation;
    }

    /**
     * Set the location of lessEqual.
     * @param location The location of lessEqual. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLessEqualLocation(String location) {
        _lessEqualLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                       Prefix Search
    //                                                                       =============
    /** Value of prefixSearch. */
    protected Object _prefixSearch;

    /**
     * Get the value of prefixSearch.
     * @return The value of prefixSearch. (Nullable)
     */
    public Object getPrefixSearch() {
        return filterValue(_prefixSearch);
    }

    /**
     * Set the value of prefixSearch.
     * @param value The value of prefixSearch. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setPrefixSearch(Object value) {
        _prefixSearch = value;
        return this;
    }

    /**
     * Does it has the value of prefixSearch?
     * @return Determination. (NotNull)
     */
    public boolean hasPrefixSearch() {
        return _prefixSearch != null;
    }

    /**
     * Does the value equal the value of prefixSearch?
     * @param value The value of prefixSearch. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalPrefixSearch(Object value) {
        return hasPrefixSearch() ? _prefixSearch.equals(value) : value == null;
    }

    /**
     * Override the value of prefixSearch.
     * @param value The value of prefixSearch. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overridePrefixSearch(Object value) {
        _prefixSearch = value;
        return this;
    }

    /** Location of prefixSearch. */
    protected String _prefixSearchLocation;

    /**
     * Get the location of prefixSearch.
     * @return The location of prefixSearch. (Nullable)
     */
    public String getPrefixSearchLocation() {
        return _prefixSearchLocation;
    }

    /**
     * Set the location of prefixSearch.
     * @param location The location of prefixSearch. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setPrefixSearchLocation(String location) {
        _prefixSearchLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                         Like Search
    //                                                                         ===========
    /** Value of likeSearch. */
    protected List<LikeSearchValue> _likeSearch;

    /** Value of likeSearch for spare. */
    protected List<LikeSearchValue> _likeSearch4Spare;

    /**
     * Get the value of likeSearch.
     * @return The value of likeSearch. (Nullable)
     */
    public String getLikeSearch() {
        if (_likeSearch == null) {
            return null;
        }
        if (_likeSearch.isEmpty() && !_likeSearch4Spare.isEmpty()) {
            for (int index=0; index < _likeSearch4Spare.size(); index++) {
                _likeSearch.add(_likeSearch4Spare.get(index));
            }
        }
        final LikeSearchValue likeSearchValue = (LikeSearchValue)_likeSearch.remove(0);
        return (String)filterValue(likeSearchValue.generateRealValue());
    }

    /**
     * Set the value of likeSearch.
     * @param value The value of likeSearch. (Nullable)
     * @param option The option of likeSearch. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLikeSearch(String value, ${glConditionOptionLikeSearchName} option) {
        if (_likeSearch == null) {
            _likeSearch = new ArrayList<LikeSearchValue>();
            _likeSearch4Spare= new ArrayList<LikeSearchValue>();
        }
        if (_likeSearch.isEmpty() && !_likeSearch4Spare.isEmpty()) {
            for (int index=0; index < _likeSearch4Spare.size(); index++) {
                _likeSearch.add(_likeSearch4Spare.get(index));
            }
        }
        LikeSearchValue likeSearchValue = new LikeSearchValue(value, option);
        _likeSearch.add(likeSearchValue);
        _likeSearch4Spare.add(likeSearchValue);
        return this;
    }

    /** Location of likeSearch. */
    protected String _likeSearchLocation;

    /**
     * Get the location of likeSearch.
     * @return The location of likeSearch. (Nullable)
     */
    public String getLikeSearchLocation() {
        return _likeSearchLocation;
    }

    /**
     * Set the location of likeSearch.
     * @param location The location of likeSearch. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setLikeSearchLocation(String location) {
        _likeSearchLocation = location;
        return this;
    }

    protected static class LikeSearchValue {
        protected String _value;
        protected ${glConditionOptionLikeSearchName} _option;
        public LikeSearchValue(String value, ${glConditionOptionLikeSearchName} option) {
            _value = value;
            _option = option;
        }
        public String getValue() {
            return _value;
        }
        public ${glConditionOptionLikeSearchName} getOption() {
            return _option;
        }
        public String generateRealValue() {
            if (_option == null) {
                return _value;
            }
            return _option.generateRealValue(_value);
        }
    }

    // ===================================================================================
    //                                                                            In Scope
    //                                                                            ========
    /** Value of inScope. */
    protected List<?> _inScope;

    protected ${glConditionOptionInScopeName} _inScopeOption;

    /**
     * Get the value of inScope.
     * @return The value of inScope. (Nullable)
     */
    @SuppressWarnings("unchecked")
    public List<?> getInScope() {
        if (_inScopeOption != null) {
            return filterValue(_inScopeOption.generateRealValueList((List<String>)_inScope));
        }
        return filterValue(_inScope);
    }

    /**
     * Set the value of inScope.
     * @param value The value of inScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setInScope(List<?> value) {
        _inScope = value;
        return this;
    }

    public ${myClassName} setInScope(List<?> value, ${glConditionOptionInScopeName} option) {
        _inScope = value;
        _inScopeOption = option;
        return this;
    }

    /**
     * Does it has the value of inScope?
     * @return Determination. (NotNull)
     */
    public boolean hasInScope() {
        return _inScope != null;
    }

    /**
     * Does the value equal the value of inScope?
     * @param value The value of inScope. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalInScope(List<?> value) {
        return hasInScope() ? _inScope.equals(value) : value == null;
    }

    /**
     * Override the value of inScope.
     * @param value The value of inScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideInScope(List<?> value) {
        _inScope = value;
        return this;
    }

    /** Location of InScope. */
    protected String _inScopeLocation;

    /**
     * Get the location of inScope.
     * @return The location of inScope. (Nullable)
     */
    public String getInScopeLocation() {
        return _inScopeLocation;
    }

    /**
     * Set the location of inScope.
     * @param location The location of inScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setInScopeLocation(String location) {
        _inScopeLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                        Not In Scope
    //                                                                        ============
    /** Value of notInScope. */
    protected List<?> _notInScope;

    /**
     * Get the value of notInScope.
     * @return The value of notInScope. (Nullable)
     */
    public List<?> getNotInScope() {
        return filterValue(_notInScope);
    }

    /**
     * Set the value of notInScope.
     * @param value The value of notInScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setNotInScope(List<?> value) {
        _notInScope = value;
        return this;
    }

    /**
     * Does it has the value of inNotScope?
     * @return Determination. (NotNull)
     */
    public boolean hasNotInScope() {
        return _notInScope != null;
    }

    /**
     * Does the value equal the value of inNotScope?
     * @param value The value of inNotScope. (Nullable)
     * @return Determination. (NotNull)
     */
    public boolean equalNotInScope(List<?> value) {
        return hasNotInScope() ? _notInScope.equals(value) : value == null;
    }

    /**
     * Override the value of inNotScope.
     * @param value The value of inNotScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} overrideNotInScope(List<?> value) {
        _notInScope = value;
        return this;
    }

    /** Location of notInScope. */
    protected String _notInScopeLocation;

    /**
     * Get the location of notInScope.
     * @return The location of notInScope. (Nullable)
     */
    public String getNotInScopeLocation() {
        return _notInScopeLocation;
    }

    /**
     * Set the location of notInScope.
     * @param location The location of notInScope. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setNotInScopeLocation(String location) {
        _notInScopeLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                             Is Null
    //                                                                             =======
    /** Value of isNull. */
    protected Object _isNullValue;

    /**
     * Get the value of isNull.
     * @return The value of isNull. (Nullable)
     */
    public Object getIsNull() {
        return _isNullValue;
    }

    /**
     * Set the value of isNull.
     * @param value The value of isNull. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setIsNull(Object value) {
        _isNullValue = value;
        return this;
    }

    /**
     * Does it has the value of isNull?
     * @return Determination. (NotNull)
     */
    public boolean hasIsNull() {
        return _isNullValue != null;
    }

    /** Location of isNull. */
    protected String _isNullLocation;

    /**
     * Get the location of isNull.
     * @return The location of isNull. (Nullable)
     */
    public String getIsNullLocation() {
        return _isNullLocation;
    }

    /**
     * Set the location of isNull.
     * @param location The location of isNull. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setIsNullLocation(String location) {
        _isNullLocation = location;
        return this;
    }

    // ===================================================================================
    //                                                                         Is Not Null
    //                                                                         ===========
    /** Value of isNotNull. */
    protected Object _isNotNullValue;

    /**
     * Get the value of isNotNull.
     * @return The value of isNotNull. (Nullable)
     */
    public Object getIsNotNull() {
        return _isNotNullValue;
    }

    /**
     * Set the value of isNotNull.
     * @param value The value of isNotNull. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setIsNotNull(Object value) {
        _isNotNullValue = value;
        return this;
    }

    /**
     * Does it has the value of isNotNull?
     * @return Determination. (NotNull)
     */
    public boolean hasIsNotNull() {
        return _isNotNullValue != null;
    }

    /** Location of isNotNull. */
    protected String _isNotNullLocation;

    /**
     * Get the location of isNotNull.
     * @return The location of isNotNull. (Nullable)
     */
    public String getIsNotNullLocation() {
        return _isNotNullLocation;
    }

    /**
     * Set the location of isNotNull.
     * @param location The location of isNotNull. (Nullable)
     * @return this. (NotNull)
     */
    public ${myClassName} setIsNotNullLocation(String location) {
        _isNotNullLocation = location;
        return this;
    }

    // =====================================================================================
    //                                                                                Filter
    //                                                                                ======
    /**
     * Filter value.
     * If the value is instance of java.util.Date or java.util.Calendar, returns value as java.sql.Date.
     * @param value Value. (Nullable)
     * @return Filtered value. (Nullable)
     */
    protected Object filterValue(Object value) {
        if (value == null) {
            return value;
        }
        if (value instanceof java.sql.Time) {
            return value;
        }
        if (value instanceof java.sql.Timestamp) {
            return value;
        }
        if (value instanceof java.util.Date || value instanceof java.util.Calendar) {
            return SqlDateConversionUtil.toDate(value);
        } else {
            return value;
        }
    }

    /**
     * Filter value.
     * If the value is instance of java.util.Date or java.util.Calendar, returns value as java.sql.Date.
     * @param valueList Value-list. (Nullable)
     * @return Filtered value-list. (Nullable)
     */
    protected List<?> filterValue(List<?> valueList) {
        if (valueList == null || valueList.isEmpty()) {
            return valueList;
        }
        final List<Object> resultList = new ArrayList<Object>();
        for (Iterator<?> ite = valueList.iterator(); ite.hasNext(); ) {
            Object value = ite.next();
            resultList.add(filterValue(value));
        }
        return resultList;
    }

    protected static class SqlDateConversionUtil {

        private SqlDateConversionUtil() {
        }

        public static java.sql.Date toDate(Object o) {
            return toDate(o, null);
        }

        public static java.sql.Date toDate(Object o, String pattern) {
            if (o instanceof java.sql.Date) {
                return (java.sql.Date) o;
            }
            java.util.Date date = DateConversionUtil.toDate(o, pattern);
            if (date != null) {
                return new java.sql.Date(date.getTime());
            }
            return null;
        }
    }

    protected static class DateConversionUtil {

        private DateConversionUtil() {
        }

        public static java.util.Date toDate(Object o) {
            return toDate(o, null);
        }

        public static java.util.Date toDate(Object o, String pattern) {
            if (o == null) {
                return null;
            } else if (o instanceof String) {
                return toDate((String) o, pattern);
            } else if (o instanceof java.util.Date) {
                return (java.util.Date) o;
            } else if (o instanceof java.util.Calendar) {
                return ((java.util.Calendar) o).getTime();
            } else {
                return toDate(o.toString(), pattern);
            }
        }

        public static java.util.Date toDate(String s, String pattern) {
            return toDate(s, pattern, java.util.Locale.getDefault());
        }

        public static java.util.Date toDate(String s, String pattern, java.util.Locale locale) {
            java.text.SimpleDateFormat sdf = getDateFormat(s, pattern, locale);
            try {
                return sdf.parse(s);
            } catch (java.text.ParseException ex) {
                throw new RuntimeException(ex);
            }
        }

        public static java.text.SimpleDateFormat getDateFormat(String s, String pattern,
                java.util.Locale locale) {
            if (pattern != null) {
                return new java.text.SimpleDateFormat(pattern);
            }
            return getDateFormat(s, locale);
        }

        public static java.text.SimpleDateFormat getDateFormat(String s, java.util.Locale locale) {
            String pattern = getPattern(locale);
            String shortPattern = removeDelimiter(pattern);
            String delimitor = findDelimiter(s);
            if (delimitor == null) {
                if (s.length() == shortPattern.length()) {
                    return new java.text.SimpleDateFormat(shortPattern);
                }
                if (s.length() == shortPattern.length() + 2) {
                    return new java.text.SimpleDateFormat(InternalStringUtil.replace(shortPattern,
                            "yy", "yyyy"));
                }
            } else {
                String[] array = InternalStringUtil.split(s, delimitor);
                for (int i = 0; i < array.length; ++i) {
                    if (array[i].length() == 4) {
                        pattern = InternalStringUtil.replace(pattern, "yy", "yyyy");
                        break;
                    }
                }
                return new java.text.SimpleDateFormat(pattern);
            }
            return new java.text.SimpleDateFormat();
        }

        public static java.text.SimpleDateFormat getDateFormat(java.util.Locale locale) {
            return new java.text.SimpleDateFormat(getPattern(locale));
        }

        public static java.text.SimpleDateFormat getY4DateFormat(java.util.Locale locale) {
            return new java.text.SimpleDateFormat(getY4Pattern(locale));
        }

        public static String getY4Pattern(java.util.Locale locale) {
            String pattern = getPattern(locale);
            if (pattern.indexOf("yyyy") < 0) {
                pattern = InternalStringUtil.replace(pattern, "yy", "yyyy");
            }
            return pattern;
        }

        public static String getPattern(java.util.Locale locale) {
            java.text.SimpleDateFormat df = (java.text.SimpleDateFormat) java.text.DateFormat.getDateInstance(
                    java.text.DateFormat.SHORT, locale);
            String pattern = df.toPattern();
            int index = pattern.indexOf(' ');
            if (index > 0) {
                pattern = pattern.substring(0, index);
            }
            if (pattern.indexOf("MM") < 0) {
                pattern = InternalStringUtil.replace(pattern, "M", "MM");
            }
            if (pattern.indexOf("dd") < 0) {
                pattern = InternalStringUtil.replace(pattern, "d", "dd");
            }
            return pattern;
        }

        public static String findDelimiter(String value) {
            for (int i = 0; i < value.length(); ++i) {
                char c = value.charAt(i);
                if (Character.isDigit(c)) {
                    continue;
                }
                return Character.toString(c);
            }
            return null;
        }

        public static String removeDelimiter(String pattern) {
            StringBuffer buf = new StringBuffer();
            for (int i = 0; i < pattern.length(); ++i) {
                char c = pattern.charAt(i);
                if (c == 'y' || c == 'M' || c == 'd') {
                    buf.append(c);
                }
            }
            return buf.toString();
        }
    }

    protected static class InternalStringUtil {
        public static final String[] EMPTY_STRINGS = new String[0];
        private InternalStringUtil() {
        }
        public static final boolean isEmpty(String text) {
            return text == null || text.length() == 0;
        }
        public static final String replace(String text, String fromText, String toText) {
            if (text == null || fromText == null || toText == null) {
                return null;
            }
            StringBuffer buf = new StringBuffer(100);
            int pos = 0;
            int pos2 = 0;
            while (true) {
                pos = text.indexOf(fromText, pos2);
                if (pos == 0) {
                    buf.append(toText);
                    pos2 = fromText.length();
                } else if (pos > 0) {
                    buf.append(text.substring(pos2, pos));
                    buf.append(toText);
                    pos2 = pos + fromText.length();
                } else {
                    buf.append(text.substring(pos2));
                    break;
                }
            }
            return buf.toString();
        }

        public static String[] split(String str, String delim) {
            if (str == null) {
                return EMPTY_STRINGS;
            }
            List${database.filterGenericsString('String')} list = new java.util.ArrayList${database.filterGenericsString('String')}();
            java.util.StringTokenizer st = new java.util.StringTokenizer(str, delim);
            while (st.hasMoreElements()) {
                list.add(st.nextToken());
            }
            return (String[]) list.toArray(new String[list.size()]);
        }
    }
}
