${database.allClassCopyright}package ${glPackageBaseCommon};

#if ($database.isExistCommonColumnSetupElement())
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
#end
import org.seasar.dbflute.Entity;
import org.seasar.dbflute.bhv.core.CommonColumnAutoSetupper;

/**
 * The basic implementation of the auto set-upper of common column.
 * @author ${database.ClassAuthor}
 */
public class ${glImplementedCommonColumnAutoSetupper} implements CommonColumnAutoSetupper {
#if ($database.isExistCommonColumnSetupElement())

    // =====================================================================================
    //                                                                            Definition
    //                                                                            ==========
    /** Log instance. */
    private static final Log _log = LogFactory.getLog(${glImplementedCommonColumnAutoSetupper}.class);

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
#foreach ($resource in $database.commonColumnSetupResourceList)
    /** The property of ${resource.propertyName}. */
    protected ${resource.className} ${resource.propertyVariableName};

    /**
     * @return The value of ${resource.propertyName}.
     */
    public ${resource.className} get${resource.propertyNameInitCap}() {
        return ${resource.propertyVariableName};
    }

    /**
     * @param ${resource.propertyName} The value of ${resource.propertyName}.
     */
    public void set${resource.propertyNameInitCap}(${resource.className} ${resource.propertyName}) {
        this.${resource.propertyVariableName} = ${resource.propertyName};
    }
#end
#end

    // =====================================================================================
    //                                                                                Set up
    //                                                                                ======
    /**
     * Handle common columns of insert if it needs.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    public void handleCommonColumnOfInsertIfNeeds(Entity targetEntity) {
#if ($database.isExistCommonColumnSetupElement())
        if (!(targetEntity instanceof ${glEntityDefinedCommonColumn})) {
            return;
        }
        final ${glEntityDefinedCommonColumn} entity = (${glEntityDefinedCommonColumn})targetEntity;
        if (!entity.canCommonColumnAutoSetup()) {
            return;
        }
        if (_log.isDebugEnabled()) {
            String msg = "...Filtering entity of INSERT about the column columns of " + entity.getTableDbName();
            msg = msg + ": entity=" + entity.getDBMeta().extractPrimaryKeyMapString(entity, "{", "}", ", ", "=");
            _log.debug(msg);
        }
#foreach ($columnName in ${database.commonColumnNameList})
#set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
#set ($entityCommonColumnMap = ${database.commonColumnMap})
#set ($columnType = ${entityCommonColumnMap.get(${columnName})})
#set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
#set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeInsertInterceptorLogicMap(${columnName})})
#set ($logic = ${database.getCommonColumnSetupBeforeInsertInterceptorLogicByColumnName(${columnName})})
#if ($database.isCommonColumnSetupInvokingLogic($logic))
#set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

        ${filteredLogic}
#else

        final ${javaNative} ${uncapitalisedJavaName} = ${logic};
        entity.set${javaName}(${uncapitalisedJavaName});
#end
#end
#end
#end
    }

    /**
     * Handle common columns of update if it needs.
     * @param targetEntity Target entity that the type is entity interface. (NotNull)
     */
    public void handleCommonColumnOfUpdateIfNeeds(Entity targetEntity) {
#if ($database.isExistCommonColumnSetupElement())
        if (!(targetEntity instanceof ${glEntityDefinedCommonColumn})) {
            return;
        }
        final ${glEntityDefinedCommonColumn} entity = (${glEntityDefinedCommonColumn})targetEntity;
        if (!entity.canCommonColumnAutoSetup()) {
            return;
        }
        if (_log.isDebugEnabled()) {
            String msg = "...Filtering entity of UPDATE about the column columns of " + entity.getTableDbName();
            msg = msg + ": entity=" + entity.getDBMeta().extractPrimaryKeyMapString(entity, "{", "}", ", ", "=");
            _log.debug(msg);
        }
#foreach ($columnName in ${database.commonColumnNameList})
#set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
#set ($entityCommonColumnMap = ${database.CommonColumnMap})
#set ($columnType = ${entityCommonColumnMap.get(${columnName})})
#set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
#set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeUpdateInterceptorLogicMap(${columnName})})
#set ($logic = ${database.getCommonColumnSetupBeforeUpdateInterceptorLogicByColumnName(${columnName})})
#if ($database.isCommonColumnSetupInvokingLogic($logic))
#set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

        ${filteredLogic}
#else

        final ${javaNative} ${uncapitalisedJavaName} = ${logic};
        entity.set${javaName}(${uncapitalisedJavaName});
#end
#end
#end
#end
    }
}
