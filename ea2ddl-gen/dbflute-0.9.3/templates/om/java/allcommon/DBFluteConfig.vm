${database.allClassCopyright}package ${glPackageBaseCommon};

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.seasar.dbflute.QLog;
import org.seasar.dbflute.XLog;
import org.seasar.dbflute.jdbc.DataSourceHandler;
import org.seasar.dbflute.jdbc.StatementConfig;

/**
 * @author ${database.ClassAuthor}
 */
public class ${glDBFluteConfig} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Log instance. */
    private static final Log _log = LogFactory.getLog(${glDBFluteConfig}.class);

    /** Singleton instance. */
    private static final ${glDBFluteConfig} _instance = new ${glDBFluteConfig}();

#if ($database.isOutsideSqlPackageValid())
    /** The default package of outside SQL. The default value is '${database.outsideSqlPackage}'. */
    private static final String DEFAULT_OUTSIDE_SQL_PACKAGE = "${database.outsideSqlPackage}";
#else
    /** The default package of outside SQL. */
    private static final String DEFAULT_OUTSIDE_SQL_PACKAGE = null;
#end

#if ($database.isSqlLogRegistryValid())
    /** The default value of whether it uses SQL Log Registry. The default value is true. */
    private static final boolean DEFAULT_USE_SQL_LOG_REGISTRY = true;
#else
    /** The default value of whether it uses SQL Log Registry. The default value is false. */
    private static final boolean DEFAULT_USE_SQL_LOG_REGISTRY = false;
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
	protected StatementConfig _defaultStatementConfig;
	protected boolean _queryLogLevelInfo;
	protected boolean _executeStatusLogLevelInfo;
	protected String _logDateFormat;
	protected String _logTimestampFormat;
    protected DataSourceHandler _dataSourceHandler;
    protected String _outsideSqlPackage = DEFAULT_OUTSIDE_SQL_PACKAGE;
	protected boolean _useSqlLogRegistry = DEFAULT_USE_SQL_LOG_REGISTRY;
	protected boolean _disableSelectIndex;
	protected boolean _internalDebug;

	protected boolean _locked = true;
	
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    private ${glDBFluteConfig}() {
    }

    // ===================================================================================
    //                                                                           Singleton
    //                                                                           =========
    /**
     * Get singleton instance.
     * @return Singleton instance. (NotNull)
     */
    public static ${glDBFluteConfig} getInstance() {
        return _instance;
    }

    // ===================================================================================
    //                                                            Default Statement Config
    //                                                            ========================
    public StatementConfig getDefaultStatementConfig() {
        return _defaultStatementConfig;
    }
	
    public void setDefaultStatementConfig(StatementConfig defaultStatementConfig) {
	    assertNotLocked();
	    if (_log.isInfoEnabled()) {
		    _log.info("...Setting defaultStatementConfig: " + defaultStatementConfig);
		}
        _defaultStatementConfig = defaultStatementConfig;
    }
	
    // ===================================================================================
    //                                                                Query Log Level Info
    //                                                                ====================
	public void setQueryLogLevelInfo(boolean queryLogLevelInfo) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting queryLogLevelInfo: " + queryLogLevelInfo);
		}
		QLog.unlock();
		QLog.setQueryLogLevelInfo(queryLogLevelInfo);
		QLog.lock();
	}
	
    // ===================================================================================
    //                                                       Execute Status Log Level Info
    //                                                       =============================
	public void setExecuteStatusLogLevelInfo(boolean executeStatusLogLevelInfo) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting executeStatusLogLevelInfo: " + executeStatusLogLevelInfo);
		}
		XLog.unlock();
        XLog.setExecuteStatusLogLevelInfo(executeStatusLogLevelInfo);
		XLog.lock();
	}

    // ===================================================================================
    //                                                                          Log Format
    //                                                                          ==========
	public String getLogDateFormat() {
	    return _logDateFormat;
	}
	
	public void setLogDateFormat(String logDateFormat) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting logDateFormat: " + logDateFormat);
		}
	    _logDateFormat = logDateFormat;
	}

	public String getLogTimestampFormat() {
	    return _logTimestampFormat;
	}
	
	public void setLogTimestampFormat(String logTimestampFormat) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting logTimestampFormat: " + logTimestampFormat);
		}
	    _logTimestampFormat = logTimestampFormat;
	}

    // [DBFlute-0.9.0]
    // ===================================================================================
    //                                                                  DataSource Handler
    //                                                                  ==================
    /**
     * @return The handler of data source. (Nullable)
     */
	public DataSourceHandler getDataSourceHandler() {
	    return _dataSourceHandler;
	}

    /**
     * @param dataSourceHandler The handler of data source. (Nullable)
     */
	public void setDataSourceHandler(DataSourceHandler dataSourceHandler) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting dataSourceHandler: " + dataSourceHandler);
		}
	    _dataSourceHandler = dataSourceHandler;
	}

    // ===================================================================================
    //                                                                  OutsideSql Package
    //                                                                  ==================
    /**
     * @return The package of outside SQL. (Nullable)
     */
	public String getOutsideSqlPackage() {
	    return _outsideSqlPackage;
	}

    /**
     * @param outsideSqlPackage The package of outside SQL. (Nullable)
     */
	public void setOutsideSqlPackage(String outsideSqlPackage) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting outsideSqlPackage: " + outsideSqlPackage);
		}
	    _outsideSqlPackage = outsideSqlPackage;
	}

    // [DBFlute-0.8.2]
    // ===================================================================================
    //                                                                    SQL Log Registry
    //                                                                    ================
	public boolean isUseSqlLogRegistry() {
	    return _useSqlLogRegistry;
	}
	
	public void setUseSqlLogRegistry(boolean useSqlLogRegistry) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting useSqlLogRegistry: " + useSqlLogRegistry);
		}
	    _useSqlLogRegistry = useSqlLogRegistry;
	}

    // [DBFlute-0.9.0]
    // ===================================================================================
    //                                                                        Select Index
    //                                                                        ============
	public boolean isDisableSelectIndex() {
	    return _disableSelectIndex;
	}

	public void setDisableSelectIndex(boolean disableSelectIndex) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting disableSelectIndex: " + disableSelectIndex);
		}
	    _disableSelectIndex = disableSelectIndex;
	}

    // ===================================================================================
    //                                                                      Internal Debug
    //                                                                      ==============
	public boolean isInternalDebug() {
	    return _internalDebug;
	}
	
	public void setInternalDebug(boolean internalDebug) {
	    assertNotLocked();
		if (_log.isInfoEnabled()) {
		    _log.info("...Setting internalDebug: " + internalDebug);
		}
	    _internalDebug = internalDebug;
	}
	
    // ===================================================================================
    //                                                                  Configuration Lock
    //                                                                  ==================
	public boolean isLocked() {
	    return _locked;
	}
	
	public void lock() {
		if (_log.isInfoEnabled()) {
		    _log.info("...Locking the configuration of DBFlute!");
		}
	    _locked = true;
	}
	
	public void unlock() {
		if (_log.isInfoEnabled()) {
		    _log.info("...Unlocking the configuration of DBFlute!");
		}
	    _locked = false;
	}
	
	protected void assertNotLocked() {
	    if (!isLocked()) {
		    return;
		}
		String msg = "The configuration of DBFlute is locked! Don't access at this timing!";
		throw new IllegalStateException(msg);
	}
	
    // ===================================================================================
    //                                                                 Configuration Clear
    //                                                                 ===================
	public void clear() { // the only properties that update OK while executing
	    _defaultStatementConfig = null;
	    _queryLogLevelInfo = false;
	    _executeStatusLogLevelInfo = false;
	    _logDateFormat = null;
	    _logTimestampFormat = null;
	    _dataSourceHandler = null;
	    _outsideSqlPackage = DEFAULT_OUTSIDE_SQL_PACKAGE;
	    _useSqlLogRegistry = DEFAULT_USE_SQL_LOG_REGISTRY;
	    _disableSelectIndex = false;
		_internalDebug = false;
	}
}