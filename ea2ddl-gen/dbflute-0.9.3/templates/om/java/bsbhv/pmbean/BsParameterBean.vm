${database.allClassCopyright}package ${glPackageBaseParameterBean};
#set ($myClassName = "${myBaseParameterBeanClassName}")

#if ($database.isPmbMetaDataForProcedure($pmbClassName))
import org.seasar.dbflute.outsidesql.ProcedurePmb;
#end

/**
 * The parameter-bean of ${pmbClassName}.
 * @author ${database.ClassAuthor}
 */
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
public class ${myClassName} implements ProcedurePmb {
#else
public class ${myClassName} ${database.getPmbMetaDataSuperClassDefinition($pmbClassName)} {
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    // -----------------------------------------------------
    //                                   Procedure Parameter
    //                                   -------------------
#set ($procedureParameterIndex = 0)
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionProcedureParameterIn($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "in, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterOut($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "out, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterInOut($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "inout, ${procedureParameterIndex}";
#set ($procedureParameterIndex = $procedureParameterIndex + 1)
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterReturn($pmbClassName, $propertyName))
    public static final String ${propertyName}_PROCEDURE_PARAMETER = "return";
#end
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /** The value of ${propertyName}. */
    protected ${propertyType} _${propertyName};

#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))
    /** The value of likeSearchOption for ${propertyName}. */
    protected org.seasar.dbflute.cbean.coption.LikeSearchOption _${propertyName}InternalLikeSearchOption;

#end
#end
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }
    
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
    // ===================================================================================
    //                                                                           Procedure
    //                                                                           =========
    public String getProcedureName() {
        return "${database.getPmbMetaDataProcedureName($pmbClassName)}";
    }

#end
    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    /**
     * @param value Query value. (Nullable)
     * @return Converted value. (Nullable)
     */
    protected String convertEmptyToNullIfString(String value) {
        return filterRemoveEmptyString(value);
    }

    /**
     * @param value Query value string. (Nullable)
     * @return Removed-empty value. (Nullable)
     */
    protected String filterRemoveEmptyString(String value) {
        return ((value != null && !"".equals(value)) ? value : null);
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * ${database.OverrideComment}
     * @return The view of properties. (NotNull)
     */
    @Override
    public String toString() {
        final String delimiter = ",";
        final StringBuffer sb = new StringBuffer();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
        sb.append(delimiter).append(_${propertyName});
#end
        if (sb.length() > 0) { sb.delete(0, delimiter.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
    /**
     * Get the value of ${propertyName}. (Converted empty to null)
     * @return The value of ${propertyName}. (Nullable & NotEmptyString: if the value is empty string, returns null)
     */
    public ${propertyType} get${database.initCap($propertyName)}() {
#if ($propertyType.endsWith("String"))
        return ($propertyType)convertEmptyToNullIfString(_${propertyName});
#else
        return _${propertyName};
#end
    }

    /**
     * Set the value of ${propertyName}.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
    }
#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName}.
     * @param ${propertyName} The value of ${propertyName}. (Nullable)
     * @param ${propertyName}Option The option of likeSearch for ${propertyName}. (Nullable)
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${propertyName}, org.seasar.dbflute.cbean.coption.LikeSearchOption ${propertyName}Option) {
        _${propertyName} = ${propertyName};
        _${propertyName}InternalLikeSearchOption = ${propertyName}Option;
    }

    /**
     * Get the internal option of likeSearch for ${propertyName}. {Internal Method: Don't Invoke This!}
     * @return The internal option of likeSearch for ${propertyName}. (Nullable)
     */
    public org.seasar.dbflute.cbean.coption.LikeSearchOption get${database.initCap($propertyName)}InternalLikeSearchOption() {
        return _${propertyName}InternalLikeSearchOption;
    }
#end
#if ($database.isPmbMetaDataPropertyOptionClassification($pmbClassName, $propertyName))
#set ($classificationName = $database.getPmbMetaDataPropertyOptionClassificationName($pmbClassName, $propertyName))
#foreach ($classificationMap in $database.getPmbMetaDataPropertyOptionClassificationMapList($pmbClassName, $propertyName))

    /**
     * Set the value of ${propertyName} as ${classificationMap.get('name')}. <br />
     * ${database.getMapValue($classificationMap, 'comment')}
     */
    public void set${database.initCap($propertyName)}_${classificationMap.get('name')}() {
        _${propertyName} = ${glPackageBaseCommon}.${glCDef}.${classificationName}.${classificationMap.get('name')}.code();
    }
#end
#end

#end
}
